//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.13.2
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from F:/Workspace/Cobra/Frontend/Cobra.g4 by ANTLR 4.13.2

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

using System;
using System.IO;
using System.Text;
using System.Diagnostics;
using System.Collections.Generic;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.13.2")]
[System.CLSCompliant(false)]
public partial class CobraParser : Parser {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		LINK=1, IMPORT=2, NAMESPACE=3, EXTERNAL=4, FUN=5, CONST=6, IF=7, ELSE=8, 
		WHILE=9, DO=10, FOR=11, IN=12, SWITCH=13, CASE=14, DEFAULT=15, TRY=16, 
		CATCH=17, FINALLY=18, RETURN=19, BREAK=20, CONTINUE=21, PRINT=22, INT=23, 
		FLOAT=24, STRING=25, BOOL=26, VOID=27, NULL=28, TRUE=29, FALSE=30, PLUS=31, 
		MINUS=32, MUL=33, DIV=34, MOD=35, PLUS_ASSIGN=36, MINUS_ASSIGN=37, MUL_ASSIGN=38, 
		DIV_ASSIGN=39, MOD_ASSIGN=40, INC=41, DEC=42, ASSIGN=43, EQ=44, NEQ=45, 
		GT=46, LT=47, GTE=48, LTE=49, NOT=50, AND=51, OR=52, BITWISE_AND=53, BITWISE_OR=54, 
		BITWISE_XOR=55, BITWISE_NOT=56, SHL=57, SHR=58, QUESTION=59, SLASH=60, 
		LPAREN=61, RPAREN=62, LBRACE=63, RBRACE=64, LBRACKET=65, RBRACKET=66, 
		SEMICOLON=67, COMMA=68, COLON=69, DOT=70, ID=71, STRING_LITERAL=72, BACKTICK_STRING=73, 
		INTEGER=74, FLOAT_LITERAL=75, LINE_COMMENT=76, BLOCK_COMMENT=77, WS=78;
	public const int
		RULE_program = 0, RULE_linkStatement = 1, RULE_importStatement = 2, RULE_namespaceDeclaration = 3, 
		RULE_qualifiedName = 4, RULE_topLevelDeclaration = 5, RULE_constDeclaration = 6, 
		RULE_varDeclaration = 7, RULE_functionDeclaration = 8, RULE_externDeclaration = 9, 
		RULE_type = 10, RULE_primitiveType = 11, RULE_parameterList = 12, RULE_parameter = 13, 
		RULE_statement = 14, RULE_declarationStatement = 15, RULE_block = 16, 
		RULE_ifStatement = 17, RULE_whileStatement = 18, RULE_doWhileStatement = 19, 
		RULE_forStatement = 20, RULE_forEachStatement = 21, RULE_switchStatement = 22, 
		RULE_switchBlock = 23, RULE_switchLabel = 24, RULE_tryStatement = 25, 
		RULE_jumpStatement = 26, RULE_expressionStatement = 27, RULE_printStatement = 28, 
		RULE_assignmentExpression = 29, RULE_binaryExpression = 30, RULE_unaryOp = 31, 
		RULE_postfixExpression = 32, RULE_leftHandSide = 33, RULE_primary = 34, 
		RULE_argumentList = 35, RULE_functionExpression = 36, RULE_arrayLiteral = 37, 
		RULE_dictLiteral = 38, RULE_dictEntry = 39, RULE_literal = 40, RULE_assignmentOperator = 41;
	public static readonly string[] ruleNames = {
		"program", "linkStatement", "importStatement", "namespaceDeclaration", 
		"qualifiedName", "topLevelDeclaration", "constDeclaration", "varDeclaration", 
		"functionDeclaration", "externDeclaration", "type", "primitiveType", "parameterList", 
		"parameter", "statement", "declarationStatement", "block", "ifStatement", 
		"whileStatement", "doWhileStatement", "forStatement", "forEachStatement", 
		"switchStatement", "switchBlock", "switchLabel", "tryStatement", "jumpStatement", 
		"expressionStatement", "printStatement", "assignmentExpression", "binaryExpression", 
		"unaryOp", "postfixExpression", "leftHandSide", "primary", "argumentList", 
		"functionExpression", "arrayLiteral", "dictLiteral", "dictEntry", "literal", 
		"assignmentOperator"
	};

	private static readonly string[] _LiteralNames = {
		null, "'link'", "'import'", "'namespace'", "'external'", "'fun'", "'const'", 
		"'if'", "'else'", "'while'", "'do'", "'for'", "'in'", "'switch'", "'case'", 
		"'default'", "'try'", "'catch'", "'finally'", "'return'", "'break'", "'continue'", 
		"'print'", "'int'", "'float'", "'string'", "'bool'", "'void'", "'null'", 
		"'true'", "'false'", "'+'", "'-'", "'*'", null, "'%'", "'+='", "'-='", 
		"'*='", "'/='", "'%='", "'++'", "'--'", "'='", "'=='", "'!='", "'>'", 
		"'<'", "'>='", "'<='", "'!'", "'&&'", "'||'", "'&'", "'|'", "'^'", "'~'", 
		"'<<'", "'>>'", "'?'", null, "'('", "')'", "'{'", "'}'", "'['", "']'", 
		"';'", "','", "':'", "'.'"
	};
	private static readonly string[] _SymbolicNames = {
		null, "LINK", "IMPORT", "NAMESPACE", "EXTERNAL", "FUN", "CONST", "IF", 
		"ELSE", "WHILE", "DO", "FOR", "IN", "SWITCH", "CASE", "DEFAULT", "TRY", 
		"CATCH", "FINALLY", "RETURN", "BREAK", "CONTINUE", "PRINT", "INT", "FLOAT", 
		"STRING", "BOOL", "VOID", "NULL", "TRUE", "FALSE", "PLUS", "MINUS", "MUL", 
		"DIV", "MOD", "PLUS_ASSIGN", "MINUS_ASSIGN", "MUL_ASSIGN", "DIV_ASSIGN", 
		"MOD_ASSIGN", "INC", "DEC", "ASSIGN", "EQ", "NEQ", "GT", "LT", "GTE", 
		"LTE", "NOT", "AND", "OR", "BITWISE_AND", "BITWISE_OR", "BITWISE_XOR", 
		"BITWISE_NOT", "SHL", "SHR", "QUESTION", "SLASH", "LPAREN", "RPAREN", 
		"LBRACE", "RBRACE", "LBRACKET", "RBRACKET", "SEMICOLON", "COMMA", "COLON", 
		"DOT", "ID", "STRING_LITERAL", "BACKTICK_STRING", "INTEGER", "FLOAT_LITERAL", 
		"LINE_COMMENT", "BLOCK_COMMENT", "WS"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "Cobra.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override int[] SerializedAtn { get { return _serializedATN; } }

	static CobraParser() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}

		public CobraParser(ITokenStream input) : this(input, Console.Out, Console.Error) { }

		public CobraParser(ITokenStream input, TextWriter output, TextWriter errorOutput)
		: base(input, output, errorOutput)
	{
		Interpreter = new ParserATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	public partial class ProgramContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Eof() { return GetToken(CobraParser.Eof, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public LinkStatementContext[] linkStatement() {
			return GetRuleContexts<LinkStatementContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public LinkStatementContext linkStatement(int i) {
			return GetRuleContext<LinkStatementContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ImportStatementContext[] importStatement() {
			return GetRuleContexts<ImportStatementContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ImportStatementContext importStatement(int i) {
			return GetRuleContext<ImportStatementContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public NamespaceDeclarationContext[] namespaceDeclaration() {
			return GetRuleContexts<NamespaceDeclarationContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public NamespaceDeclarationContext namespaceDeclaration(int i) {
			return GetRuleContext<NamespaceDeclarationContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public TopLevelDeclarationContext[] topLevelDeclaration() {
			return GetRuleContexts<TopLevelDeclarationContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public TopLevelDeclarationContext topLevelDeclaration(int i) {
			return GetRuleContext<TopLevelDeclarationContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext[] statement() {
			return GetRuleContexts<StatementContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext statement(int i) {
			return GetRuleContext<StatementContext>(i);
		}
		public ProgramContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_program; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ICobraListener typedListener = listener as ICobraListener;
			if (typedListener != null) typedListener.EnterProgram(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ICobraListener typedListener = listener as ICobraListener;
			if (typedListener != null) typedListener.ExitProgram(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICobraVisitor<TResult> typedVisitor = visitor as ICobraVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitProgram(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ProgramContext program() {
		ProgramContext _localctx = new ProgramContext(Context, State);
		EnterRule(_localctx, 0, RULE_program);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 91;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & -6844338928037056770L) != 0) || ((((_la - 65)) & ~0x3f) == 0 && ((1L << (_la - 65)) & 1985L) != 0)) {
				{
				State = 89;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,0,Context) ) {
				case 1:
					{
					State = 84;
					linkStatement();
					}
					break;
				case 2:
					{
					State = 85;
					importStatement();
					}
					break;
				case 3:
					{
					State = 86;
					namespaceDeclaration();
					}
					break;
				case 4:
					{
					State = 87;
					topLevelDeclaration();
					}
					break;
				case 5:
					{
					State = 88;
					statement();
					}
					break;
				}
				}
				State = 93;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 94;
			Match(Eof);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LinkStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LINK() { return GetToken(CobraParser.LINK, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRING_LITERAL() { return GetToken(CobraParser.STRING_LITERAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEMICOLON() { return GetToken(CobraParser.SEMICOLON, 0); }
		public LinkStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_linkStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ICobraListener typedListener = listener as ICobraListener;
			if (typedListener != null) typedListener.EnterLinkStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ICobraListener typedListener = listener as ICobraListener;
			if (typedListener != null) typedListener.ExitLinkStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICobraVisitor<TResult> typedVisitor = visitor as ICobraVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLinkStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LinkStatementContext linkStatement() {
		LinkStatementContext _localctx = new LinkStatementContext(Context, State);
		EnterRule(_localctx, 2, RULE_linkStatement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 96;
			Match(LINK);
			State = 97;
			Match(STRING_LITERAL);
			State = 98;
			Match(SEMICOLON);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ImportStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IMPORT() { return GetToken(CobraParser.IMPORT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRING_LITERAL() { return GetToken(CobraParser.STRING_LITERAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEMICOLON() { return GetToken(CobraParser.SEMICOLON, 0); }
		public ImportStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_importStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ICobraListener typedListener = listener as ICobraListener;
			if (typedListener != null) typedListener.EnterImportStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ICobraListener typedListener = listener as ICobraListener;
			if (typedListener != null) typedListener.ExitImportStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICobraVisitor<TResult> typedVisitor = visitor as ICobraVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitImportStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ImportStatementContext importStatement() {
		ImportStatementContext _localctx = new ImportStatementContext(Context, State);
		EnterRule(_localctx, 4, RULE_importStatement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 100;
			Match(IMPORT);
			State = 101;
			Match(STRING_LITERAL);
			State = 102;
			Match(SEMICOLON);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NamespaceDeclarationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NAMESPACE() { return GetToken(CobraParser.NAMESPACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public QualifiedNameContext qualifiedName() {
			return GetRuleContext<QualifiedNameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LBRACE() { return GetToken(CobraParser.LBRACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RBRACE() { return GetToken(CobraParser.RBRACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TopLevelDeclarationContext[] topLevelDeclaration() {
			return GetRuleContexts<TopLevelDeclarationContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public TopLevelDeclarationContext topLevelDeclaration(int i) {
			return GetRuleContext<TopLevelDeclarationContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext[] statement() {
			return GetRuleContexts<StatementContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext statement(int i) {
			return GetRuleContext<StatementContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExternDeclarationContext[] externDeclaration() {
			return GetRuleContexts<ExternDeclarationContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExternDeclarationContext externDeclaration(int i) {
			return GetRuleContext<ExternDeclarationContext>(i);
		}
		public NamespaceDeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_namespaceDeclaration; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ICobraListener typedListener = listener as ICobraListener;
			if (typedListener != null) typedListener.EnterNamespaceDeclaration(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ICobraListener typedListener = listener as ICobraListener;
			if (typedListener != null) typedListener.ExitNamespaceDeclaration(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICobraVisitor<TResult> typedVisitor = visitor as ICobraVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNamespaceDeclaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public NamespaceDeclarationContext namespaceDeclaration() {
		NamespaceDeclarationContext _localctx = new NamespaceDeclarationContext(Context, State);
		EnterRule(_localctx, 6, RULE_namespaceDeclaration);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 104;
			Match(NAMESPACE);
			State = 105;
			qualifiedName();
			State = 106;
			Match(LBRACE);
			State = 112;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & -6844338928037056784L) != 0) || ((((_la - 65)) & ~0x3f) == 0 && ((1L << (_la - 65)) & 1985L) != 0)) {
				{
				State = 110;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,2,Context) ) {
				case 1:
					{
					State = 107;
					topLevelDeclaration();
					}
					break;
				case 2:
					{
					State = 108;
					statement();
					}
					break;
				case 3:
					{
					State = 109;
					externDeclaration();
					}
					break;
				}
				}
				State = 114;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 115;
			Match(RBRACE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class QualifiedNameContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] ID() { return GetTokens(CobraParser.ID); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ID(int i) {
			return GetToken(CobraParser.ID, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] DOT() { return GetTokens(CobraParser.DOT); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DOT(int i) {
			return GetToken(CobraParser.DOT, i);
		}
		public QualifiedNameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_qualifiedName; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ICobraListener typedListener = listener as ICobraListener;
			if (typedListener != null) typedListener.EnterQualifiedName(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ICobraListener typedListener = listener as ICobraListener;
			if (typedListener != null) typedListener.ExitQualifiedName(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICobraVisitor<TResult> typedVisitor = visitor as ICobraVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitQualifiedName(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public QualifiedNameContext qualifiedName() {
		QualifiedNameContext _localctx = new QualifiedNameContext(Context, State);
		EnterRule(_localctx, 8, RULE_qualifiedName);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 117;
			Match(ID);
			State = 122;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==DOT) {
				{
				{
				State = 118;
				Match(DOT);
				State = 119;
				Match(ID);
				}
				}
				State = 124;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TopLevelDeclarationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ConstDeclarationContext constDeclaration() {
			return GetRuleContext<ConstDeclarationContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public VarDeclarationContext varDeclaration() {
			return GetRuleContext<VarDeclarationContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public FunctionDeclarationContext functionDeclaration() {
			return GetRuleContext<FunctionDeclarationContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExternDeclarationContext externDeclaration() {
			return GetRuleContext<ExternDeclarationContext>(0);
		}
		public TopLevelDeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_topLevelDeclaration; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ICobraListener typedListener = listener as ICobraListener;
			if (typedListener != null) typedListener.EnterTopLevelDeclaration(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ICobraListener typedListener = listener as ICobraListener;
			if (typedListener != null) typedListener.ExitTopLevelDeclaration(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICobraVisitor<TResult> typedVisitor = visitor as ICobraVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTopLevelDeclaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TopLevelDeclarationContext topLevelDeclaration() {
		TopLevelDeclarationContext _localctx = new TopLevelDeclarationContext(Context, State);
		EnterRule(_localctx, 10, RULE_topLevelDeclaration);
		try {
			State = 129;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,5,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 125;
				constDeclaration();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 126;
				varDeclaration();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 127;
				functionDeclaration();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 128;
				externDeclaration();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ConstDeclarationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CONST() { return GetToken(CobraParser.CONST, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TypeContext type() {
			return GetRuleContext<TypeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ID() { return GetToken(CobraParser.ID, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ASSIGN() { return GetToken(CobraParser.ASSIGN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public AssignmentExpressionContext assignmentExpression() {
			return GetRuleContext<AssignmentExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEMICOLON() { return GetToken(CobraParser.SEMICOLON, 0); }
		public ConstDeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_constDeclaration; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ICobraListener typedListener = listener as ICobraListener;
			if (typedListener != null) typedListener.EnterConstDeclaration(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ICobraListener typedListener = listener as ICobraListener;
			if (typedListener != null) typedListener.ExitConstDeclaration(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICobraVisitor<TResult> typedVisitor = visitor as ICobraVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitConstDeclaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ConstDeclarationContext constDeclaration() {
		ConstDeclarationContext _localctx = new ConstDeclarationContext(Context, State);
		EnterRule(_localctx, 12, RULE_constDeclaration);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 131;
			Match(CONST);
			State = 132;
			type();
			State = 133;
			Match(ID);
			State = 134;
			Match(ASSIGN);
			State = 135;
			assignmentExpression();
			State = 136;
			Match(SEMICOLON);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class VarDeclarationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public TypeContext type() {
			return GetRuleContext<TypeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ID() { return GetToken(CobraParser.ID, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEMICOLON() { return GetToken(CobraParser.SEMICOLON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ASSIGN() { return GetToken(CobraParser.ASSIGN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public AssignmentExpressionContext assignmentExpression() {
			return GetRuleContext<AssignmentExpressionContext>(0);
		}
		public VarDeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_varDeclaration; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ICobraListener typedListener = listener as ICobraListener;
			if (typedListener != null) typedListener.EnterVarDeclaration(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ICobraListener typedListener = listener as ICobraListener;
			if (typedListener != null) typedListener.ExitVarDeclaration(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICobraVisitor<TResult> typedVisitor = visitor as ICobraVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVarDeclaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public VarDeclarationContext varDeclaration() {
		VarDeclarationContext _localctx = new VarDeclarationContext(Context, State);
		EnterRule(_localctx, 14, RULE_varDeclaration);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 138;
			type();
			State = 139;
			Match(ID);
			State = 142;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==ASSIGN) {
				{
				State = 140;
				Match(ASSIGN);
				State = 141;
				assignmentExpression();
				}
			}

			State = 144;
			Match(SEMICOLON);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FunctionDeclarationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public TypeContext type() {
			return GetRuleContext<TypeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ID() { return GetToken(CobraParser.ID, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPAREN() { return GetToken(CobraParser.LPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPAREN() { return GetToken(CobraParser.RPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public BlockContext block() {
			return GetRuleContext<BlockContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ParameterListContext parameterList() {
			return GetRuleContext<ParameterListContext>(0);
		}
		public FunctionDeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_functionDeclaration; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ICobraListener typedListener = listener as ICobraListener;
			if (typedListener != null) typedListener.EnterFunctionDeclaration(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ICobraListener typedListener = listener as ICobraListener;
			if (typedListener != null) typedListener.ExitFunctionDeclaration(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICobraVisitor<TResult> typedVisitor = visitor as ICobraVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFunctionDeclaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FunctionDeclarationContext functionDeclaration() {
		FunctionDeclarationContext _localctx = new FunctionDeclarationContext(Context, State);
		EnterRule(_localctx, 16, RULE_functionDeclaration);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 146;
			type();
			State = 147;
			Match(ID);
			State = 148;
			Match(LPAREN);
			State = 150;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & 260046880L) != 0) || _la==ID) {
				{
				State = 149;
				parameterList();
				}
			}

			State = 152;
			Match(RPAREN);
			State = 153;
			block();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExternDeclarationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EXTERNAL() { return GetToken(CobraParser.EXTERNAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TypeContext type() {
			return GetRuleContext<TypeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ID() { return GetToken(CobraParser.ID, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPAREN() { return GetToken(CobraParser.LPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPAREN() { return GetToken(CobraParser.RPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEMICOLON() { return GetToken(CobraParser.SEMICOLON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ParameterListContext parameterList() {
			return GetRuleContext<ParameterListContext>(0);
		}
		public ExternDeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_externDeclaration; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ICobraListener typedListener = listener as ICobraListener;
			if (typedListener != null) typedListener.EnterExternDeclaration(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ICobraListener typedListener = listener as ICobraListener;
			if (typedListener != null) typedListener.ExitExternDeclaration(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICobraVisitor<TResult> typedVisitor = visitor as ICobraVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExternDeclaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ExternDeclarationContext externDeclaration() {
		ExternDeclarationContext _localctx = new ExternDeclarationContext(Context, State);
		EnterRule(_localctx, 18, RULE_externDeclaration);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 155;
			Match(EXTERNAL);
			State = 156;
			type();
			State = 157;
			Match(ID);
			State = 158;
			Match(LPAREN);
			State = 160;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & 260046880L) != 0) || _la==ID) {
				{
				State = 159;
				parameterList();
				}
			}

			State = 162;
			Match(RPAREN);
			State = 163;
			Match(SEMICOLON);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TypeContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public PrimitiveTypeContext primitiveType() {
			return GetRuleContext<PrimitiveTypeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] LBRACKET() { return GetTokens(CobraParser.LBRACKET); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LBRACKET(int i) {
			return GetToken(CobraParser.LBRACKET, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] RBRACKET() { return GetTokens(CobraParser.RBRACKET); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RBRACKET(int i) {
			return GetToken(CobraParser.RBRACKET, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FUN() { return GetToken(CobraParser.FUN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ID() { return GetToken(CobraParser.ID, 0); }
		public TypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_type; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ICobraListener typedListener = listener as ICobraListener;
			if (typedListener != null) typedListener.EnterType(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ICobraListener typedListener = listener as ICobraListener;
			if (typedListener != null) typedListener.ExitType(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICobraVisitor<TResult> typedVisitor = visitor as ICobraVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitType(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TypeContext type() {
		TypeContext _localctx = new TypeContext(Context, State);
		EnterRule(_localctx, 20, RULE_type);
		int _la;
		try {
			State = 175;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case INT:
			case FLOAT:
			case STRING:
			case BOOL:
			case VOID:
				EnterOuterAlt(_localctx, 1);
				{
				State = 165;
				primitiveType();
				State = 170;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==LBRACKET) {
					{
					{
					State = 166;
					Match(LBRACKET);
					State = 167;
					Match(RBRACKET);
					}
					}
					State = 172;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				}
				break;
			case FUN:
				EnterOuterAlt(_localctx, 2);
				{
				State = 173;
				Match(FUN);
				}
				break;
			case ID:
				EnterOuterAlt(_localctx, 3);
				{
				State = 174;
				Match(ID);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PrimitiveTypeContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INT() { return GetToken(CobraParser.INT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FLOAT() { return GetToken(CobraParser.FLOAT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BOOL() { return GetToken(CobraParser.BOOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRING() { return GetToken(CobraParser.STRING, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VOID() { return GetToken(CobraParser.VOID, 0); }
		public PrimitiveTypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_primitiveType; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ICobraListener typedListener = listener as ICobraListener;
			if (typedListener != null) typedListener.EnterPrimitiveType(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ICobraListener typedListener = listener as ICobraListener;
			if (typedListener != null) typedListener.ExitPrimitiveType(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICobraVisitor<TResult> typedVisitor = visitor as ICobraVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPrimitiveType(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PrimitiveTypeContext primitiveType() {
		PrimitiveTypeContext _localctx = new PrimitiveTypeContext(Context, State);
		EnterRule(_localctx, 22, RULE_primitiveType);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 177;
			_la = TokenStream.LA(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & 260046848L) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ParameterListContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ParameterContext[] parameter() {
			return GetRuleContexts<ParameterContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ParameterContext parameter(int i) {
			return GetRuleContext<ParameterContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(CobraParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(CobraParser.COMMA, i);
		}
		public ParameterListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_parameterList; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ICobraListener typedListener = listener as ICobraListener;
			if (typedListener != null) typedListener.EnterParameterList(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ICobraListener typedListener = listener as ICobraListener;
			if (typedListener != null) typedListener.ExitParameterList(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICobraVisitor<TResult> typedVisitor = visitor as ICobraVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitParameterList(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ParameterListContext parameterList() {
		ParameterListContext _localctx = new ParameterListContext(Context, State);
		EnterRule(_localctx, 24, RULE_parameterList);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 179;
			parameter();
			State = 184;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 180;
				Match(COMMA);
				State = 181;
				parameter();
				}
				}
				State = 186;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ParameterContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public TypeContext type() {
			return GetRuleContext<TypeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ID() { return GetToken(CobraParser.ID, 0); }
		public ParameterContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_parameter; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ICobraListener typedListener = listener as ICobraListener;
			if (typedListener != null) typedListener.EnterParameter(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ICobraListener typedListener = listener as ICobraListener;
			if (typedListener != null) typedListener.ExitParameter(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICobraVisitor<TResult> typedVisitor = visitor as ICobraVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitParameter(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ParameterContext parameter() {
		ParameterContext _localctx = new ParameterContext(Context, State);
		EnterRule(_localctx, 26, RULE_parameter);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 187;
			type();
			State = 188;
			Match(ID);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public BlockContext block() {
			return GetRuleContext<BlockContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public DeclarationStatementContext declarationStatement() {
			return GetRuleContext<DeclarationStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public IfStatementContext ifStatement() {
			return GetRuleContext<IfStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public WhileStatementContext whileStatement() {
			return GetRuleContext<WhileStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public DoWhileStatementContext doWhileStatement() {
			return GetRuleContext<DoWhileStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ForStatementContext forStatement() {
			return GetRuleContext<ForStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ForEachStatementContext forEachStatement() {
			return GetRuleContext<ForEachStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public SwitchStatementContext switchStatement() {
			return GetRuleContext<SwitchStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public TryStatementContext tryStatement() {
			return GetRuleContext<TryStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public JumpStatementContext jumpStatement() {
			return GetRuleContext<JumpStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionStatementContext expressionStatement() {
			return GetRuleContext<ExpressionStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public PrintStatementContext printStatement() {
			return GetRuleContext<PrintStatementContext>(0);
		}
		public StatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_statement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ICobraListener typedListener = listener as ICobraListener;
			if (typedListener != null) typedListener.EnterStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ICobraListener typedListener = listener as ICobraListener;
			if (typedListener != null) typedListener.ExitStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICobraVisitor<TResult> typedVisitor = visitor as ICobraVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StatementContext statement() {
		StatementContext _localctx = new StatementContext(Context, State);
		EnterRule(_localctx, 28, RULE_statement);
		try {
			State = 202;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,12,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 190;
				block();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 191;
				declarationStatement();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 192;
				ifStatement();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 193;
				whileStatement();
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 194;
				doWhileStatement();
				}
				break;
			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 195;
				forStatement();
				}
				break;
			case 7:
				EnterOuterAlt(_localctx, 7);
				{
				State = 196;
				forEachStatement();
				}
				break;
			case 8:
				EnterOuterAlt(_localctx, 8);
				{
				State = 197;
				switchStatement();
				}
				break;
			case 9:
				EnterOuterAlt(_localctx, 9);
				{
				State = 198;
				tryStatement();
				}
				break;
			case 10:
				EnterOuterAlt(_localctx, 10);
				{
				State = 199;
				jumpStatement();
				}
				break;
			case 11:
				EnterOuterAlt(_localctx, 11);
				{
				State = 200;
				expressionStatement();
				}
				break;
			case 12:
				EnterOuterAlt(_localctx, 12);
				{
				State = 201;
				printStatement();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DeclarationStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ConstDeclarationContext constDeclaration() {
			return GetRuleContext<ConstDeclarationContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public VarDeclarationContext varDeclaration() {
			return GetRuleContext<VarDeclarationContext>(0);
		}
		public DeclarationStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_declarationStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ICobraListener typedListener = listener as ICobraListener;
			if (typedListener != null) typedListener.EnterDeclarationStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ICobraListener typedListener = listener as ICobraListener;
			if (typedListener != null) typedListener.ExitDeclarationStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICobraVisitor<TResult> typedVisitor = visitor as ICobraVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDeclarationStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DeclarationStatementContext declarationStatement() {
		DeclarationStatementContext _localctx = new DeclarationStatementContext(Context, State);
		EnterRule(_localctx, 30, RULE_declarationStatement);
		try {
			State = 206;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case CONST:
				EnterOuterAlt(_localctx, 1);
				{
				State = 204;
				constDeclaration();
				}
				break;
			case FUN:
			case INT:
			case FLOAT:
			case STRING:
			case BOOL:
			case VOID:
			case ID:
				EnterOuterAlt(_localctx, 2);
				{
				State = 205;
				varDeclaration();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BlockContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LBRACE() { return GetToken(CobraParser.LBRACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RBRACE() { return GetToken(CobraParser.RBRACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public DeclarationStatementContext[] declarationStatement() {
			return GetRuleContexts<DeclarationStatementContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public DeclarationStatementContext declarationStatement(int i) {
			return GetRuleContext<DeclarationStatementContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext[] statement() {
			return GetRuleContexts<StatementContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext statement(int i) {
			return GetRuleContext<StatementContext>(i);
		}
		public BlockContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_block; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ICobraListener typedListener = listener as ICobraListener;
			if (typedListener != null) typedListener.EnterBlock(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ICobraListener typedListener = listener as ICobraListener;
			if (typedListener != null) typedListener.ExitBlock(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICobraVisitor<TResult> typedVisitor = visitor as ICobraVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBlock(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public BlockContext block() {
		BlockContext _localctx = new BlockContext(Context, State);
		EnterRule(_localctx, 32, RULE_block);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 208;
			Match(LBRACE);
			State = 213;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & -6844338928037056800L) != 0) || ((((_la - 65)) & ~0x3f) == 0 && ((1L << (_la - 65)) & 1985L) != 0)) {
				{
				State = 211;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,14,Context) ) {
				case 1:
					{
					State = 209;
					declarationStatement();
					}
					break;
				case 2:
					{
					State = 210;
					statement();
					}
					break;
				}
				}
				State = 215;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 216;
			Match(RBRACE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IfStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IF() { return GetToken(CobraParser.IF, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPAREN() { return GetToken(CobraParser.LPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public AssignmentExpressionContext assignmentExpression() {
			return GetRuleContext<AssignmentExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPAREN() { return GetToken(CobraParser.RPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext[] statement() {
			return GetRuleContexts<StatementContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext statement(int i) {
			return GetRuleContext<StatementContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ELSE() { return GetToken(CobraParser.ELSE, 0); }
		public IfStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_ifStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ICobraListener typedListener = listener as ICobraListener;
			if (typedListener != null) typedListener.EnterIfStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ICobraListener typedListener = listener as ICobraListener;
			if (typedListener != null) typedListener.ExitIfStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICobraVisitor<TResult> typedVisitor = visitor as ICobraVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIfStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public IfStatementContext ifStatement() {
		IfStatementContext _localctx = new IfStatementContext(Context, State);
		EnterRule(_localctx, 34, RULE_ifStatement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 218;
			Match(IF);
			State = 219;
			Match(LPAREN);
			State = 220;
			assignmentExpression();
			State = 221;
			Match(RPAREN);
			State = 222;
			statement();
			State = 225;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,16,Context) ) {
			case 1:
				{
				State = 223;
				Match(ELSE);
				State = 224;
				statement();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class WhileStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WHILE() { return GetToken(CobraParser.WHILE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPAREN() { return GetToken(CobraParser.LPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public AssignmentExpressionContext assignmentExpression() {
			return GetRuleContext<AssignmentExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPAREN() { return GetToken(CobraParser.RPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext statement() {
			return GetRuleContext<StatementContext>(0);
		}
		public WhileStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_whileStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ICobraListener typedListener = listener as ICobraListener;
			if (typedListener != null) typedListener.EnterWhileStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ICobraListener typedListener = listener as ICobraListener;
			if (typedListener != null) typedListener.ExitWhileStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICobraVisitor<TResult> typedVisitor = visitor as ICobraVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitWhileStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public WhileStatementContext whileStatement() {
		WhileStatementContext _localctx = new WhileStatementContext(Context, State);
		EnterRule(_localctx, 36, RULE_whileStatement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 227;
			Match(WHILE);
			State = 228;
			Match(LPAREN);
			State = 229;
			assignmentExpression();
			State = 230;
			Match(RPAREN);
			State = 231;
			statement();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DoWhileStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DO() { return GetToken(CobraParser.DO, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext statement() {
			return GetRuleContext<StatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WHILE() { return GetToken(CobraParser.WHILE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPAREN() { return GetToken(CobraParser.LPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public AssignmentExpressionContext assignmentExpression() {
			return GetRuleContext<AssignmentExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPAREN() { return GetToken(CobraParser.RPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEMICOLON() { return GetToken(CobraParser.SEMICOLON, 0); }
		public DoWhileStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_doWhileStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ICobraListener typedListener = listener as ICobraListener;
			if (typedListener != null) typedListener.EnterDoWhileStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ICobraListener typedListener = listener as ICobraListener;
			if (typedListener != null) typedListener.ExitDoWhileStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICobraVisitor<TResult> typedVisitor = visitor as ICobraVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDoWhileStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DoWhileStatementContext doWhileStatement() {
		DoWhileStatementContext _localctx = new DoWhileStatementContext(Context, State);
		EnterRule(_localctx, 38, RULE_doWhileStatement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 233;
			Match(DO);
			State = 234;
			statement();
			State = 235;
			Match(WHILE);
			State = 236;
			Match(LPAREN);
			State = 237;
			assignmentExpression();
			State = 238;
			Match(RPAREN);
			State = 239;
			Match(SEMICOLON);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ForStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FOR() { return GetToken(CobraParser.FOR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPAREN() { return GetToken(CobraParser.LPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] SEMICOLON() { return GetTokens(CobraParser.SEMICOLON); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEMICOLON(int i) {
			return GetToken(CobraParser.SEMICOLON, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPAREN() { return GetToken(CobraParser.RPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext statement() {
			return GetRuleContext<StatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public VarDeclarationContext varDeclaration() {
			return GetRuleContext<VarDeclarationContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionStatementContext expressionStatement() {
			return GetRuleContext<ExpressionStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public AssignmentExpressionContext[] assignmentExpression() {
			return GetRuleContexts<AssignmentExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public AssignmentExpressionContext assignmentExpression(int i) {
			return GetRuleContext<AssignmentExpressionContext>(i);
		}
		public ForStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_forStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ICobraListener typedListener = listener as ICobraListener;
			if (typedListener != null) typedListener.EnterForStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ICobraListener typedListener = listener as ICobraListener;
			if (typedListener != null) typedListener.ExitForStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICobraVisitor<TResult> typedVisitor = visitor as ICobraVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitForStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ForStatementContext forStatement() {
		ForStatementContext _localctx = new ForStatementContext(Context, State);
		EnterRule(_localctx, 40, RULE_forStatement);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 241;
			Match(FOR);
			State = 242;
			Match(LPAREN);
			State = 246;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,17,Context) ) {
			case 1:
				{
				State = 243;
				varDeclaration();
				}
				break;
			case 2:
				{
				State = 244;
				expressionStatement();
				}
				break;
			case 3:
				{
				State = 245;
				Match(SEMICOLON);
				}
				break;
			}
			State = 249;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & -6844338928044998624L) != 0) || ((((_la - 65)) & ~0x3f) == 0 && ((1L << (_la - 65)) & 1985L) != 0)) {
				{
				State = 248;
				assignmentExpression();
				}
			}

			State = 251;
			Match(SEMICOLON);
			State = 253;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & -6844338928044998624L) != 0) || ((((_la - 65)) & ~0x3f) == 0 && ((1L << (_la - 65)) & 1985L) != 0)) {
				{
				State = 252;
				assignmentExpression();
				}
			}

			State = 255;
			Match(RPAREN);
			State = 256;
			statement();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ForEachStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FOR() { return GetToken(CobraParser.FOR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPAREN() { return GetToken(CobraParser.LPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TypeContext type() {
			return GetRuleContext<TypeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ID() { return GetToken(CobraParser.ID, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IN() { return GetToken(CobraParser.IN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public AssignmentExpressionContext assignmentExpression() {
			return GetRuleContext<AssignmentExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPAREN() { return GetToken(CobraParser.RPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext statement() {
			return GetRuleContext<StatementContext>(0);
		}
		public ForEachStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_forEachStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ICobraListener typedListener = listener as ICobraListener;
			if (typedListener != null) typedListener.EnterForEachStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ICobraListener typedListener = listener as ICobraListener;
			if (typedListener != null) typedListener.ExitForEachStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICobraVisitor<TResult> typedVisitor = visitor as ICobraVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitForEachStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ForEachStatementContext forEachStatement() {
		ForEachStatementContext _localctx = new ForEachStatementContext(Context, State);
		EnterRule(_localctx, 42, RULE_forEachStatement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 258;
			Match(FOR);
			State = 259;
			Match(LPAREN);
			State = 260;
			type();
			State = 261;
			Match(ID);
			State = 262;
			Match(IN);
			State = 263;
			assignmentExpression();
			State = 264;
			Match(RPAREN);
			State = 265;
			statement();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SwitchStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SWITCH() { return GetToken(CobraParser.SWITCH, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPAREN() { return GetToken(CobraParser.LPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public AssignmentExpressionContext assignmentExpression() {
			return GetRuleContext<AssignmentExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPAREN() { return GetToken(CobraParser.RPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LBRACE() { return GetToken(CobraParser.LBRACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RBRACE() { return GetToken(CobraParser.RBRACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public SwitchBlockContext[] switchBlock() {
			return GetRuleContexts<SwitchBlockContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public SwitchBlockContext switchBlock(int i) {
			return GetRuleContext<SwitchBlockContext>(i);
		}
		public SwitchStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_switchStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ICobraListener typedListener = listener as ICobraListener;
			if (typedListener != null) typedListener.EnterSwitchStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ICobraListener typedListener = listener as ICobraListener;
			if (typedListener != null) typedListener.ExitSwitchStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICobraVisitor<TResult> typedVisitor = visitor as ICobraVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSwitchStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SwitchStatementContext switchStatement() {
		SwitchStatementContext _localctx = new SwitchStatementContext(Context, State);
		EnterRule(_localctx, 44, RULE_switchStatement);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 267;
			Match(SWITCH);
			State = 268;
			Match(LPAREN);
			State = 269;
			assignmentExpression();
			State = 270;
			Match(RPAREN);
			State = 271;
			Match(LBRACE);
			State = 275;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==CASE || _la==DEFAULT) {
				{
				{
				State = 272;
				switchBlock();
				}
				}
				State = 277;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 278;
			Match(RBRACE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SwitchBlockContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public SwitchLabelContext[] switchLabel() {
			return GetRuleContexts<SwitchLabelContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public SwitchLabelContext switchLabel(int i) {
			return GetRuleContext<SwitchLabelContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext[] statement() {
			return GetRuleContexts<StatementContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext statement(int i) {
			return GetRuleContext<StatementContext>(i);
		}
		public SwitchBlockContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_switchBlock; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ICobraListener typedListener = listener as ICobraListener;
			if (typedListener != null) typedListener.EnterSwitchBlock(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ICobraListener typedListener = listener as ICobraListener;
			if (typedListener != null) typedListener.ExitSwitchBlock(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICobraVisitor<TResult> typedVisitor = visitor as ICobraVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSwitchBlock(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SwitchBlockContext switchBlock() {
		SwitchBlockContext _localctx = new SwitchBlockContext(Context, State);
		EnterRule(_localctx, 46, RULE_switchBlock);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 281;
			ErrorHandler.Sync(this);
			_alt = 1;
			do {
				switch (_alt) {
				case 1:
					{
					{
					State = 280;
					switchLabel();
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 283;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,21,Context);
			} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER );
			State = 288;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & -6844338928037056800L) != 0) || ((((_la - 65)) & ~0x3f) == 0 && ((1L << (_la - 65)) & 1985L) != 0)) {
				{
				{
				State = 285;
				statement();
				}
				}
				State = 290;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SwitchLabelContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CASE() { return GetToken(CobraParser.CASE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public AssignmentExpressionContext assignmentExpression() {
			return GetRuleContext<AssignmentExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COLON() { return GetToken(CobraParser.COLON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DEFAULT() { return GetToken(CobraParser.DEFAULT, 0); }
		public SwitchLabelContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_switchLabel; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ICobraListener typedListener = listener as ICobraListener;
			if (typedListener != null) typedListener.EnterSwitchLabel(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ICobraListener typedListener = listener as ICobraListener;
			if (typedListener != null) typedListener.ExitSwitchLabel(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICobraVisitor<TResult> typedVisitor = visitor as ICobraVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSwitchLabel(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SwitchLabelContext switchLabel() {
		SwitchLabelContext _localctx = new SwitchLabelContext(Context, State);
		EnterRule(_localctx, 48, RULE_switchLabel);
		try {
			State = 297;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case CASE:
				EnterOuterAlt(_localctx, 1);
				{
				State = 291;
				Match(CASE);
				State = 292;
				assignmentExpression();
				State = 293;
				Match(COLON);
				}
				break;
			case DEFAULT:
				EnterOuterAlt(_localctx, 2);
				{
				State = 295;
				Match(DEFAULT);
				State = 296;
				Match(COLON);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TryStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TRY() { return GetToken(CobraParser.TRY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public BlockContext[] block() {
			return GetRuleContexts<BlockContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public BlockContext block(int i) {
			return GetRuleContext<BlockContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CATCH() { return GetToken(CobraParser.CATCH, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPAREN() { return GetToken(CobraParser.LPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ParameterContext parameter() {
			return GetRuleContext<ParameterContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPAREN() { return GetToken(CobraParser.RPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FINALLY() { return GetToken(CobraParser.FINALLY, 0); }
		public TryStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_tryStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ICobraListener typedListener = listener as ICobraListener;
			if (typedListener != null) typedListener.EnterTryStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ICobraListener typedListener = listener as ICobraListener;
			if (typedListener != null) typedListener.ExitTryStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICobraVisitor<TResult> typedVisitor = visitor as ICobraVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTryStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TryStatementContext tryStatement() {
		TryStatementContext _localctx = new TryStatementContext(Context, State);
		EnterRule(_localctx, 50, RULE_tryStatement);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 299;
			Match(TRY);
			State = 300;
			block();
			State = 307;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==CATCH) {
				{
				State = 301;
				Match(CATCH);
				State = 302;
				Match(LPAREN);
				State = 303;
				parameter();
				State = 304;
				Match(RPAREN);
				State = 305;
				block();
				}
			}

			State = 311;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==FINALLY) {
				{
				State = 309;
				Match(FINALLY);
				State = 310;
				block();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class JumpStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RETURN() { return GetToken(CobraParser.RETURN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEMICOLON() { return GetToken(CobraParser.SEMICOLON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public AssignmentExpressionContext assignmentExpression() {
			return GetRuleContext<AssignmentExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BREAK() { return GetToken(CobraParser.BREAK, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CONTINUE() { return GetToken(CobraParser.CONTINUE, 0); }
		public JumpStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_jumpStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ICobraListener typedListener = listener as ICobraListener;
			if (typedListener != null) typedListener.EnterJumpStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ICobraListener typedListener = listener as ICobraListener;
			if (typedListener != null) typedListener.ExitJumpStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICobraVisitor<TResult> typedVisitor = visitor as ICobraVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitJumpStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public JumpStatementContext jumpStatement() {
		JumpStatementContext _localctx = new JumpStatementContext(Context, State);
		EnterRule(_localctx, 52, RULE_jumpStatement);
		int _la;
		try {
			State = 322;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case RETURN:
				EnterOuterAlt(_localctx, 1);
				{
				State = 313;
				Match(RETURN);
				State = 315;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if ((((_la) & ~0x3f) == 0 && ((1L << _la) & -6844338928044998624L) != 0) || ((((_la - 65)) & ~0x3f) == 0 && ((1L << (_la - 65)) & 1985L) != 0)) {
					{
					State = 314;
					assignmentExpression();
					}
				}

				State = 317;
				Match(SEMICOLON);
				}
				break;
			case BREAK:
				EnterOuterAlt(_localctx, 2);
				{
				State = 318;
				Match(BREAK);
				State = 319;
				Match(SEMICOLON);
				}
				break;
			case CONTINUE:
				EnterOuterAlt(_localctx, 3);
				{
				State = 320;
				Match(CONTINUE);
				State = 321;
				Match(SEMICOLON);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExpressionStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public AssignmentExpressionContext assignmentExpression() {
			return GetRuleContext<AssignmentExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEMICOLON() { return GetToken(CobraParser.SEMICOLON, 0); }
		public ExpressionStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expressionStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ICobraListener typedListener = listener as ICobraListener;
			if (typedListener != null) typedListener.EnterExpressionStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ICobraListener typedListener = listener as ICobraListener;
			if (typedListener != null) typedListener.ExitExpressionStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICobraVisitor<TResult> typedVisitor = visitor as ICobraVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExpressionStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ExpressionStatementContext expressionStatement() {
		ExpressionStatementContext _localctx = new ExpressionStatementContext(Context, State);
		EnterRule(_localctx, 54, RULE_expressionStatement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 324;
			assignmentExpression();
			State = 325;
			Match(SEMICOLON);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PrintStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PRINT() { return GetToken(CobraParser.PRINT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPAREN() { return GetToken(CobraParser.LPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public AssignmentExpressionContext assignmentExpression() {
			return GetRuleContext<AssignmentExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPAREN() { return GetToken(CobraParser.RPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEMICOLON() { return GetToken(CobraParser.SEMICOLON, 0); }
		public PrintStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_printStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ICobraListener typedListener = listener as ICobraListener;
			if (typedListener != null) typedListener.EnterPrintStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ICobraListener typedListener = listener as ICobraListener;
			if (typedListener != null) typedListener.ExitPrintStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICobraVisitor<TResult> typedVisitor = visitor as ICobraVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPrintStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PrintStatementContext printStatement() {
		PrintStatementContext _localctx = new PrintStatementContext(Context, State);
		EnterRule(_localctx, 56, RULE_printStatement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 327;
			Match(PRINT);
			State = 328;
			Match(LPAREN);
			State = 329;
			assignmentExpression();
			State = 330;
			Match(RPAREN);
			State = 331;
			Match(SEMICOLON);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AssignmentExpressionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public LeftHandSideContext leftHandSide() {
			return GetRuleContext<LeftHandSideContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public AssignmentOperatorContext assignmentOperator() {
			return GetRuleContext<AssignmentOperatorContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public AssignmentExpressionContext[] assignmentExpression() {
			return GetRuleContexts<AssignmentExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public AssignmentExpressionContext assignmentExpression(int i) {
			return GetRuleContext<AssignmentExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public BinaryExpressionContext binaryExpression() {
			return GetRuleContext<BinaryExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode QUESTION() { return GetToken(CobraParser.QUESTION, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COLON() { return GetToken(CobraParser.COLON, 0); }
		public AssignmentExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_assignmentExpression; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ICobraListener typedListener = listener as ICobraListener;
			if (typedListener != null) typedListener.EnterAssignmentExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ICobraListener typedListener = listener as ICobraListener;
			if (typedListener != null) typedListener.ExitAssignmentExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICobraVisitor<TResult> typedVisitor = visitor as ICobraVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAssignmentExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AssignmentExpressionContext assignmentExpression() {
		AssignmentExpressionContext _localctx = new AssignmentExpressionContext(Context, State);
		EnterRule(_localctx, 58, RULE_assignmentExpression);
		int _la;
		try {
			State = 345;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,29,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 333;
				leftHandSide();
				State = 334;
				assignmentOperator();
				State = 335;
				assignmentExpression();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 337;
				binaryExpression();
				State = 343;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==QUESTION) {
					{
					State = 338;
					Match(QUESTION);
					State = 339;
					assignmentExpression();
					State = 340;
					Match(COLON);
					State = 341;
					assignmentExpression();
					}
				}

				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BinaryExpressionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] OR() { return GetTokens(CobraParser.OR); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OR(int i) {
			return GetToken(CobraParser.OR, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public PostfixExpressionContext[] postfixExpression() {
			return GetRuleContexts<PostfixExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public PostfixExpressionContext postfixExpression(int i) {
			return GetRuleContext<PostfixExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] AND() { return GetTokens(CobraParser.AND); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AND(int i) {
			return GetToken(CobraParser.AND, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public UnaryOpContext[] unaryOp() {
			return GetRuleContexts<UnaryOpContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public UnaryOpContext unaryOp(int i) {
			return GetRuleContext<UnaryOpContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] BITWISE_OR() { return GetTokens(CobraParser.BITWISE_OR); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BITWISE_OR(int i) {
			return GetToken(CobraParser.BITWISE_OR, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] BITWISE_XOR() { return GetTokens(CobraParser.BITWISE_XOR); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BITWISE_XOR(int i) {
			return GetToken(CobraParser.BITWISE_XOR, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] BITWISE_AND() { return GetTokens(CobraParser.BITWISE_AND); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BITWISE_AND(int i) {
			return GetToken(CobraParser.BITWISE_AND, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] EQ() { return GetTokens(CobraParser.EQ); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EQ(int i) {
			return GetToken(CobraParser.EQ, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] NEQ() { return GetTokens(CobraParser.NEQ); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NEQ(int i) {
			return GetToken(CobraParser.NEQ, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] GT() { return GetTokens(CobraParser.GT); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GT(int i) {
			return GetToken(CobraParser.GT, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] LT() { return GetTokens(CobraParser.LT); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LT(int i) {
			return GetToken(CobraParser.LT, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] GTE() { return GetTokens(CobraParser.GTE); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GTE(int i) {
			return GetToken(CobraParser.GTE, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] LTE() { return GetTokens(CobraParser.LTE); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LTE(int i) {
			return GetToken(CobraParser.LTE, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] SHL() { return GetTokens(CobraParser.SHL); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SHL(int i) {
			return GetToken(CobraParser.SHL, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] SHR() { return GetTokens(CobraParser.SHR); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SHR(int i) {
			return GetToken(CobraParser.SHR, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] PLUS() { return GetTokens(CobraParser.PLUS); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PLUS(int i) {
			return GetToken(CobraParser.PLUS, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] MINUS() { return GetTokens(CobraParser.MINUS); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MINUS(int i) {
			return GetToken(CobraParser.MINUS, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] MUL() { return GetTokens(CobraParser.MUL); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MUL(int i) {
			return GetToken(CobraParser.MUL, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] DIV() { return GetTokens(CobraParser.DIV); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DIV(int i) {
			return GetToken(CobraParser.DIV, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] MOD() { return GetTokens(CobraParser.MOD); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MOD(int i) {
			return GetToken(CobraParser.MOD, i);
		}
		public BinaryExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_binaryExpression; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ICobraListener typedListener = listener as ICobraListener;
			if (typedListener != null) typedListener.EnterBinaryExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ICobraListener typedListener = listener as ICobraListener;
			if (typedListener != null) typedListener.ExitBinaryExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICobraVisitor<TResult> typedVisitor = visitor as ICobraVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBinaryExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public BinaryExpressionContext binaryExpression() {
		BinaryExpressionContext _localctx = new BinaryExpressionContext(Context, State);
		EnterRule(_localctx, 60, RULE_binaryExpression);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			{
			{
			{
			{
			{
			{
			{
			{
			{
			{
			State = 350;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & 73190097456988160L) != 0)) {
				{
				{
				State = 347;
				unaryOp();
				}
				}
				State = 352;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 353;
			postfixExpression();
			State = 364;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & 60129542144L) != 0)) {
				{
				{
				State = 354;
				_la = TokenStream.LA(1);
				if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & 60129542144L) != 0)) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 358;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while ((((_la) & ~0x3f) == 0 && ((1L << _la) & 73190097456988160L) != 0)) {
					{
					{
					State = 355;
					unaryOp();
					}
					}
					State = 360;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 361;
				postfixExpression();
				}
				}
				State = 366;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
			State = 377;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==PLUS || _la==MINUS) {
				{
				{
				State = 367;
				_la = TokenStream.LA(1);
				if ( !(_la==PLUS || _la==MINUS) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 371;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while ((((_la) & ~0x3f) == 0 && ((1L << _la) & 73190097456988160L) != 0)) {
					{
					{
					State = 368;
					unaryOp();
					}
					}
					State = 373;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 374;
				postfixExpression();
				}
				}
				State = 379;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
			State = 390;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==SHL || _la==SHR) {
				{
				{
				State = 380;
				_la = TokenStream.LA(1);
				if ( !(_la==SHL || _la==SHR) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 384;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while ((((_la) & ~0x3f) == 0 && ((1L << _la) & 73190097456988160L) != 0)) {
					{
					{
					State = 381;
					unaryOp();
					}
					}
					State = 386;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 387;
				postfixExpression();
				}
				}
				State = 392;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
			State = 403;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & 1055531162664960L) != 0)) {
				{
				{
				State = 393;
				_la = TokenStream.LA(1);
				if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & 1055531162664960L) != 0)) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 397;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while ((((_la) & ~0x3f) == 0 && ((1L << _la) & 73190097456988160L) != 0)) {
					{
					{
					State = 394;
					unaryOp();
					}
					}
					State = 399;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 400;
				postfixExpression();
				}
				}
				State = 405;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
			State = 416;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==EQ || _la==NEQ) {
				{
				{
				State = 406;
				_la = TokenStream.LA(1);
				if ( !(_la==EQ || _la==NEQ) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 410;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while ((((_la) & ~0x3f) == 0 && ((1L << _la) & 73190097456988160L) != 0)) {
					{
					{
					State = 407;
					unaryOp();
					}
					}
					State = 412;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 413;
				postfixExpression();
				}
				}
				State = 418;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
			State = 429;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==BITWISE_AND) {
				{
				{
				State = 419;
				Match(BITWISE_AND);
				State = 423;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while ((((_la) & ~0x3f) == 0 && ((1L << _la) & 73190097456988160L) != 0)) {
					{
					{
					State = 420;
					unaryOp();
					}
					}
					State = 425;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 426;
				postfixExpression();
				}
				}
				State = 431;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
			State = 442;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==BITWISE_XOR) {
				{
				{
				State = 432;
				Match(BITWISE_XOR);
				State = 436;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while ((((_la) & ~0x3f) == 0 && ((1L << _la) & 73190097456988160L) != 0)) {
					{
					{
					State = 433;
					unaryOp();
					}
					}
					State = 438;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 439;
				postfixExpression();
				}
				}
				State = 444;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
			State = 455;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==BITWISE_OR) {
				{
				{
				State = 445;
				Match(BITWISE_OR);
				State = 449;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while ((((_la) & ~0x3f) == 0 && ((1L << _la) & 73190097456988160L) != 0)) {
					{
					{
					State = 446;
					unaryOp();
					}
					}
					State = 451;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 452;
				postfixExpression();
				}
				}
				State = 457;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
			State = 468;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==AND) {
				{
				{
				State = 458;
				Match(AND);
				State = 462;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while ((((_la) & ~0x3f) == 0 && ((1L << _la) & 73190097456988160L) != 0)) {
					{
					{
					State = 459;
					unaryOp();
					}
					}
					State = 464;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 465;
				postfixExpression();
				}
				}
				State = 470;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
			State = 481;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==OR) {
				{
				{
				State = 471;
				Match(OR);
				State = 475;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while ((((_la) & ~0x3f) == 0 && ((1L << _la) & 73190097456988160L) != 0)) {
					{
					{
					State = 472;
					unaryOp();
					}
					}
					State = 477;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 478;
				postfixExpression();
				}
				}
				State = 483;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class UnaryOpContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PLUS() { return GetToken(CobraParser.PLUS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MINUS() { return GetToken(CobraParser.MINUS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NOT() { return GetToken(CobraParser.NOT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BITWISE_NOT() { return GetToken(CobraParser.BITWISE_NOT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INC() { return GetToken(CobraParser.INC, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DEC() { return GetToken(CobraParser.DEC, 0); }
		public UnaryOpContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_unaryOp; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ICobraListener typedListener = listener as ICobraListener;
			if (typedListener != null) typedListener.EnterUnaryOp(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ICobraListener typedListener = listener as ICobraListener;
			if (typedListener != null) typedListener.ExitUnaryOp(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICobraVisitor<TResult> typedVisitor = visitor as ICobraVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitUnaryOp(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public UnaryOpContext unaryOp() {
		UnaryOpContext _localctx = new UnaryOpContext(Context, State);
		EnterRule(_localctx, 62, RULE_unaryOp);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 484;
			_la = TokenStream.LA(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & 73190097456988160L) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PostfixExpressionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public PrimaryContext primary() {
			return GetRuleContext<PrimaryContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] LPAREN() { return GetTokens(CobraParser.LPAREN); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPAREN(int i) {
			return GetToken(CobraParser.LPAREN, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] RPAREN() { return GetTokens(CobraParser.RPAREN); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPAREN(int i) {
			return GetToken(CobraParser.RPAREN, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] LBRACKET() { return GetTokens(CobraParser.LBRACKET); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LBRACKET(int i) {
			return GetToken(CobraParser.LBRACKET, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public AssignmentExpressionContext[] assignmentExpression() {
			return GetRuleContexts<AssignmentExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public AssignmentExpressionContext assignmentExpression(int i) {
			return GetRuleContext<AssignmentExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] RBRACKET() { return GetTokens(CobraParser.RBRACKET); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RBRACKET(int i) {
			return GetToken(CobraParser.RBRACKET, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] DOT() { return GetTokens(CobraParser.DOT); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DOT(int i) {
			return GetToken(CobraParser.DOT, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] ID() { return GetTokens(CobraParser.ID); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ID(int i) {
			return GetToken(CobraParser.ID, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] INC() { return GetTokens(CobraParser.INC); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INC(int i) {
			return GetToken(CobraParser.INC, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] DEC() { return GetTokens(CobraParser.DEC); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DEC(int i) {
			return GetToken(CobraParser.DEC, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ArgumentListContext[] argumentList() {
			return GetRuleContexts<ArgumentListContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ArgumentListContext argumentList(int i) {
			return GetRuleContext<ArgumentListContext>(i);
		}
		public PostfixExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_postfixExpression; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ICobraListener typedListener = listener as ICobraListener;
			if (typedListener != null) typedListener.EnterPostfixExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ICobraListener typedListener = listener as ICobraListener;
			if (typedListener != null) typedListener.ExitPostfixExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICobraVisitor<TResult> typedVisitor = visitor as ICobraVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPostfixExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PostfixExpressionContext postfixExpression() {
		PostfixExpressionContext _localctx = new PostfixExpressionContext(Context, State);
		EnterRule(_localctx, 64, RULE_postfixExpression);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 486;
			primary();
			State = 502;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (((((_la - 41)) & ~0x3f) == 0 && ((1L << (_la - 41)) & 554696707L) != 0)) {
				{
				State = 500;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case LPAREN:
					{
					State = 487;
					Match(LPAREN);
					State = 489;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					if ((((_la) & ~0x3f) == 0 && ((1L << _la) & -6844338928044998624L) != 0) || ((((_la - 65)) & ~0x3f) == 0 && ((1L << (_la - 65)) & 1985L) != 0)) {
						{
						State = 488;
						argumentList();
						}
					}

					State = 491;
					Match(RPAREN);
					}
					break;
				case LBRACKET:
					{
					State = 492;
					Match(LBRACKET);
					State = 493;
					assignmentExpression();
					State = 494;
					Match(RBRACKET);
					}
					break;
				case DOT:
					{
					State = 496;
					Match(DOT);
					State = 497;
					Match(ID);
					}
					break;
				case INC:
					{
					State = 498;
					Match(INC);
					}
					break;
				case DEC:
					{
					State = 499;
					Match(DEC);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				State = 504;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LeftHandSideContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public PrimaryContext primary() {
			return GetRuleContext<PrimaryContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] LBRACKET() { return GetTokens(CobraParser.LBRACKET); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LBRACKET(int i) {
			return GetToken(CobraParser.LBRACKET, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public AssignmentExpressionContext[] assignmentExpression() {
			return GetRuleContexts<AssignmentExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public AssignmentExpressionContext assignmentExpression(int i) {
			return GetRuleContext<AssignmentExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] RBRACKET() { return GetTokens(CobraParser.RBRACKET); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RBRACKET(int i) {
			return GetToken(CobraParser.RBRACKET, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] DOT() { return GetTokens(CobraParser.DOT); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DOT(int i) {
			return GetToken(CobraParser.DOT, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] ID() { return GetTokens(CobraParser.ID); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ID(int i) {
			return GetToken(CobraParser.ID, i);
		}
		public LeftHandSideContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_leftHandSide; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ICobraListener typedListener = listener as ICobraListener;
			if (typedListener != null) typedListener.EnterLeftHandSide(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ICobraListener typedListener = listener as ICobraListener;
			if (typedListener != null) typedListener.ExitLeftHandSide(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICobraVisitor<TResult> typedVisitor = visitor as ICobraVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLeftHandSide(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LeftHandSideContext leftHandSide() {
		LeftHandSideContext _localctx = new LeftHandSideContext(Context, State);
		EnterRule(_localctx, 66, RULE_leftHandSide);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 505;
			primary();
			State = 514;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==LBRACKET || _la==DOT) {
				{
				State = 512;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case LBRACKET:
					{
					State = 506;
					Match(LBRACKET);
					State = 507;
					assignmentExpression();
					State = 508;
					Match(RBRACKET);
					}
					break;
				case DOT:
					{
					State = 510;
					Match(DOT);
					State = 511;
					Match(ID);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				State = 516;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PrimaryContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPAREN() { return GetToken(CobraParser.LPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public AssignmentExpressionContext assignmentExpression() {
			return GetRuleContext<AssignmentExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPAREN() { return GetToken(CobraParser.RPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public LiteralContext literal() {
			return GetRuleContext<LiteralContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ID() { return GetToken(CobraParser.ID, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public FunctionExpressionContext functionExpression() {
			return GetRuleContext<FunctionExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ArrayLiteralContext arrayLiteral() {
			return GetRuleContext<ArrayLiteralContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public DictLiteralContext dictLiteral() {
			return GetRuleContext<DictLiteralContext>(0);
		}
		public PrimaryContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_primary; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ICobraListener typedListener = listener as ICobraListener;
			if (typedListener != null) typedListener.EnterPrimary(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ICobraListener typedListener = listener as ICobraListener;
			if (typedListener != null) typedListener.ExitPrimary(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICobraVisitor<TResult> typedVisitor = visitor as ICobraVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPrimary(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PrimaryContext primary() {
		PrimaryContext _localctx = new PrimaryContext(Context, State);
		EnterRule(_localctx, 68, RULE_primary);
		try {
			State = 526;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,56,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 517;
				Match(LPAREN);
				State = 518;
				assignmentExpression();
				State = 519;
				Match(RPAREN);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 521;
				literal();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 522;
				Match(ID);
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 523;
				functionExpression();
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 524;
				arrayLiteral();
				}
				break;
			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 525;
				dictLiteral();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ArgumentListContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public AssignmentExpressionContext[] assignmentExpression() {
			return GetRuleContexts<AssignmentExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public AssignmentExpressionContext assignmentExpression(int i) {
			return GetRuleContext<AssignmentExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(CobraParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(CobraParser.COMMA, i);
		}
		public ArgumentListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_argumentList; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ICobraListener typedListener = listener as ICobraListener;
			if (typedListener != null) typedListener.EnterArgumentList(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ICobraListener typedListener = listener as ICobraListener;
			if (typedListener != null) typedListener.ExitArgumentList(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICobraVisitor<TResult> typedVisitor = visitor as ICobraVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitArgumentList(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ArgumentListContext argumentList() {
		ArgumentListContext _localctx = new ArgumentListContext(Context, State);
		EnterRule(_localctx, 70, RULE_argumentList);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 528;
			assignmentExpression();
			State = 533;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 529;
				Match(COMMA);
				State = 530;
				assignmentExpression();
				}
				}
				State = 535;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FunctionExpressionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public TypeContext type() {
			return GetRuleContext<TypeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPAREN() { return GetToken(CobraParser.LPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPAREN() { return GetToken(CobraParser.RPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public BlockContext block() {
			return GetRuleContext<BlockContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ParameterListContext parameterList() {
			return GetRuleContext<ParameterListContext>(0);
		}
		public FunctionExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_functionExpression; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ICobraListener typedListener = listener as ICobraListener;
			if (typedListener != null) typedListener.EnterFunctionExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ICobraListener typedListener = listener as ICobraListener;
			if (typedListener != null) typedListener.ExitFunctionExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICobraVisitor<TResult> typedVisitor = visitor as ICobraVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFunctionExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FunctionExpressionContext functionExpression() {
		FunctionExpressionContext _localctx = new FunctionExpressionContext(Context, State);
		EnterRule(_localctx, 72, RULE_functionExpression);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 536;
			type();
			State = 537;
			Match(LPAREN);
			State = 539;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & 260046880L) != 0) || _la==ID) {
				{
				State = 538;
				parameterList();
				}
			}

			State = 541;
			Match(RPAREN);
			State = 542;
			block();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ArrayLiteralContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LBRACKET() { return GetToken(CobraParser.LBRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RBRACKET() { return GetToken(CobraParser.RBRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public AssignmentExpressionContext[] assignmentExpression() {
			return GetRuleContexts<AssignmentExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public AssignmentExpressionContext assignmentExpression(int i) {
			return GetRuleContext<AssignmentExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(CobraParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(CobraParser.COMMA, i);
		}
		public ArrayLiteralContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_arrayLiteral; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ICobraListener typedListener = listener as ICobraListener;
			if (typedListener != null) typedListener.EnterArrayLiteral(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ICobraListener typedListener = listener as ICobraListener;
			if (typedListener != null) typedListener.ExitArrayLiteral(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICobraVisitor<TResult> typedVisitor = visitor as ICobraVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitArrayLiteral(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ArrayLiteralContext arrayLiteral() {
		ArrayLiteralContext _localctx = new ArrayLiteralContext(Context, State);
		EnterRule(_localctx, 74, RULE_arrayLiteral);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 544;
			Match(LBRACKET);
			State = 553;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & -6844338928044998624L) != 0) || ((((_la - 65)) & ~0x3f) == 0 && ((1L << (_la - 65)) & 1985L) != 0)) {
				{
				State = 545;
				assignmentExpression();
				State = 550;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==COMMA) {
					{
					{
					State = 546;
					Match(COMMA);
					State = 547;
					assignmentExpression();
					}
					}
					State = 552;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				}
			}

			State = 555;
			Match(RBRACKET);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DictLiteralContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LBRACE() { return GetToken(CobraParser.LBRACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RBRACE() { return GetToken(CobraParser.RBRACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public DictEntryContext[] dictEntry() {
			return GetRuleContexts<DictEntryContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public DictEntryContext dictEntry(int i) {
			return GetRuleContext<DictEntryContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(CobraParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(CobraParser.COMMA, i);
		}
		public DictLiteralContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_dictLiteral; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ICobraListener typedListener = listener as ICobraListener;
			if (typedListener != null) typedListener.EnterDictLiteral(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ICobraListener typedListener = listener as ICobraListener;
			if (typedListener != null) typedListener.ExitDictLiteral(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICobraVisitor<TResult> typedVisitor = visitor as ICobraVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDictLiteral(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DictLiteralContext dictLiteral() {
		DictLiteralContext _localctx = new DictLiteralContext(Context, State);
		EnterRule(_localctx, 76, RULE_dictLiteral);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 557;
			Match(LBRACE);
			State = 566;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==ID || _la==STRING_LITERAL) {
				{
				State = 558;
				dictEntry();
				State = 563;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==COMMA) {
					{
					{
					State = 559;
					Match(COMMA);
					State = 560;
					dictEntry();
					}
					}
					State = 565;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				}
			}

			State = 568;
			Match(RBRACE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DictEntryContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COLON() { return GetToken(CobraParser.COLON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public AssignmentExpressionContext assignmentExpression() {
			return GetRuleContext<AssignmentExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRING_LITERAL() { return GetToken(CobraParser.STRING_LITERAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ID() { return GetToken(CobraParser.ID, 0); }
		public DictEntryContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_dictEntry; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ICobraListener typedListener = listener as ICobraListener;
			if (typedListener != null) typedListener.EnterDictEntry(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ICobraListener typedListener = listener as ICobraListener;
			if (typedListener != null) typedListener.ExitDictEntry(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICobraVisitor<TResult> typedVisitor = visitor as ICobraVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDictEntry(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DictEntryContext dictEntry() {
		DictEntryContext _localctx = new DictEntryContext(Context, State);
		EnterRule(_localctx, 78, RULE_dictEntry);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 570;
			_la = TokenStream.LA(1);
			if ( !(_la==ID || _la==STRING_LITERAL) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			State = 571;
			Match(COLON);
			State = 572;
			assignmentExpression();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LiteralContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INTEGER() { return GetToken(CobraParser.INTEGER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FLOAT_LITERAL() { return GetToken(CobraParser.FLOAT_LITERAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRING_LITERAL() { return GetToken(CobraParser.STRING_LITERAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BACKTICK_STRING() { return GetToken(CobraParser.BACKTICK_STRING, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TRUE() { return GetToken(CobraParser.TRUE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FALSE() { return GetToken(CobraParser.FALSE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NULL() { return GetToken(CobraParser.NULL, 0); }
		public LiteralContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_literal; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ICobraListener typedListener = listener as ICobraListener;
			if (typedListener != null) typedListener.EnterLiteral(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ICobraListener typedListener = listener as ICobraListener;
			if (typedListener != null) typedListener.ExitLiteral(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICobraVisitor<TResult> typedVisitor = visitor as ICobraVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLiteral(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LiteralContext literal() {
		LiteralContext _localctx = new LiteralContext(Context, State);
		EnterRule(_localctx, 80, RULE_literal);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 574;
			_la = TokenStream.LA(1);
			if ( !(((((_la - 28)) & ~0x3f) == 0 && ((1L << (_la - 28)) & 263882790666247L) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AssignmentOperatorContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ASSIGN() { return GetToken(CobraParser.ASSIGN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PLUS_ASSIGN() { return GetToken(CobraParser.PLUS_ASSIGN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MINUS_ASSIGN() { return GetToken(CobraParser.MINUS_ASSIGN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MUL_ASSIGN() { return GetToken(CobraParser.MUL_ASSIGN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DIV_ASSIGN() { return GetToken(CobraParser.DIV_ASSIGN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MOD_ASSIGN() { return GetToken(CobraParser.MOD_ASSIGN, 0); }
		public AssignmentOperatorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_assignmentOperator; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ICobraListener typedListener = listener as ICobraListener;
			if (typedListener != null) typedListener.EnterAssignmentOperator(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ICobraListener typedListener = listener as ICobraListener;
			if (typedListener != null) typedListener.ExitAssignmentOperator(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICobraVisitor<TResult> typedVisitor = visitor as ICobraVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAssignmentOperator(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AssignmentOperatorContext assignmentOperator() {
		AssignmentOperatorContext _localctx = new AssignmentOperatorContext(Context, State);
		EnterRule(_localctx, 82, RULE_assignmentOperator);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 576;
			_la = TokenStream.LA(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & 10926396801024L) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	private static int[] _serializedATN = {
		4,1,78,579,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,2,6,7,6,2,7,
		7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,13,7,13,2,14,7,14,
		2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,19,2,20,7,20,2,21,7,21,
		2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,26,7,26,2,27,7,27,2,28,7,28,
		2,29,7,29,2,30,7,30,2,31,7,31,2,32,7,32,2,33,7,33,2,34,7,34,2,35,7,35,
		2,36,7,36,2,37,7,37,2,38,7,38,2,39,7,39,2,40,7,40,2,41,7,41,1,0,1,0,1,
		0,1,0,1,0,5,0,90,8,0,10,0,12,0,93,9,0,1,0,1,0,1,1,1,1,1,1,1,1,1,2,1,2,
		1,2,1,2,1,3,1,3,1,3,1,3,1,3,1,3,5,3,111,8,3,10,3,12,3,114,9,3,1,3,1,3,
		1,4,1,4,1,4,5,4,121,8,4,10,4,12,4,124,9,4,1,5,1,5,1,5,1,5,3,5,130,8,5,
		1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,7,1,7,1,7,1,7,3,7,143,8,7,1,7,1,7,1,8,1,
		8,1,8,1,8,3,8,151,8,8,1,8,1,8,1,8,1,9,1,9,1,9,1,9,1,9,3,9,161,8,9,1,9,
		1,9,1,9,1,10,1,10,1,10,5,10,169,8,10,10,10,12,10,172,9,10,1,10,1,10,3,
		10,176,8,10,1,11,1,11,1,12,1,12,1,12,5,12,183,8,12,10,12,12,12,186,9,12,
		1,13,1,13,1,13,1,14,1,14,1,14,1,14,1,14,1,14,1,14,1,14,1,14,1,14,1,14,
		1,14,3,14,203,8,14,1,15,1,15,3,15,207,8,15,1,16,1,16,1,16,5,16,212,8,16,
		10,16,12,16,215,9,16,1,16,1,16,1,17,1,17,1,17,1,17,1,17,1,17,1,17,3,17,
		226,8,17,1,18,1,18,1,18,1,18,1,18,1,18,1,19,1,19,1,19,1,19,1,19,1,19,1,
		19,1,19,1,20,1,20,1,20,1,20,1,20,3,20,247,8,20,1,20,3,20,250,8,20,1,20,
		1,20,3,20,254,8,20,1,20,1,20,1,20,1,21,1,21,1,21,1,21,1,21,1,21,1,21,1,
		21,1,21,1,22,1,22,1,22,1,22,1,22,1,22,5,22,274,8,22,10,22,12,22,277,9,
		22,1,22,1,22,1,23,4,23,282,8,23,11,23,12,23,283,1,23,5,23,287,8,23,10,
		23,12,23,290,9,23,1,24,1,24,1,24,1,24,1,24,1,24,3,24,298,8,24,1,25,1,25,
		1,25,1,25,1,25,1,25,1,25,1,25,3,25,308,8,25,1,25,1,25,3,25,312,8,25,1,
		26,1,26,3,26,316,8,26,1,26,1,26,1,26,1,26,1,26,3,26,323,8,26,1,27,1,27,
		1,27,1,28,1,28,1,28,1,28,1,28,1,28,1,29,1,29,1,29,1,29,1,29,1,29,1,29,
		1,29,1,29,1,29,3,29,344,8,29,3,29,346,8,29,1,30,5,30,349,8,30,10,30,12,
		30,352,9,30,1,30,1,30,1,30,5,30,357,8,30,10,30,12,30,360,9,30,1,30,5,30,
		363,8,30,10,30,12,30,366,9,30,1,30,1,30,5,30,370,8,30,10,30,12,30,373,
		9,30,1,30,5,30,376,8,30,10,30,12,30,379,9,30,1,30,1,30,5,30,383,8,30,10,
		30,12,30,386,9,30,1,30,5,30,389,8,30,10,30,12,30,392,9,30,1,30,1,30,5,
		30,396,8,30,10,30,12,30,399,9,30,1,30,5,30,402,8,30,10,30,12,30,405,9,
		30,1,30,1,30,5,30,409,8,30,10,30,12,30,412,9,30,1,30,5,30,415,8,30,10,
		30,12,30,418,9,30,1,30,1,30,5,30,422,8,30,10,30,12,30,425,9,30,1,30,5,
		30,428,8,30,10,30,12,30,431,9,30,1,30,1,30,5,30,435,8,30,10,30,12,30,438,
		9,30,1,30,5,30,441,8,30,10,30,12,30,444,9,30,1,30,1,30,5,30,448,8,30,10,
		30,12,30,451,9,30,1,30,5,30,454,8,30,10,30,12,30,457,9,30,1,30,1,30,5,
		30,461,8,30,10,30,12,30,464,9,30,1,30,5,30,467,8,30,10,30,12,30,470,9,
		30,1,30,1,30,5,30,474,8,30,10,30,12,30,477,9,30,1,30,5,30,480,8,30,10,
		30,12,30,483,9,30,1,31,1,31,1,32,1,32,1,32,3,32,490,8,32,1,32,1,32,1,32,
		1,32,1,32,1,32,1,32,1,32,1,32,5,32,501,8,32,10,32,12,32,504,9,32,1,33,
		1,33,1,33,1,33,1,33,1,33,1,33,5,33,513,8,33,10,33,12,33,516,9,33,1,34,
		1,34,1,34,1,34,1,34,1,34,1,34,1,34,1,34,3,34,527,8,34,1,35,1,35,1,35,5,
		35,532,8,35,10,35,12,35,535,9,35,1,36,1,36,1,36,3,36,540,8,36,1,36,1,36,
		1,36,1,37,1,37,1,37,1,37,5,37,549,8,37,10,37,12,37,552,9,37,3,37,554,8,
		37,1,37,1,37,1,38,1,38,1,38,1,38,5,38,562,8,38,10,38,12,38,565,9,38,3,
		38,567,8,38,1,38,1,38,1,39,1,39,1,39,1,39,1,40,1,40,1,41,1,41,1,41,0,0,
		42,0,2,4,6,8,10,12,14,16,18,20,22,24,26,28,30,32,34,36,38,40,42,44,46,
		48,50,52,54,56,58,60,62,64,66,68,70,72,74,76,78,80,82,0,10,1,0,23,27,1,
		0,33,35,1,0,31,32,1,0,57,58,1,0,46,49,1,0,44,45,4,0,31,32,41,42,50,50,
		56,56,1,0,71,72,2,0,28,30,72,75,2,0,36,40,43,43,626,0,91,1,0,0,0,2,96,
		1,0,0,0,4,100,1,0,0,0,6,104,1,0,0,0,8,117,1,0,0,0,10,129,1,0,0,0,12,131,
		1,0,0,0,14,138,1,0,0,0,16,146,1,0,0,0,18,155,1,0,0,0,20,175,1,0,0,0,22,
		177,1,0,0,0,24,179,1,0,0,0,26,187,1,0,0,0,28,202,1,0,0,0,30,206,1,0,0,
		0,32,208,1,0,0,0,34,218,1,0,0,0,36,227,1,0,0,0,38,233,1,0,0,0,40,241,1,
		0,0,0,42,258,1,0,0,0,44,267,1,0,0,0,46,281,1,0,0,0,48,297,1,0,0,0,50,299,
		1,0,0,0,52,322,1,0,0,0,54,324,1,0,0,0,56,327,1,0,0,0,58,345,1,0,0,0,60,
		350,1,0,0,0,62,484,1,0,0,0,64,486,1,0,0,0,66,505,1,0,0,0,68,526,1,0,0,
		0,70,528,1,0,0,0,72,536,1,0,0,0,74,544,1,0,0,0,76,557,1,0,0,0,78,570,1,
		0,0,0,80,574,1,0,0,0,82,576,1,0,0,0,84,90,3,2,1,0,85,90,3,4,2,0,86,90,
		3,6,3,0,87,90,3,10,5,0,88,90,3,28,14,0,89,84,1,0,0,0,89,85,1,0,0,0,89,
		86,1,0,0,0,89,87,1,0,0,0,89,88,1,0,0,0,90,93,1,0,0,0,91,89,1,0,0,0,91,
		92,1,0,0,0,92,94,1,0,0,0,93,91,1,0,0,0,94,95,5,0,0,1,95,1,1,0,0,0,96,97,
		5,1,0,0,97,98,5,72,0,0,98,99,5,67,0,0,99,3,1,0,0,0,100,101,5,2,0,0,101,
		102,5,72,0,0,102,103,5,67,0,0,103,5,1,0,0,0,104,105,5,3,0,0,105,106,3,
		8,4,0,106,112,5,63,0,0,107,111,3,10,5,0,108,111,3,28,14,0,109,111,3,18,
		9,0,110,107,1,0,0,0,110,108,1,0,0,0,110,109,1,0,0,0,111,114,1,0,0,0,112,
		110,1,0,0,0,112,113,1,0,0,0,113,115,1,0,0,0,114,112,1,0,0,0,115,116,5,
		64,0,0,116,7,1,0,0,0,117,122,5,71,0,0,118,119,5,70,0,0,119,121,5,71,0,
		0,120,118,1,0,0,0,121,124,1,0,0,0,122,120,1,0,0,0,122,123,1,0,0,0,123,
		9,1,0,0,0,124,122,1,0,0,0,125,130,3,12,6,0,126,130,3,14,7,0,127,130,3,
		16,8,0,128,130,3,18,9,0,129,125,1,0,0,0,129,126,1,0,0,0,129,127,1,0,0,
		0,129,128,1,0,0,0,130,11,1,0,0,0,131,132,5,6,0,0,132,133,3,20,10,0,133,
		134,5,71,0,0,134,135,5,43,0,0,135,136,3,58,29,0,136,137,5,67,0,0,137,13,
		1,0,0,0,138,139,3,20,10,0,139,142,5,71,0,0,140,141,5,43,0,0,141,143,3,
		58,29,0,142,140,1,0,0,0,142,143,1,0,0,0,143,144,1,0,0,0,144,145,5,67,0,
		0,145,15,1,0,0,0,146,147,3,20,10,0,147,148,5,71,0,0,148,150,5,61,0,0,149,
		151,3,24,12,0,150,149,1,0,0,0,150,151,1,0,0,0,151,152,1,0,0,0,152,153,
		5,62,0,0,153,154,3,32,16,0,154,17,1,0,0,0,155,156,5,4,0,0,156,157,3,20,
		10,0,157,158,5,71,0,0,158,160,5,61,0,0,159,161,3,24,12,0,160,159,1,0,0,
		0,160,161,1,0,0,0,161,162,1,0,0,0,162,163,5,62,0,0,163,164,5,67,0,0,164,
		19,1,0,0,0,165,170,3,22,11,0,166,167,5,65,0,0,167,169,5,66,0,0,168,166,
		1,0,0,0,169,172,1,0,0,0,170,168,1,0,0,0,170,171,1,0,0,0,171,176,1,0,0,
		0,172,170,1,0,0,0,173,176,5,5,0,0,174,176,5,71,0,0,175,165,1,0,0,0,175,
		173,1,0,0,0,175,174,1,0,0,0,176,21,1,0,0,0,177,178,7,0,0,0,178,23,1,0,
		0,0,179,184,3,26,13,0,180,181,5,68,0,0,181,183,3,26,13,0,182,180,1,0,0,
		0,183,186,1,0,0,0,184,182,1,0,0,0,184,185,1,0,0,0,185,25,1,0,0,0,186,184,
		1,0,0,0,187,188,3,20,10,0,188,189,5,71,0,0,189,27,1,0,0,0,190,203,3,32,
		16,0,191,203,3,30,15,0,192,203,3,34,17,0,193,203,3,36,18,0,194,203,3,38,
		19,0,195,203,3,40,20,0,196,203,3,42,21,0,197,203,3,44,22,0,198,203,3,50,
		25,0,199,203,3,52,26,0,200,203,3,54,27,0,201,203,3,56,28,0,202,190,1,0,
		0,0,202,191,1,0,0,0,202,192,1,0,0,0,202,193,1,0,0,0,202,194,1,0,0,0,202,
		195,1,0,0,0,202,196,1,0,0,0,202,197,1,0,0,0,202,198,1,0,0,0,202,199,1,
		0,0,0,202,200,1,0,0,0,202,201,1,0,0,0,203,29,1,0,0,0,204,207,3,12,6,0,
		205,207,3,14,7,0,206,204,1,0,0,0,206,205,1,0,0,0,207,31,1,0,0,0,208,213,
		5,63,0,0,209,212,3,30,15,0,210,212,3,28,14,0,211,209,1,0,0,0,211,210,1,
		0,0,0,212,215,1,0,0,0,213,211,1,0,0,0,213,214,1,0,0,0,214,216,1,0,0,0,
		215,213,1,0,0,0,216,217,5,64,0,0,217,33,1,0,0,0,218,219,5,7,0,0,219,220,
		5,61,0,0,220,221,3,58,29,0,221,222,5,62,0,0,222,225,3,28,14,0,223,224,
		5,8,0,0,224,226,3,28,14,0,225,223,1,0,0,0,225,226,1,0,0,0,226,35,1,0,0,
		0,227,228,5,9,0,0,228,229,5,61,0,0,229,230,3,58,29,0,230,231,5,62,0,0,
		231,232,3,28,14,0,232,37,1,0,0,0,233,234,5,10,0,0,234,235,3,28,14,0,235,
		236,5,9,0,0,236,237,5,61,0,0,237,238,3,58,29,0,238,239,5,62,0,0,239,240,
		5,67,0,0,240,39,1,0,0,0,241,242,5,11,0,0,242,246,5,61,0,0,243,247,3,14,
		7,0,244,247,3,54,27,0,245,247,5,67,0,0,246,243,1,0,0,0,246,244,1,0,0,0,
		246,245,1,0,0,0,246,247,1,0,0,0,247,249,1,0,0,0,248,250,3,58,29,0,249,
		248,1,0,0,0,249,250,1,0,0,0,250,251,1,0,0,0,251,253,5,67,0,0,252,254,3,
		58,29,0,253,252,1,0,0,0,253,254,1,0,0,0,254,255,1,0,0,0,255,256,5,62,0,
		0,256,257,3,28,14,0,257,41,1,0,0,0,258,259,5,11,0,0,259,260,5,61,0,0,260,
		261,3,20,10,0,261,262,5,71,0,0,262,263,5,12,0,0,263,264,3,58,29,0,264,
		265,5,62,0,0,265,266,3,28,14,0,266,43,1,0,0,0,267,268,5,13,0,0,268,269,
		5,61,0,0,269,270,3,58,29,0,270,271,5,62,0,0,271,275,5,63,0,0,272,274,3,
		46,23,0,273,272,1,0,0,0,274,277,1,0,0,0,275,273,1,0,0,0,275,276,1,0,0,
		0,276,278,1,0,0,0,277,275,1,0,0,0,278,279,5,64,0,0,279,45,1,0,0,0,280,
		282,3,48,24,0,281,280,1,0,0,0,282,283,1,0,0,0,283,281,1,0,0,0,283,284,
		1,0,0,0,284,288,1,0,0,0,285,287,3,28,14,0,286,285,1,0,0,0,287,290,1,0,
		0,0,288,286,1,0,0,0,288,289,1,0,0,0,289,47,1,0,0,0,290,288,1,0,0,0,291,
		292,5,14,0,0,292,293,3,58,29,0,293,294,5,69,0,0,294,298,1,0,0,0,295,296,
		5,15,0,0,296,298,5,69,0,0,297,291,1,0,0,0,297,295,1,0,0,0,298,49,1,0,0,
		0,299,300,5,16,0,0,300,307,3,32,16,0,301,302,5,17,0,0,302,303,5,61,0,0,
		303,304,3,26,13,0,304,305,5,62,0,0,305,306,3,32,16,0,306,308,1,0,0,0,307,
		301,1,0,0,0,307,308,1,0,0,0,308,311,1,0,0,0,309,310,5,18,0,0,310,312,3,
		32,16,0,311,309,1,0,0,0,311,312,1,0,0,0,312,51,1,0,0,0,313,315,5,19,0,
		0,314,316,3,58,29,0,315,314,1,0,0,0,315,316,1,0,0,0,316,317,1,0,0,0,317,
		323,5,67,0,0,318,319,5,20,0,0,319,323,5,67,0,0,320,321,5,21,0,0,321,323,
		5,67,0,0,322,313,1,0,0,0,322,318,1,0,0,0,322,320,1,0,0,0,323,53,1,0,0,
		0,324,325,3,58,29,0,325,326,5,67,0,0,326,55,1,0,0,0,327,328,5,22,0,0,328,
		329,5,61,0,0,329,330,3,58,29,0,330,331,5,62,0,0,331,332,5,67,0,0,332,57,
		1,0,0,0,333,334,3,66,33,0,334,335,3,82,41,0,335,336,3,58,29,0,336,346,
		1,0,0,0,337,343,3,60,30,0,338,339,5,59,0,0,339,340,3,58,29,0,340,341,5,
		69,0,0,341,342,3,58,29,0,342,344,1,0,0,0,343,338,1,0,0,0,343,344,1,0,0,
		0,344,346,1,0,0,0,345,333,1,0,0,0,345,337,1,0,0,0,346,59,1,0,0,0,347,349,
		3,62,31,0,348,347,1,0,0,0,349,352,1,0,0,0,350,348,1,0,0,0,350,351,1,0,
		0,0,351,353,1,0,0,0,352,350,1,0,0,0,353,364,3,64,32,0,354,358,7,1,0,0,
		355,357,3,62,31,0,356,355,1,0,0,0,357,360,1,0,0,0,358,356,1,0,0,0,358,
		359,1,0,0,0,359,361,1,0,0,0,360,358,1,0,0,0,361,363,3,64,32,0,362,354,
		1,0,0,0,363,366,1,0,0,0,364,362,1,0,0,0,364,365,1,0,0,0,365,377,1,0,0,
		0,366,364,1,0,0,0,367,371,7,2,0,0,368,370,3,62,31,0,369,368,1,0,0,0,370,
		373,1,0,0,0,371,369,1,0,0,0,371,372,1,0,0,0,372,374,1,0,0,0,373,371,1,
		0,0,0,374,376,3,64,32,0,375,367,1,0,0,0,376,379,1,0,0,0,377,375,1,0,0,
		0,377,378,1,0,0,0,378,390,1,0,0,0,379,377,1,0,0,0,380,384,7,3,0,0,381,
		383,3,62,31,0,382,381,1,0,0,0,383,386,1,0,0,0,384,382,1,0,0,0,384,385,
		1,0,0,0,385,387,1,0,0,0,386,384,1,0,0,0,387,389,3,64,32,0,388,380,1,0,
		0,0,389,392,1,0,0,0,390,388,1,0,0,0,390,391,1,0,0,0,391,403,1,0,0,0,392,
		390,1,0,0,0,393,397,7,4,0,0,394,396,3,62,31,0,395,394,1,0,0,0,396,399,
		1,0,0,0,397,395,1,0,0,0,397,398,1,0,0,0,398,400,1,0,0,0,399,397,1,0,0,
		0,400,402,3,64,32,0,401,393,1,0,0,0,402,405,1,0,0,0,403,401,1,0,0,0,403,
		404,1,0,0,0,404,416,1,0,0,0,405,403,1,0,0,0,406,410,7,5,0,0,407,409,3,
		62,31,0,408,407,1,0,0,0,409,412,1,0,0,0,410,408,1,0,0,0,410,411,1,0,0,
		0,411,413,1,0,0,0,412,410,1,0,0,0,413,415,3,64,32,0,414,406,1,0,0,0,415,
		418,1,0,0,0,416,414,1,0,0,0,416,417,1,0,0,0,417,429,1,0,0,0,418,416,1,
		0,0,0,419,423,5,53,0,0,420,422,3,62,31,0,421,420,1,0,0,0,422,425,1,0,0,
		0,423,421,1,0,0,0,423,424,1,0,0,0,424,426,1,0,0,0,425,423,1,0,0,0,426,
		428,3,64,32,0,427,419,1,0,0,0,428,431,1,0,0,0,429,427,1,0,0,0,429,430,
		1,0,0,0,430,442,1,0,0,0,431,429,1,0,0,0,432,436,5,55,0,0,433,435,3,62,
		31,0,434,433,1,0,0,0,435,438,1,0,0,0,436,434,1,0,0,0,436,437,1,0,0,0,437,
		439,1,0,0,0,438,436,1,0,0,0,439,441,3,64,32,0,440,432,1,0,0,0,441,444,
		1,0,0,0,442,440,1,0,0,0,442,443,1,0,0,0,443,455,1,0,0,0,444,442,1,0,0,
		0,445,449,5,54,0,0,446,448,3,62,31,0,447,446,1,0,0,0,448,451,1,0,0,0,449,
		447,1,0,0,0,449,450,1,0,0,0,450,452,1,0,0,0,451,449,1,0,0,0,452,454,3,
		64,32,0,453,445,1,0,0,0,454,457,1,0,0,0,455,453,1,0,0,0,455,456,1,0,0,
		0,456,468,1,0,0,0,457,455,1,0,0,0,458,462,5,51,0,0,459,461,3,62,31,0,460,
		459,1,0,0,0,461,464,1,0,0,0,462,460,1,0,0,0,462,463,1,0,0,0,463,465,1,
		0,0,0,464,462,1,0,0,0,465,467,3,64,32,0,466,458,1,0,0,0,467,470,1,0,0,
		0,468,466,1,0,0,0,468,469,1,0,0,0,469,481,1,0,0,0,470,468,1,0,0,0,471,
		475,5,52,0,0,472,474,3,62,31,0,473,472,1,0,0,0,474,477,1,0,0,0,475,473,
		1,0,0,0,475,476,1,0,0,0,476,478,1,0,0,0,477,475,1,0,0,0,478,480,3,64,32,
		0,479,471,1,0,0,0,480,483,1,0,0,0,481,479,1,0,0,0,481,482,1,0,0,0,482,
		61,1,0,0,0,483,481,1,0,0,0,484,485,7,6,0,0,485,63,1,0,0,0,486,502,3,68,
		34,0,487,489,5,61,0,0,488,490,3,70,35,0,489,488,1,0,0,0,489,490,1,0,0,
		0,490,491,1,0,0,0,491,501,5,62,0,0,492,493,5,65,0,0,493,494,3,58,29,0,
		494,495,5,66,0,0,495,501,1,0,0,0,496,497,5,70,0,0,497,501,5,71,0,0,498,
		501,5,41,0,0,499,501,5,42,0,0,500,487,1,0,0,0,500,492,1,0,0,0,500,496,
		1,0,0,0,500,498,1,0,0,0,500,499,1,0,0,0,501,504,1,0,0,0,502,500,1,0,0,
		0,502,503,1,0,0,0,503,65,1,0,0,0,504,502,1,0,0,0,505,514,3,68,34,0,506,
		507,5,65,0,0,507,508,3,58,29,0,508,509,5,66,0,0,509,513,1,0,0,0,510,511,
		5,70,0,0,511,513,5,71,0,0,512,506,1,0,0,0,512,510,1,0,0,0,513,516,1,0,
		0,0,514,512,1,0,0,0,514,515,1,0,0,0,515,67,1,0,0,0,516,514,1,0,0,0,517,
		518,5,61,0,0,518,519,3,58,29,0,519,520,5,62,0,0,520,527,1,0,0,0,521,527,
		3,80,40,0,522,527,5,71,0,0,523,527,3,72,36,0,524,527,3,74,37,0,525,527,
		3,76,38,0,526,517,1,0,0,0,526,521,1,0,0,0,526,522,1,0,0,0,526,523,1,0,
		0,0,526,524,1,0,0,0,526,525,1,0,0,0,527,69,1,0,0,0,528,533,3,58,29,0,529,
		530,5,68,0,0,530,532,3,58,29,0,531,529,1,0,0,0,532,535,1,0,0,0,533,531,
		1,0,0,0,533,534,1,0,0,0,534,71,1,0,0,0,535,533,1,0,0,0,536,537,3,20,10,
		0,537,539,5,61,0,0,538,540,3,24,12,0,539,538,1,0,0,0,539,540,1,0,0,0,540,
		541,1,0,0,0,541,542,5,62,0,0,542,543,3,32,16,0,543,73,1,0,0,0,544,553,
		5,65,0,0,545,550,3,58,29,0,546,547,5,68,0,0,547,549,3,58,29,0,548,546,
		1,0,0,0,549,552,1,0,0,0,550,548,1,0,0,0,550,551,1,0,0,0,551,554,1,0,0,
		0,552,550,1,0,0,0,553,545,1,0,0,0,553,554,1,0,0,0,554,555,1,0,0,0,555,
		556,5,66,0,0,556,75,1,0,0,0,557,566,5,63,0,0,558,563,3,78,39,0,559,560,
		5,68,0,0,560,562,3,78,39,0,561,559,1,0,0,0,562,565,1,0,0,0,563,561,1,0,
		0,0,563,564,1,0,0,0,564,567,1,0,0,0,565,563,1,0,0,0,566,558,1,0,0,0,566,
		567,1,0,0,0,567,568,1,0,0,0,568,569,5,64,0,0,569,77,1,0,0,0,570,571,7,
		7,0,0,571,572,5,69,0,0,572,573,3,58,29,0,573,79,1,0,0,0,574,575,7,8,0,
		0,575,81,1,0,0,0,576,577,7,9,0,0,577,83,1,0,0,0,63,89,91,110,112,122,129,
		142,150,160,170,175,184,202,206,211,213,225,246,249,253,275,283,288,297,
		307,311,315,322,343,345,350,358,364,371,377,384,390,397,403,410,416,423,
		429,436,442,449,455,462,468,475,481,489,500,502,512,514,526,533,539,550,
		553,563,566
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
