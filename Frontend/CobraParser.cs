//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.13.2
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from F:/Workspace/Cobra/Frontend/Cobra.g4 by ANTLR 4.13.2

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

using System;
using System.IO;
using System.Text;
using System.Diagnostics;
using System.Collections.Generic;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.13.2")]
[System.CLSCompliant(false)]
public partial class CobraParser : Parser {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		LINK=1, IMPORT=2, NAMESPACE=3, EXTERNAL=4, CONST=5, IF=6, ELSE=7, WHILE=8, 
		DO=9, FOR=10, IN=11, SWITCH=12, CASE=13, DEFAULT=14, TRY=15, CATCH=16, 
		FINALLY=17, RETURN=18, BREAK=19, CONTINUE=20, CLASS=21, NEW=22, THIS=23, 
		STATIC=24, PUBLIC=25, PRIVATE=26, CONSTRUCTOR=27, DESTRUCTOR=28, INT=29, 
		FLOAT=30, STRING=31, BOOL=32, VOID=33, NULL=34, HANDLE=35, FUN=36, MARKUP=37, 
		DICT=38, TRUE=39, FALSE=40, AS=41, PLUS=42, MINUS=43, MUL=44, DIV=45, 
		MOD=46, PLUS_ASSIGN=47, MINUS_ASSIGN=48, MUL_ASSIGN=49, DIV_ASSIGN=50, 
		MOD_ASSIGN=51, INC=52, DEC=53, ASSIGN=54, EQ=55, NEQ=56, GT=57, LT=58, 
		GTE=59, LTE=60, NOT=61, AND=62, OR=63, BITWISE_AND=64, BITWISE_OR=65, 
		BITWISE_XOR=66, BITWISE_NOT=67, SHL=68, SHR=69, QUESTION=70, LPAREN=71, 
		RPAREN=72, LBRACE=73, RBRACE=74, LBRACKET=75, RBRACKET=76, SEMICOLON=77, 
		COMMA=78, COLON=79, DOT=80, ID=81, STRING_LITERAL=82, BACKTICK_STRING=83, 
		INTEGER=84, FLOAT_LITERAL=85, LINE_COMMENT=86, BLOCK_COMMENT=87, WS=88;
	public const int
		RULE_program = 0, RULE_linkStatement = 1, RULE_importStatement = 2, RULE_namespaceDeclaration = 3, 
		RULE_qualifiedName = 4, RULE_topLevelDeclaration = 5, RULE_classDeclaration = 6, 
		RULE_memberDeclaration = 7, RULE_accessModifier = 8, RULE_fieldDeclaration = 9, 
		RULE_methodDeclaration = 10, RULE_constructorDeclaration = 11, RULE_destructorDeclaration = 12, 
		RULE_constDeclaration = 13, RULE_varDeclaration = 14, RULE_functionDeclaration = 15, 
		RULE_externDeclaration = 16, RULE_type = 17, RULE_secondaryType = 18, 
		RULE_primitiveType = 19, RULE_parameterList = 20, RULE_parameter = 21, 
		RULE_statement = 22, RULE_declarationStatement = 23, RULE_block = 24, 
		RULE_ifStatement = 25, RULE_whileStatement = 26, RULE_doWhileStatement = 27, 
		RULE_forStatement = 28, RULE_forEachStatement = 29, RULE_switchStatement = 30, 
		RULE_switchBlock = 31, RULE_switchLabel = 32, RULE_tryStatement = 33, 
		RULE_jumpStatement = 34, RULE_expressionStatement = 35, RULE_assignmentExpression = 36, 
		RULE_binaryExpression = 37, RULE_unaryOp = 38, RULE_postfixExpression = 39, 
		RULE_leftHandSide = 40, RULE_primary = 41, RULE_newExpression = 42, RULE_argumentList = 43, 
		RULE_functionExpression = 44, RULE_arrayLiteral = 45, RULE_dictLiteral = 46, 
		RULE_dictEntry = 47, RULE_literal = 48, RULE_assignmentOperator = 49;
	public static readonly string[] ruleNames = {
		"program", "linkStatement", "importStatement", "namespaceDeclaration", 
		"qualifiedName", "topLevelDeclaration", "classDeclaration", "memberDeclaration", 
		"accessModifier", "fieldDeclaration", "methodDeclaration", "constructorDeclaration", 
		"destructorDeclaration", "constDeclaration", "varDeclaration", "functionDeclaration", 
		"externDeclaration", "type", "secondaryType", "primitiveType", "parameterList", 
		"parameter", "statement", "declarationStatement", "block", "ifStatement", 
		"whileStatement", "doWhileStatement", "forStatement", "forEachStatement", 
		"switchStatement", "switchBlock", "switchLabel", "tryStatement", "jumpStatement", 
		"expressionStatement", "assignmentExpression", "binaryExpression", "unaryOp", 
		"postfixExpression", "leftHandSide", "primary", "newExpression", "argumentList", 
		"functionExpression", "arrayLiteral", "dictLiteral", "dictEntry", "literal", 
		"assignmentOperator"
	};

	private static readonly string[] _LiteralNames = {
		null, "'link'", "'import'", "'namespace'", "'external'", "'const'", "'if'", 
		"'else'", "'while'", "'do'", "'for'", "'in'", "'switch'", "'case'", "'default'", 
		"'try'", "'catch'", "'finally'", "'return'", "'break'", "'continue'", 
		"'class'", "'new'", "'this'", "'static'", "'public'", "'private'", "'constructor'", 
		"'destructor'", "'int'", "'float'", "'string'", "'bool'", "'void'", "'null'", 
		"'handle'", "'fun'", "'markup'", "'dict'", "'true'", "'false'", "'as'", 
		"'+'", "'-'", "'*'", "'/'", "'%'", "'+='", "'-='", "'*='", "'/='", "'%='", 
		"'++'", "'--'", "'='", "'=='", "'!='", "'>'", "'<'", "'>='", "'<='", "'!'", 
		"'&&'", "'||'", "'&'", "'|'", "'^'", "'~'", "'<<'", "'>>'", "'?'", "'('", 
		"')'", "'{'", "'}'", "'['", "']'", "';'", "','", "':'", "'.'"
	};
	private static readonly string[] _SymbolicNames = {
		null, "LINK", "IMPORT", "NAMESPACE", "EXTERNAL", "CONST", "IF", "ELSE", 
		"WHILE", "DO", "FOR", "IN", "SWITCH", "CASE", "DEFAULT", "TRY", "CATCH", 
		"FINALLY", "RETURN", "BREAK", "CONTINUE", "CLASS", "NEW", "THIS", "STATIC", 
		"PUBLIC", "PRIVATE", "CONSTRUCTOR", "DESTRUCTOR", "INT", "FLOAT", "STRING", 
		"BOOL", "VOID", "NULL", "HANDLE", "FUN", "MARKUP", "DICT", "TRUE", "FALSE", 
		"AS", "PLUS", "MINUS", "MUL", "DIV", "MOD", "PLUS_ASSIGN", "MINUS_ASSIGN", 
		"MUL_ASSIGN", "DIV_ASSIGN", "MOD_ASSIGN", "INC", "DEC", "ASSIGN", "EQ", 
		"NEQ", "GT", "LT", "GTE", "LTE", "NOT", "AND", "OR", "BITWISE_AND", "BITWISE_OR", 
		"BITWISE_XOR", "BITWISE_NOT", "SHL", "SHR", "QUESTION", "LPAREN", "RPAREN", 
		"LBRACE", "RBRACE", "LBRACKET", "RBRACKET", "SEMICOLON", "COMMA", "COLON", 
		"DOT", "ID", "STRING_LITERAL", "BACKTICK_STRING", "INTEGER", "FLOAT_LITERAL", 
		"LINE_COMMENT", "BLOCK_COMMENT", "WS"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "Cobra.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override int[] SerializedAtn { get { return _serializedATN; } }

	static CobraParser() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}

		public CobraParser(ITokenStream input) : this(input, Console.Out, Console.Error) { }

		public CobraParser(ITokenStream input, TextWriter output, TextWriter errorOutput)
		: base(input, output, errorOutput)
	{
		Interpreter = new ParserATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	public partial class ProgramContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Eof() { return GetToken(CobraParser.Eof, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public LinkStatementContext[] linkStatement() {
			return GetRuleContexts<LinkStatementContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public LinkStatementContext linkStatement(int i) {
			return GetRuleContext<LinkStatementContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ImportStatementContext[] importStatement() {
			return GetRuleContexts<ImportStatementContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ImportStatementContext importStatement(int i) {
			return GetRuleContext<ImportStatementContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public NamespaceDeclarationContext[] namespaceDeclaration() {
			return GetRuleContexts<NamespaceDeclarationContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public NamespaceDeclarationContext namespaceDeclaration(int i) {
			return GetRuleContext<NamespaceDeclarationContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public TopLevelDeclarationContext[] topLevelDeclaration() {
			return GetRuleContexts<TopLevelDeclarationContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public TopLevelDeclarationContext topLevelDeclaration(int i) {
			return GetRuleContext<TopLevelDeclarationContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext[] statement() {
			return GetRuleContexts<StatementContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext statement(int i) {
			return GetRuleContext<StatementContext>(i);
		}
		public ProgramContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_program; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ICobraListener typedListener = listener as ICobraListener;
			if (typedListener != null) typedListener.EnterProgram(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ICobraListener typedListener = listener as ICobraListener;
			if (typedListener != null) typedListener.ExitProgram(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICobraVisitor<TResult> typedVisitor = visitor as ICobraVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitProgram(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ProgramContext program() {
		ProgramContext _localctx = new ProgramContext(Context, State);
		EnterRule(_localctx, 0, RULE_program);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 107;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & 2319369200738277246L) != 0) || ((((_la - 67)) & ~0x3f) == 0 && ((1L << (_la - 67)) & 508241L) != 0)) {
				{
				State = 105;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,0,Context) ) {
				case 1:
					{
					State = 100;
					linkStatement();
					}
					break;
				case 2:
					{
					State = 101;
					importStatement();
					}
					break;
				case 3:
					{
					State = 102;
					namespaceDeclaration();
					}
					break;
				case 4:
					{
					State = 103;
					topLevelDeclaration();
					}
					break;
				case 5:
					{
					State = 104;
					statement();
					}
					break;
				}
				}
				State = 109;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 110;
			Match(Eof);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LinkStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LINK() { return GetToken(CobraParser.LINK, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRING_LITERAL() { return GetToken(CobraParser.STRING_LITERAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEMICOLON() { return GetToken(CobraParser.SEMICOLON, 0); }
		public LinkStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_linkStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ICobraListener typedListener = listener as ICobraListener;
			if (typedListener != null) typedListener.EnterLinkStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ICobraListener typedListener = listener as ICobraListener;
			if (typedListener != null) typedListener.ExitLinkStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICobraVisitor<TResult> typedVisitor = visitor as ICobraVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLinkStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LinkStatementContext linkStatement() {
		LinkStatementContext _localctx = new LinkStatementContext(Context, State);
		EnterRule(_localctx, 2, RULE_linkStatement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 112;
			Match(LINK);
			State = 113;
			Match(STRING_LITERAL);
			State = 114;
			Match(SEMICOLON);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ImportStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IMPORT() { return GetToken(CobraParser.IMPORT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRING_LITERAL() { return GetToken(CobraParser.STRING_LITERAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEMICOLON() { return GetToken(CobraParser.SEMICOLON, 0); }
		public ImportStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_importStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ICobraListener typedListener = listener as ICobraListener;
			if (typedListener != null) typedListener.EnterImportStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ICobraListener typedListener = listener as ICobraListener;
			if (typedListener != null) typedListener.ExitImportStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICobraVisitor<TResult> typedVisitor = visitor as ICobraVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitImportStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ImportStatementContext importStatement() {
		ImportStatementContext _localctx = new ImportStatementContext(Context, State);
		EnterRule(_localctx, 4, RULE_importStatement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 116;
			Match(IMPORT);
			State = 117;
			Match(STRING_LITERAL);
			State = 118;
			Match(SEMICOLON);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NamespaceDeclarationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NAMESPACE() { return GetToken(CobraParser.NAMESPACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public QualifiedNameContext qualifiedName() {
			return GetRuleContext<QualifiedNameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LBRACE() { return GetToken(CobraParser.LBRACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RBRACE() { return GetToken(CobraParser.RBRACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TopLevelDeclarationContext[] topLevelDeclaration() {
			return GetRuleContexts<TopLevelDeclarationContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public TopLevelDeclarationContext topLevelDeclaration(int i) {
			return GetRuleContext<TopLevelDeclarationContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext[] statement() {
			return GetRuleContexts<StatementContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext statement(int i) {
			return GetRuleContext<StatementContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExternDeclarationContext[] externDeclaration() {
			return GetRuleContexts<ExternDeclarationContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExternDeclarationContext externDeclaration(int i) {
			return GetRuleContext<ExternDeclarationContext>(i);
		}
		public NamespaceDeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_namespaceDeclaration; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ICobraListener typedListener = listener as ICobraListener;
			if (typedListener != null) typedListener.EnterNamespaceDeclaration(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ICobraListener typedListener = listener as ICobraListener;
			if (typedListener != null) typedListener.ExitNamespaceDeclaration(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICobraVisitor<TResult> typedVisitor = visitor as ICobraVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNamespaceDeclaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public NamespaceDeclarationContext namespaceDeclaration() {
		NamespaceDeclarationContext _localctx = new NamespaceDeclarationContext(Context, State);
		EnterRule(_localctx, 6, RULE_namespaceDeclaration);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 120;
			Match(NAMESPACE);
			State = 121;
			qualifiedName();
			State = 122;
			Match(LBRACE);
			State = 128;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & 2319369200738277232L) != 0) || ((((_la - 67)) & ~0x3f) == 0 && ((1L << (_la - 67)) & 508241L) != 0)) {
				{
				State = 126;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,2,Context) ) {
				case 1:
					{
					State = 123;
					topLevelDeclaration();
					}
					break;
				case 2:
					{
					State = 124;
					statement();
					}
					break;
				case 3:
					{
					State = 125;
					externDeclaration();
					}
					break;
				}
				}
				State = 130;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 131;
			Match(RBRACE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class QualifiedNameContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] ID() { return GetTokens(CobraParser.ID); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ID(int i) {
			return GetToken(CobraParser.ID, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] DOT() { return GetTokens(CobraParser.DOT); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DOT(int i) {
			return GetToken(CobraParser.DOT, i);
		}
		public QualifiedNameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_qualifiedName; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ICobraListener typedListener = listener as ICobraListener;
			if (typedListener != null) typedListener.EnterQualifiedName(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ICobraListener typedListener = listener as ICobraListener;
			if (typedListener != null) typedListener.ExitQualifiedName(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICobraVisitor<TResult> typedVisitor = visitor as ICobraVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitQualifiedName(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public QualifiedNameContext qualifiedName() {
		QualifiedNameContext _localctx = new QualifiedNameContext(Context, State);
		EnterRule(_localctx, 8, RULE_qualifiedName);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 133;
			Match(ID);
			State = 138;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==DOT) {
				{
				{
				State = 134;
				Match(DOT);
				State = 135;
				Match(ID);
				}
				}
				State = 140;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TopLevelDeclarationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ConstDeclarationContext constDeclaration() {
			return GetRuleContext<ConstDeclarationContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public VarDeclarationContext varDeclaration() {
			return GetRuleContext<VarDeclarationContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public FunctionDeclarationContext functionDeclaration() {
			return GetRuleContext<FunctionDeclarationContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExternDeclarationContext externDeclaration() {
			return GetRuleContext<ExternDeclarationContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ClassDeclarationContext classDeclaration() {
			return GetRuleContext<ClassDeclarationContext>(0);
		}
		public TopLevelDeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_topLevelDeclaration; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ICobraListener typedListener = listener as ICobraListener;
			if (typedListener != null) typedListener.EnterTopLevelDeclaration(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ICobraListener typedListener = listener as ICobraListener;
			if (typedListener != null) typedListener.ExitTopLevelDeclaration(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICobraVisitor<TResult> typedVisitor = visitor as ICobraVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTopLevelDeclaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TopLevelDeclarationContext topLevelDeclaration() {
		TopLevelDeclarationContext _localctx = new TopLevelDeclarationContext(Context, State);
		EnterRule(_localctx, 10, RULE_topLevelDeclaration);
		try {
			State = 146;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,5,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 141;
				constDeclaration();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 142;
				varDeclaration();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 143;
				functionDeclaration();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 144;
				externDeclaration();
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 145;
				classDeclaration();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ClassDeclarationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLASS() { return GetToken(CobraParser.CLASS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ID() { return GetToken(CobraParser.ID, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LBRACE() { return GetToken(CobraParser.LBRACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RBRACE() { return GetToken(CobraParser.RBRACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public MemberDeclarationContext[] memberDeclaration() {
			return GetRuleContexts<MemberDeclarationContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public MemberDeclarationContext memberDeclaration(int i) {
			return GetRuleContext<MemberDeclarationContext>(i);
		}
		public ClassDeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_classDeclaration; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ICobraListener typedListener = listener as ICobraListener;
			if (typedListener != null) typedListener.EnterClassDeclaration(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ICobraListener typedListener = listener as ICobraListener;
			if (typedListener != null) typedListener.ExitClassDeclaration(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICobraVisitor<TResult> typedVisitor = visitor as ICobraVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitClassDeclaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ClassDeclarationContext classDeclaration() {
		ClassDeclarationContext _localctx = new ClassDeclarationContext(Context, State);
		EnterRule(_localctx, 12, RULE_classDeclaration);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 148;
			Match(CLASS);
			State = 149;
			Match(ID);
			State = 150;
			Match(LBRACE);
			State = 154;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (((((_la - 24)) & ~0x3f) == 0 && ((1L << (_la - 24)) & 144115188075887615L) != 0)) {
				{
				{
				State = 151;
				memberDeclaration();
				}
				}
				State = 156;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 157;
			Match(RBRACE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MemberDeclarationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public FieldDeclarationContext fieldDeclaration() {
			return GetRuleContext<FieldDeclarationContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public MethodDeclarationContext methodDeclaration() {
			return GetRuleContext<MethodDeclarationContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public AccessModifierContext accessModifier() {
			return GetRuleContext<AccessModifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STATIC() { return GetToken(CobraParser.STATIC, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ConstructorDeclarationContext constructorDeclaration() {
			return GetRuleContext<ConstructorDeclarationContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public DestructorDeclarationContext destructorDeclaration() {
			return GetRuleContext<DestructorDeclarationContext>(0);
		}
		public MemberDeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_memberDeclaration; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ICobraListener typedListener = listener as ICobraListener;
			if (typedListener != null) typedListener.EnterMemberDeclaration(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ICobraListener typedListener = listener as ICobraListener;
			if (typedListener != null) typedListener.ExitMemberDeclaration(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICobraVisitor<TResult> typedVisitor = visitor as ICobraVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMemberDeclaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public MemberDeclarationContext memberDeclaration() {
		MemberDeclarationContext _localctx = new MemberDeclarationContext(Context, State);
		EnterRule(_localctx, 14, RULE_memberDeclaration);
		int _la;
		try {
			State = 171;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case STATIC:
			case PUBLIC:
			case PRIVATE:
			case INT:
			case FLOAT:
			case STRING:
			case BOOL:
			case VOID:
			case HANDLE:
			case FUN:
			case MARKUP:
			case DICT:
			case ID:
				EnterOuterAlt(_localctx, 1);
				{
				State = 160;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==PUBLIC || _la==PRIVATE) {
					{
					State = 159;
					accessModifier();
					}
				}

				State = 163;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==STATIC) {
					{
					State = 162;
					Match(STATIC);
					}
				}

				State = 167;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,9,Context) ) {
				case 1:
					{
					State = 165;
					fieldDeclaration();
					}
					break;
				case 2:
					{
					State = 166;
					methodDeclaration();
					}
					break;
				}
				}
				break;
			case CONSTRUCTOR:
				EnterOuterAlt(_localctx, 2);
				{
				State = 169;
				constructorDeclaration();
				}
				break;
			case DESTRUCTOR:
				EnterOuterAlt(_localctx, 3);
				{
				State = 170;
				destructorDeclaration();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AccessModifierContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PUBLIC() { return GetToken(CobraParser.PUBLIC, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PRIVATE() { return GetToken(CobraParser.PRIVATE, 0); }
		public AccessModifierContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_accessModifier; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ICobraListener typedListener = listener as ICobraListener;
			if (typedListener != null) typedListener.EnterAccessModifier(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ICobraListener typedListener = listener as ICobraListener;
			if (typedListener != null) typedListener.ExitAccessModifier(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICobraVisitor<TResult> typedVisitor = visitor as ICobraVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAccessModifier(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AccessModifierContext accessModifier() {
		AccessModifierContext _localctx = new AccessModifierContext(Context, State);
		EnterRule(_localctx, 16, RULE_accessModifier);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 173;
			_la = TokenStream.LA(1);
			if ( !(_la==PUBLIC || _la==PRIVATE) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FieldDeclarationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public VarDeclarationContext varDeclaration() {
			return GetRuleContext<VarDeclarationContext>(0);
		}
		public FieldDeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_fieldDeclaration; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ICobraListener typedListener = listener as ICobraListener;
			if (typedListener != null) typedListener.EnterFieldDeclaration(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ICobraListener typedListener = listener as ICobraListener;
			if (typedListener != null) typedListener.ExitFieldDeclaration(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICobraVisitor<TResult> typedVisitor = visitor as ICobraVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFieldDeclaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FieldDeclarationContext fieldDeclaration() {
		FieldDeclarationContext _localctx = new FieldDeclarationContext(Context, State);
		EnterRule(_localctx, 18, RULE_fieldDeclaration);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 175;
			varDeclaration();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MethodDeclarationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public FunctionDeclarationContext functionDeclaration() {
			return GetRuleContext<FunctionDeclarationContext>(0);
		}
		public MethodDeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_methodDeclaration; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ICobraListener typedListener = listener as ICobraListener;
			if (typedListener != null) typedListener.EnterMethodDeclaration(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ICobraListener typedListener = listener as ICobraListener;
			if (typedListener != null) typedListener.ExitMethodDeclaration(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICobraVisitor<TResult> typedVisitor = visitor as ICobraVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMethodDeclaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public MethodDeclarationContext methodDeclaration() {
		MethodDeclarationContext _localctx = new MethodDeclarationContext(Context, State);
		EnterRule(_localctx, 20, RULE_methodDeclaration);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 177;
			functionDeclaration();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ConstructorDeclarationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CONSTRUCTOR() { return GetToken(CobraParser.CONSTRUCTOR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPAREN() { return GetToken(CobraParser.LPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPAREN() { return GetToken(CobraParser.RPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public BlockContext block() {
			return GetRuleContext<BlockContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ParameterListContext parameterList() {
			return GetRuleContext<ParameterListContext>(0);
		}
		public ConstructorDeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_constructorDeclaration; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ICobraListener typedListener = listener as ICobraListener;
			if (typedListener != null) typedListener.EnterConstructorDeclaration(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ICobraListener typedListener = listener as ICobraListener;
			if (typedListener != null) typedListener.ExitConstructorDeclaration(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICobraVisitor<TResult> typedVisitor = visitor as ICobraVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitConstructorDeclaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ConstructorDeclarationContext constructorDeclaration() {
		ConstructorDeclarationContext _localctx = new ConstructorDeclarationContext(Context, State);
		EnterRule(_localctx, 22, RULE_constructorDeclaration);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 179;
			Match(CONSTRUCTOR);
			State = 180;
			Match(LPAREN);
			State = 182;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (((((_la - 29)) & ~0x3f) == 0 && ((1L << (_la - 29)) & 4503599627371487L) != 0)) {
				{
				State = 181;
				parameterList();
				}
			}

			State = 184;
			Match(RPAREN);
			State = 185;
			block();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DestructorDeclarationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DESTRUCTOR() { return GetToken(CobraParser.DESTRUCTOR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPAREN() { return GetToken(CobraParser.LPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPAREN() { return GetToken(CobraParser.RPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public BlockContext block() {
			return GetRuleContext<BlockContext>(0);
		}
		public DestructorDeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_destructorDeclaration; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ICobraListener typedListener = listener as ICobraListener;
			if (typedListener != null) typedListener.EnterDestructorDeclaration(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ICobraListener typedListener = listener as ICobraListener;
			if (typedListener != null) typedListener.ExitDestructorDeclaration(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICobraVisitor<TResult> typedVisitor = visitor as ICobraVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDestructorDeclaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DestructorDeclarationContext destructorDeclaration() {
		DestructorDeclarationContext _localctx = new DestructorDeclarationContext(Context, State);
		EnterRule(_localctx, 24, RULE_destructorDeclaration);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 187;
			Match(DESTRUCTOR);
			State = 188;
			Match(LPAREN);
			State = 189;
			Match(RPAREN);
			State = 190;
			block();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ConstDeclarationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CONST() { return GetToken(CobraParser.CONST, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TypeContext type() {
			return GetRuleContext<TypeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ID() { return GetToken(CobraParser.ID, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ASSIGN() { return GetToken(CobraParser.ASSIGN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public AssignmentExpressionContext assignmentExpression() {
			return GetRuleContext<AssignmentExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEMICOLON() { return GetToken(CobraParser.SEMICOLON, 0); }
		public ConstDeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_constDeclaration; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ICobraListener typedListener = listener as ICobraListener;
			if (typedListener != null) typedListener.EnterConstDeclaration(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ICobraListener typedListener = listener as ICobraListener;
			if (typedListener != null) typedListener.ExitConstDeclaration(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICobraVisitor<TResult> typedVisitor = visitor as ICobraVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitConstDeclaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ConstDeclarationContext constDeclaration() {
		ConstDeclarationContext _localctx = new ConstDeclarationContext(Context, State);
		EnterRule(_localctx, 26, RULE_constDeclaration);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 192;
			Match(CONST);
			State = 193;
			type();
			State = 194;
			Match(ID);
			State = 195;
			Match(ASSIGN);
			State = 196;
			assignmentExpression();
			State = 197;
			Match(SEMICOLON);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class VarDeclarationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public TypeContext type() {
			return GetRuleContext<TypeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ID() { return GetToken(CobraParser.ID, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEMICOLON() { return GetToken(CobraParser.SEMICOLON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ASSIGN() { return GetToken(CobraParser.ASSIGN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public AssignmentExpressionContext assignmentExpression() {
			return GetRuleContext<AssignmentExpressionContext>(0);
		}
		public VarDeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_varDeclaration; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ICobraListener typedListener = listener as ICobraListener;
			if (typedListener != null) typedListener.EnterVarDeclaration(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ICobraListener typedListener = listener as ICobraListener;
			if (typedListener != null) typedListener.ExitVarDeclaration(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICobraVisitor<TResult> typedVisitor = visitor as ICobraVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVarDeclaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public VarDeclarationContext varDeclaration() {
		VarDeclarationContext _localctx = new VarDeclarationContext(Context, State);
		EnterRule(_localctx, 28, RULE_varDeclaration);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 199;
			type();
			State = 200;
			Match(ID);
			State = 203;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==ASSIGN) {
				{
				State = 201;
				Match(ASSIGN);
				State = 202;
				assignmentExpression();
				}
			}

			State = 205;
			Match(SEMICOLON);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FunctionDeclarationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public TypeContext type() {
			return GetRuleContext<TypeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ID() { return GetToken(CobraParser.ID, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPAREN() { return GetToken(CobraParser.LPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPAREN() { return GetToken(CobraParser.RPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public BlockContext block() {
			return GetRuleContext<BlockContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ParameterListContext parameterList() {
			return GetRuleContext<ParameterListContext>(0);
		}
		public FunctionDeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_functionDeclaration; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ICobraListener typedListener = listener as ICobraListener;
			if (typedListener != null) typedListener.EnterFunctionDeclaration(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ICobraListener typedListener = listener as ICobraListener;
			if (typedListener != null) typedListener.ExitFunctionDeclaration(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICobraVisitor<TResult> typedVisitor = visitor as ICobraVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFunctionDeclaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FunctionDeclarationContext functionDeclaration() {
		FunctionDeclarationContext _localctx = new FunctionDeclarationContext(Context, State);
		EnterRule(_localctx, 30, RULE_functionDeclaration);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 207;
			type();
			State = 208;
			Match(ID);
			State = 209;
			Match(LPAREN);
			State = 211;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (((((_la - 29)) & ~0x3f) == 0 && ((1L << (_la - 29)) & 4503599627371487L) != 0)) {
				{
				State = 210;
				parameterList();
				}
			}

			State = 213;
			Match(RPAREN);
			State = 214;
			block();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExternDeclarationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EXTERNAL() { return GetToken(CobraParser.EXTERNAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TypeContext type() {
			return GetRuleContext<TypeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ID() { return GetToken(CobraParser.ID, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPAREN() { return GetToken(CobraParser.LPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPAREN() { return GetToken(CobraParser.RPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEMICOLON() { return GetToken(CobraParser.SEMICOLON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ParameterListContext parameterList() {
			return GetRuleContext<ParameterListContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AS() { return GetToken(CobraParser.AS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRING_LITERAL() { return GetToken(CobraParser.STRING_LITERAL, 0); }
		public ExternDeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_externDeclaration; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ICobraListener typedListener = listener as ICobraListener;
			if (typedListener != null) typedListener.EnterExternDeclaration(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ICobraListener typedListener = listener as ICobraListener;
			if (typedListener != null) typedListener.ExitExternDeclaration(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICobraVisitor<TResult> typedVisitor = visitor as ICobraVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExternDeclaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ExternDeclarationContext externDeclaration() {
		ExternDeclarationContext _localctx = new ExternDeclarationContext(Context, State);
		EnterRule(_localctx, 32, RULE_externDeclaration);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 216;
			Match(EXTERNAL);
			State = 217;
			type();
			State = 218;
			Match(ID);
			State = 219;
			Match(LPAREN);
			State = 221;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (((((_la - 29)) & ~0x3f) == 0 && ((1L << (_la - 29)) & 4503599627371487L) != 0)) {
				{
				State = 220;
				parameterList();
				}
			}

			State = 223;
			Match(RPAREN);
			State = 226;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==AS) {
				{
				State = 224;
				Match(AS);
				State = 225;
				Match(STRING_LITERAL);
				}
			}

			State = 228;
			Match(SEMICOLON);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TypeContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public PrimitiveTypeContext primitiveType() {
			return GetRuleContext<PrimitiveTypeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] LBRACKET() { return GetTokens(CobraParser.LBRACKET); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LBRACKET(int i) {
			return GetToken(CobraParser.LBRACKET, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] RBRACKET() { return GetTokens(CobraParser.RBRACKET); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RBRACKET(int i) {
			return GetToken(CobraParser.RBRACKET, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public SecondaryTypeContext secondaryType() {
			return GetRuleContext<SecondaryTypeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ID() { return GetToken(CobraParser.ID, 0); }
		public TypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_type; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ICobraListener typedListener = listener as ICobraListener;
			if (typedListener != null) typedListener.EnterType(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ICobraListener typedListener = listener as ICobraListener;
			if (typedListener != null) typedListener.ExitType(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICobraVisitor<TResult> typedVisitor = visitor as ICobraVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitType(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TypeContext type() {
		TypeContext _localctx = new TypeContext(Context, State);
		EnterRule(_localctx, 34, RULE_type);
		int _la;
		try {
			State = 247;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case INT:
			case FLOAT:
			case STRING:
			case BOOL:
			case VOID:
			case HANDLE:
				EnterOuterAlt(_localctx, 1);
				{
				State = 230;
				primitiveType();
				State = 235;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==LBRACKET) {
					{
					{
					State = 231;
					Match(LBRACKET);
					State = 232;
					Match(RBRACKET);
					}
					}
					State = 237;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				}
				break;
			case FUN:
			case MARKUP:
			case DICT:
				EnterOuterAlt(_localctx, 2);
				{
				State = 238;
				secondaryType();
				State = 243;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==LBRACKET) {
					{
					{
					State = 239;
					Match(LBRACKET);
					State = 240;
					Match(RBRACKET);
					}
					}
					State = 245;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				}
				break;
			case ID:
				EnterOuterAlt(_localctx, 3);
				{
				State = 246;
				Match(ID);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SecondaryTypeContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FUN() { return GetToken(CobraParser.FUN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MARKUP() { return GetToken(CobraParser.MARKUP, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DICT() { return GetToken(CobraParser.DICT, 0); }
		public SecondaryTypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_secondaryType; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ICobraListener typedListener = listener as ICobraListener;
			if (typedListener != null) typedListener.EnterSecondaryType(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ICobraListener typedListener = listener as ICobraListener;
			if (typedListener != null) typedListener.ExitSecondaryType(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICobraVisitor<TResult> typedVisitor = visitor as ICobraVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSecondaryType(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SecondaryTypeContext secondaryType() {
		SecondaryTypeContext _localctx = new SecondaryTypeContext(Context, State);
		EnterRule(_localctx, 36, RULE_secondaryType);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 249;
			_la = TokenStream.LA(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & 481036337152L) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PrimitiveTypeContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INT() { return GetToken(CobraParser.INT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FLOAT() { return GetToken(CobraParser.FLOAT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BOOL() { return GetToken(CobraParser.BOOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRING() { return GetToken(CobraParser.STRING, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VOID() { return GetToken(CobraParser.VOID, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode HANDLE() { return GetToken(CobraParser.HANDLE, 0); }
		public PrimitiveTypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_primitiveType; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ICobraListener typedListener = listener as ICobraListener;
			if (typedListener != null) typedListener.EnterPrimitiveType(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ICobraListener typedListener = listener as ICobraListener;
			if (typedListener != null) typedListener.ExitPrimitiveType(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICobraVisitor<TResult> typedVisitor = visitor as ICobraVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPrimitiveType(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PrimitiveTypeContext primitiveType() {
		PrimitiveTypeContext _localctx = new PrimitiveTypeContext(Context, State);
		EnterRule(_localctx, 38, RULE_primitiveType);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 251;
			_la = TokenStream.LA(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & 51002736640L) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ParameterListContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ParameterContext[] parameter() {
			return GetRuleContexts<ParameterContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ParameterContext parameter(int i) {
			return GetRuleContext<ParameterContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(CobraParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(CobraParser.COMMA, i);
		}
		public ParameterListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_parameterList; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ICobraListener typedListener = listener as ICobraListener;
			if (typedListener != null) typedListener.EnterParameterList(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ICobraListener typedListener = listener as ICobraListener;
			if (typedListener != null) typedListener.ExitParameterList(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICobraVisitor<TResult> typedVisitor = visitor as ICobraVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitParameterList(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ParameterListContext parameterList() {
		ParameterListContext _localctx = new ParameterListContext(Context, State);
		EnterRule(_localctx, 40, RULE_parameterList);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 253;
			parameter();
			State = 258;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 254;
				Match(COMMA);
				State = 255;
				parameter();
				}
				}
				State = 260;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ParameterContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public TypeContext type() {
			return GetRuleContext<TypeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ID() { return GetToken(CobraParser.ID, 0); }
		public ParameterContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_parameter; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ICobraListener typedListener = listener as ICobraListener;
			if (typedListener != null) typedListener.EnterParameter(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ICobraListener typedListener = listener as ICobraListener;
			if (typedListener != null) typedListener.ExitParameter(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICobraVisitor<TResult> typedVisitor = visitor as ICobraVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitParameter(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ParameterContext parameter() {
		ParameterContext _localctx = new ParameterContext(Context, State);
		EnterRule(_localctx, 42, RULE_parameter);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 261;
			type();
			State = 262;
			Match(ID);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public BlockContext block() {
			return GetRuleContext<BlockContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public DeclarationStatementContext declarationStatement() {
			return GetRuleContext<DeclarationStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public IfStatementContext ifStatement() {
			return GetRuleContext<IfStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public WhileStatementContext whileStatement() {
			return GetRuleContext<WhileStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public DoWhileStatementContext doWhileStatement() {
			return GetRuleContext<DoWhileStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ForStatementContext forStatement() {
			return GetRuleContext<ForStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ForEachStatementContext forEachStatement() {
			return GetRuleContext<ForEachStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public SwitchStatementContext switchStatement() {
			return GetRuleContext<SwitchStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public TryStatementContext tryStatement() {
			return GetRuleContext<TryStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public JumpStatementContext jumpStatement() {
			return GetRuleContext<JumpStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionStatementContext expressionStatement() {
			return GetRuleContext<ExpressionStatementContext>(0);
		}
		public StatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_statement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ICobraListener typedListener = listener as ICobraListener;
			if (typedListener != null) typedListener.EnterStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ICobraListener typedListener = listener as ICobraListener;
			if (typedListener != null) typedListener.ExitStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICobraVisitor<TResult> typedVisitor = visitor as ICobraVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StatementContext statement() {
		StatementContext _localctx = new StatementContext(Context, State);
		EnterRule(_localctx, 44, RULE_statement);
		try {
			State = 275;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,20,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 264;
				block();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 265;
				declarationStatement();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 266;
				ifStatement();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 267;
				whileStatement();
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 268;
				doWhileStatement();
				}
				break;
			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 269;
				forStatement();
				}
				break;
			case 7:
				EnterOuterAlt(_localctx, 7);
				{
				State = 270;
				forEachStatement();
				}
				break;
			case 8:
				EnterOuterAlt(_localctx, 8);
				{
				State = 271;
				switchStatement();
				}
				break;
			case 9:
				EnterOuterAlt(_localctx, 9);
				{
				State = 272;
				tryStatement();
				}
				break;
			case 10:
				EnterOuterAlt(_localctx, 10);
				{
				State = 273;
				jumpStatement();
				}
				break;
			case 11:
				EnterOuterAlt(_localctx, 11);
				{
				State = 274;
				expressionStatement();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DeclarationStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ConstDeclarationContext constDeclaration() {
			return GetRuleContext<ConstDeclarationContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public VarDeclarationContext varDeclaration() {
			return GetRuleContext<VarDeclarationContext>(0);
		}
		public DeclarationStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_declarationStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ICobraListener typedListener = listener as ICobraListener;
			if (typedListener != null) typedListener.EnterDeclarationStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ICobraListener typedListener = listener as ICobraListener;
			if (typedListener != null) typedListener.ExitDeclarationStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICobraVisitor<TResult> typedVisitor = visitor as ICobraVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDeclarationStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DeclarationStatementContext declarationStatement() {
		DeclarationStatementContext _localctx = new DeclarationStatementContext(Context, State);
		EnterRule(_localctx, 46, RULE_declarationStatement);
		try {
			State = 279;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case CONST:
				EnterOuterAlt(_localctx, 1);
				{
				State = 277;
				constDeclaration();
				}
				break;
			case INT:
			case FLOAT:
			case STRING:
			case BOOL:
			case VOID:
			case HANDLE:
			case FUN:
			case MARKUP:
			case DICT:
			case ID:
				EnterOuterAlt(_localctx, 2);
				{
				State = 278;
				varDeclaration();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BlockContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LBRACE() { return GetToken(CobraParser.LBRACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RBRACE() { return GetToken(CobraParser.RBRACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public DeclarationStatementContext[] declarationStatement() {
			return GetRuleContexts<DeclarationStatementContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public DeclarationStatementContext declarationStatement(int i) {
			return GetRuleContext<DeclarationStatementContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext[] statement() {
			return GetRuleContexts<StatementContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext statement(int i) {
			return GetRuleContext<StatementContext>(i);
		}
		public BlockContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_block; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ICobraListener typedListener = listener as ICobraListener;
			if (typedListener != null) typedListener.EnterBlock(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ICobraListener typedListener = listener as ICobraListener;
			if (typedListener != null) typedListener.ExitBlock(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICobraVisitor<TResult> typedVisitor = visitor as ICobraVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBlock(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public BlockContext block() {
		BlockContext _localctx = new BlockContext(Context, State);
		EnterRule(_localctx, 48, RULE_block);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 281;
			Match(LBRACE);
			State = 286;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & 2319369200736180064L) != 0) || ((((_la - 67)) & ~0x3f) == 0 && ((1L << (_la - 67)) & 508241L) != 0)) {
				{
				State = 284;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,22,Context) ) {
				case 1:
					{
					State = 282;
					declarationStatement();
					}
					break;
				case 2:
					{
					State = 283;
					statement();
					}
					break;
				}
				}
				State = 288;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 289;
			Match(RBRACE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IfStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IF() { return GetToken(CobraParser.IF, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPAREN() { return GetToken(CobraParser.LPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public AssignmentExpressionContext assignmentExpression() {
			return GetRuleContext<AssignmentExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPAREN() { return GetToken(CobraParser.RPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext[] statement() {
			return GetRuleContexts<StatementContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext statement(int i) {
			return GetRuleContext<StatementContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ELSE() { return GetToken(CobraParser.ELSE, 0); }
		public IfStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_ifStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ICobraListener typedListener = listener as ICobraListener;
			if (typedListener != null) typedListener.EnterIfStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ICobraListener typedListener = listener as ICobraListener;
			if (typedListener != null) typedListener.ExitIfStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICobraVisitor<TResult> typedVisitor = visitor as ICobraVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIfStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public IfStatementContext ifStatement() {
		IfStatementContext _localctx = new IfStatementContext(Context, State);
		EnterRule(_localctx, 50, RULE_ifStatement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 291;
			Match(IF);
			State = 292;
			Match(LPAREN);
			State = 293;
			assignmentExpression();
			State = 294;
			Match(RPAREN);
			State = 295;
			statement();
			State = 298;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,24,Context) ) {
			case 1:
				{
				State = 296;
				Match(ELSE);
				State = 297;
				statement();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class WhileStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WHILE() { return GetToken(CobraParser.WHILE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPAREN() { return GetToken(CobraParser.LPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public AssignmentExpressionContext assignmentExpression() {
			return GetRuleContext<AssignmentExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPAREN() { return GetToken(CobraParser.RPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext statement() {
			return GetRuleContext<StatementContext>(0);
		}
		public WhileStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_whileStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ICobraListener typedListener = listener as ICobraListener;
			if (typedListener != null) typedListener.EnterWhileStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ICobraListener typedListener = listener as ICobraListener;
			if (typedListener != null) typedListener.ExitWhileStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICobraVisitor<TResult> typedVisitor = visitor as ICobraVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitWhileStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public WhileStatementContext whileStatement() {
		WhileStatementContext _localctx = new WhileStatementContext(Context, State);
		EnterRule(_localctx, 52, RULE_whileStatement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 300;
			Match(WHILE);
			State = 301;
			Match(LPAREN);
			State = 302;
			assignmentExpression();
			State = 303;
			Match(RPAREN);
			State = 304;
			statement();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DoWhileStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DO() { return GetToken(CobraParser.DO, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext statement() {
			return GetRuleContext<StatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WHILE() { return GetToken(CobraParser.WHILE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPAREN() { return GetToken(CobraParser.LPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public AssignmentExpressionContext assignmentExpression() {
			return GetRuleContext<AssignmentExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPAREN() { return GetToken(CobraParser.RPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEMICOLON() { return GetToken(CobraParser.SEMICOLON, 0); }
		public DoWhileStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_doWhileStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ICobraListener typedListener = listener as ICobraListener;
			if (typedListener != null) typedListener.EnterDoWhileStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ICobraListener typedListener = listener as ICobraListener;
			if (typedListener != null) typedListener.ExitDoWhileStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICobraVisitor<TResult> typedVisitor = visitor as ICobraVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDoWhileStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DoWhileStatementContext doWhileStatement() {
		DoWhileStatementContext _localctx = new DoWhileStatementContext(Context, State);
		EnterRule(_localctx, 54, RULE_doWhileStatement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 306;
			Match(DO);
			State = 307;
			statement();
			State = 308;
			Match(WHILE);
			State = 309;
			Match(LPAREN);
			State = 310;
			assignmentExpression();
			State = 311;
			Match(RPAREN);
			State = 312;
			Match(SEMICOLON);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ForStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FOR() { return GetToken(CobraParser.FOR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPAREN() { return GetToken(CobraParser.LPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] SEMICOLON() { return GetTokens(CobraParser.SEMICOLON); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEMICOLON(int i) {
			return GetToken(CobraParser.SEMICOLON, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPAREN() { return GetToken(CobraParser.RPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext statement() {
			return GetRuleContext<StatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public VarDeclarationContext varDeclaration() {
			return GetRuleContext<VarDeclarationContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionStatementContext expressionStatement() {
			return GetRuleContext<ExpressionStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public AssignmentExpressionContext[] assignmentExpression() {
			return GetRuleContexts<AssignmentExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public AssignmentExpressionContext assignmentExpression(int i) {
			return GetRuleContext<AssignmentExpressionContext>(i);
		}
		public ForStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_forStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ICobraListener typedListener = listener as ICobraListener;
			if (typedListener != null) typedListener.EnterForStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ICobraListener typedListener = listener as ICobraListener;
			if (typedListener != null) typedListener.ExitForStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICobraVisitor<TResult> typedVisitor = visitor as ICobraVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitForStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ForStatementContext forStatement() {
		ForStatementContext _localctx = new ForStatementContext(Context, State);
		EnterRule(_localctx, 56, RULE_forStatement);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 314;
			Match(FOR);
			State = 315;
			Match(LPAREN);
			State = 319;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,25,Context) ) {
			case 1:
				{
				State = 316;
				varDeclaration();
				}
				break;
			case 2:
				{
				State = 317;
				expressionStatement();
				}
				break;
			case 3:
				{
				State = 318;
				Match(SEMICOLON);
				}
				break;
			}
			State = 322;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (((((_la - 22)) & ~0x3f) == 0 && ((1L << (_la - 22)) & -564603065928777853L) != 0)) {
				{
				State = 321;
				assignmentExpression();
				}
			}

			State = 324;
			Match(SEMICOLON);
			State = 326;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (((((_la - 22)) & ~0x3f) == 0 && ((1L << (_la - 22)) & -564603065928777853L) != 0)) {
				{
				State = 325;
				assignmentExpression();
				}
			}

			State = 328;
			Match(RPAREN);
			State = 329;
			statement();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ForEachStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FOR() { return GetToken(CobraParser.FOR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPAREN() { return GetToken(CobraParser.LPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TypeContext type() {
			return GetRuleContext<TypeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ID() { return GetToken(CobraParser.ID, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IN() { return GetToken(CobraParser.IN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public AssignmentExpressionContext assignmentExpression() {
			return GetRuleContext<AssignmentExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPAREN() { return GetToken(CobraParser.RPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext statement() {
			return GetRuleContext<StatementContext>(0);
		}
		public ForEachStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_forEachStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ICobraListener typedListener = listener as ICobraListener;
			if (typedListener != null) typedListener.EnterForEachStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ICobraListener typedListener = listener as ICobraListener;
			if (typedListener != null) typedListener.ExitForEachStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICobraVisitor<TResult> typedVisitor = visitor as ICobraVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitForEachStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ForEachStatementContext forEachStatement() {
		ForEachStatementContext _localctx = new ForEachStatementContext(Context, State);
		EnterRule(_localctx, 58, RULE_forEachStatement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 331;
			Match(FOR);
			State = 332;
			Match(LPAREN);
			State = 333;
			type();
			State = 334;
			Match(ID);
			State = 335;
			Match(IN);
			State = 336;
			assignmentExpression();
			State = 337;
			Match(RPAREN);
			State = 338;
			statement();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SwitchStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SWITCH() { return GetToken(CobraParser.SWITCH, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPAREN() { return GetToken(CobraParser.LPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public AssignmentExpressionContext assignmentExpression() {
			return GetRuleContext<AssignmentExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPAREN() { return GetToken(CobraParser.RPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LBRACE() { return GetToken(CobraParser.LBRACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RBRACE() { return GetToken(CobraParser.RBRACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public SwitchBlockContext[] switchBlock() {
			return GetRuleContexts<SwitchBlockContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public SwitchBlockContext switchBlock(int i) {
			return GetRuleContext<SwitchBlockContext>(i);
		}
		public SwitchStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_switchStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ICobraListener typedListener = listener as ICobraListener;
			if (typedListener != null) typedListener.EnterSwitchStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ICobraListener typedListener = listener as ICobraListener;
			if (typedListener != null) typedListener.ExitSwitchStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICobraVisitor<TResult> typedVisitor = visitor as ICobraVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSwitchStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SwitchStatementContext switchStatement() {
		SwitchStatementContext _localctx = new SwitchStatementContext(Context, State);
		EnterRule(_localctx, 60, RULE_switchStatement);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 340;
			Match(SWITCH);
			State = 341;
			Match(LPAREN);
			State = 342;
			assignmentExpression();
			State = 343;
			Match(RPAREN);
			State = 344;
			Match(LBRACE);
			State = 348;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==CASE || _la==DEFAULT) {
				{
				{
				State = 345;
				switchBlock();
				}
				}
				State = 350;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 351;
			Match(RBRACE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SwitchBlockContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public SwitchLabelContext[] switchLabel() {
			return GetRuleContexts<SwitchLabelContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public SwitchLabelContext switchLabel(int i) {
			return GetRuleContext<SwitchLabelContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext[] statement() {
			return GetRuleContexts<StatementContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext statement(int i) {
			return GetRuleContext<StatementContext>(i);
		}
		public SwitchBlockContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_switchBlock; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ICobraListener typedListener = listener as ICobraListener;
			if (typedListener != null) typedListener.EnterSwitchBlock(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ICobraListener typedListener = listener as ICobraListener;
			if (typedListener != null) typedListener.ExitSwitchBlock(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICobraVisitor<TResult> typedVisitor = visitor as ICobraVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSwitchBlock(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SwitchBlockContext switchBlock() {
		SwitchBlockContext _localctx = new SwitchBlockContext(Context, State);
		EnterRule(_localctx, 62, RULE_switchBlock);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 354;
			ErrorHandler.Sync(this);
			_alt = 1;
			do {
				switch (_alt) {
				case 1:
					{
					{
					State = 353;
					switchLabel();
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 356;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,29,Context);
			} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER );
			State = 361;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & 2319369200736180064L) != 0) || ((((_la - 67)) & ~0x3f) == 0 && ((1L << (_la - 67)) & 508241L) != 0)) {
				{
				{
				State = 358;
				statement();
				}
				}
				State = 363;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SwitchLabelContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CASE() { return GetToken(CobraParser.CASE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public AssignmentExpressionContext assignmentExpression() {
			return GetRuleContext<AssignmentExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COLON() { return GetToken(CobraParser.COLON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DEFAULT() { return GetToken(CobraParser.DEFAULT, 0); }
		public SwitchLabelContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_switchLabel; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ICobraListener typedListener = listener as ICobraListener;
			if (typedListener != null) typedListener.EnterSwitchLabel(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ICobraListener typedListener = listener as ICobraListener;
			if (typedListener != null) typedListener.ExitSwitchLabel(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICobraVisitor<TResult> typedVisitor = visitor as ICobraVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSwitchLabel(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SwitchLabelContext switchLabel() {
		SwitchLabelContext _localctx = new SwitchLabelContext(Context, State);
		EnterRule(_localctx, 64, RULE_switchLabel);
		try {
			State = 370;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case CASE:
				EnterOuterAlt(_localctx, 1);
				{
				State = 364;
				Match(CASE);
				State = 365;
				assignmentExpression();
				State = 366;
				Match(COLON);
				}
				break;
			case DEFAULT:
				EnterOuterAlt(_localctx, 2);
				{
				State = 368;
				Match(DEFAULT);
				State = 369;
				Match(COLON);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TryStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TRY() { return GetToken(CobraParser.TRY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public BlockContext[] block() {
			return GetRuleContexts<BlockContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public BlockContext block(int i) {
			return GetRuleContext<BlockContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CATCH() { return GetToken(CobraParser.CATCH, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPAREN() { return GetToken(CobraParser.LPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ParameterContext parameter() {
			return GetRuleContext<ParameterContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPAREN() { return GetToken(CobraParser.RPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FINALLY() { return GetToken(CobraParser.FINALLY, 0); }
		public TryStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_tryStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ICobraListener typedListener = listener as ICobraListener;
			if (typedListener != null) typedListener.EnterTryStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ICobraListener typedListener = listener as ICobraListener;
			if (typedListener != null) typedListener.ExitTryStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICobraVisitor<TResult> typedVisitor = visitor as ICobraVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTryStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TryStatementContext tryStatement() {
		TryStatementContext _localctx = new TryStatementContext(Context, State);
		EnterRule(_localctx, 66, RULE_tryStatement);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 372;
			Match(TRY);
			State = 373;
			block();
			State = 380;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==CATCH) {
				{
				State = 374;
				Match(CATCH);
				State = 375;
				Match(LPAREN);
				State = 376;
				parameter();
				State = 377;
				Match(RPAREN);
				State = 378;
				block();
				}
			}

			State = 384;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==FINALLY) {
				{
				State = 382;
				Match(FINALLY);
				State = 383;
				block();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class JumpStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RETURN() { return GetToken(CobraParser.RETURN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEMICOLON() { return GetToken(CobraParser.SEMICOLON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public AssignmentExpressionContext assignmentExpression() {
			return GetRuleContext<AssignmentExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BREAK() { return GetToken(CobraParser.BREAK, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CONTINUE() { return GetToken(CobraParser.CONTINUE, 0); }
		public JumpStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_jumpStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ICobraListener typedListener = listener as ICobraListener;
			if (typedListener != null) typedListener.EnterJumpStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ICobraListener typedListener = listener as ICobraListener;
			if (typedListener != null) typedListener.ExitJumpStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICobraVisitor<TResult> typedVisitor = visitor as ICobraVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitJumpStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public JumpStatementContext jumpStatement() {
		JumpStatementContext _localctx = new JumpStatementContext(Context, State);
		EnterRule(_localctx, 68, RULE_jumpStatement);
		int _la;
		try {
			State = 395;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case RETURN:
				EnterOuterAlt(_localctx, 1);
				{
				State = 386;
				Match(RETURN);
				State = 388;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (((((_la - 22)) & ~0x3f) == 0 && ((1L << (_la - 22)) & -564603065928777853L) != 0)) {
					{
					State = 387;
					assignmentExpression();
					}
				}

				State = 390;
				Match(SEMICOLON);
				}
				break;
			case BREAK:
				EnterOuterAlt(_localctx, 2);
				{
				State = 391;
				Match(BREAK);
				State = 392;
				Match(SEMICOLON);
				}
				break;
			case CONTINUE:
				EnterOuterAlt(_localctx, 3);
				{
				State = 393;
				Match(CONTINUE);
				State = 394;
				Match(SEMICOLON);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExpressionStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public AssignmentExpressionContext assignmentExpression() {
			return GetRuleContext<AssignmentExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEMICOLON() { return GetToken(CobraParser.SEMICOLON, 0); }
		public ExpressionStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expressionStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ICobraListener typedListener = listener as ICobraListener;
			if (typedListener != null) typedListener.EnterExpressionStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ICobraListener typedListener = listener as ICobraListener;
			if (typedListener != null) typedListener.ExitExpressionStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICobraVisitor<TResult> typedVisitor = visitor as ICobraVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExpressionStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ExpressionStatementContext expressionStatement() {
		ExpressionStatementContext _localctx = new ExpressionStatementContext(Context, State);
		EnterRule(_localctx, 70, RULE_expressionStatement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 397;
			assignmentExpression();
			State = 398;
			Match(SEMICOLON);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AssignmentExpressionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public LeftHandSideContext leftHandSide() {
			return GetRuleContext<LeftHandSideContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public AssignmentOperatorContext assignmentOperator() {
			return GetRuleContext<AssignmentOperatorContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public AssignmentExpressionContext[] assignmentExpression() {
			return GetRuleContexts<AssignmentExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public AssignmentExpressionContext assignmentExpression(int i) {
			return GetRuleContext<AssignmentExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public BinaryExpressionContext binaryExpression() {
			return GetRuleContext<BinaryExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode QUESTION() { return GetToken(CobraParser.QUESTION, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COLON() { return GetToken(CobraParser.COLON, 0); }
		public AssignmentExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_assignmentExpression; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ICobraListener typedListener = listener as ICobraListener;
			if (typedListener != null) typedListener.EnterAssignmentExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ICobraListener typedListener = listener as ICobraListener;
			if (typedListener != null) typedListener.ExitAssignmentExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICobraVisitor<TResult> typedVisitor = visitor as ICobraVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAssignmentExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AssignmentExpressionContext assignmentExpression() {
		AssignmentExpressionContext _localctx = new AssignmentExpressionContext(Context, State);
		EnterRule(_localctx, 72, RULE_assignmentExpression);
		int _la;
		try {
			State = 412;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,37,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 400;
				leftHandSide();
				State = 401;
				assignmentOperator();
				State = 402;
				assignmentExpression();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 404;
				binaryExpression();
				State = 410;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==QUESTION) {
					{
					State = 405;
					Match(QUESTION);
					State = 406;
					assignmentExpression();
					State = 407;
					Match(COLON);
					State = 408;
					assignmentExpression();
					}
				}

				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BinaryExpressionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] OR() { return GetTokens(CobraParser.OR); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OR(int i) {
			return GetToken(CobraParser.OR, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public PostfixExpressionContext[] postfixExpression() {
			return GetRuleContexts<PostfixExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public PostfixExpressionContext postfixExpression(int i) {
			return GetRuleContext<PostfixExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] AND() { return GetTokens(CobraParser.AND); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AND(int i) {
			return GetToken(CobraParser.AND, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public UnaryOpContext[] unaryOp() {
			return GetRuleContexts<UnaryOpContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public UnaryOpContext unaryOp(int i) {
			return GetRuleContext<UnaryOpContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] BITWISE_OR() { return GetTokens(CobraParser.BITWISE_OR); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BITWISE_OR(int i) {
			return GetToken(CobraParser.BITWISE_OR, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] BITWISE_XOR() { return GetTokens(CobraParser.BITWISE_XOR); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BITWISE_XOR(int i) {
			return GetToken(CobraParser.BITWISE_XOR, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] BITWISE_AND() { return GetTokens(CobraParser.BITWISE_AND); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BITWISE_AND(int i) {
			return GetToken(CobraParser.BITWISE_AND, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] EQ() { return GetTokens(CobraParser.EQ); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EQ(int i) {
			return GetToken(CobraParser.EQ, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] NEQ() { return GetTokens(CobraParser.NEQ); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NEQ(int i) {
			return GetToken(CobraParser.NEQ, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] GT() { return GetTokens(CobraParser.GT); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GT(int i) {
			return GetToken(CobraParser.GT, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] LT() { return GetTokens(CobraParser.LT); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LT(int i) {
			return GetToken(CobraParser.LT, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] GTE() { return GetTokens(CobraParser.GTE); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GTE(int i) {
			return GetToken(CobraParser.GTE, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] LTE() { return GetTokens(CobraParser.LTE); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LTE(int i) {
			return GetToken(CobraParser.LTE, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] SHL() { return GetTokens(CobraParser.SHL); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SHL(int i) {
			return GetToken(CobraParser.SHL, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] SHR() { return GetTokens(CobraParser.SHR); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SHR(int i) {
			return GetToken(CobraParser.SHR, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] PLUS() { return GetTokens(CobraParser.PLUS); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PLUS(int i) {
			return GetToken(CobraParser.PLUS, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] MINUS() { return GetTokens(CobraParser.MINUS); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MINUS(int i) {
			return GetToken(CobraParser.MINUS, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] MUL() { return GetTokens(CobraParser.MUL); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MUL(int i) {
			return GetToken(CobraParser.MUL, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] DIV() { return GetTokens(CobraParser.DIV); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DIV(int i) {
			return GetToken(CobraParser.DIV, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] MOD() { return GetTokens(CobraParser.MOD); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MOD(int i) {
			return GetToken(CobraParser.MOD, i);
		}
		public BinaryExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_binaryExpression; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ICobraListener typedListener = listener as ICobraListener;
			if (typedListener != null) typedListener.EnterBinaryExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ICobraListener typedListener = listener as ICobraListener;
			if (typedListener != null) typedListener.ExitBinaryExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICobraVisitor<TResult> typedVisitor = visitor as ICobraVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBinaryExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public BinaryExpressionContext binaryExpression() {
		BinaryExpressionContext _localctx = new BinaryExpressionContext(Context, State);
		EnterRule(_localctx, 74, RULE_binaryExpression);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			{
			{
			{
			{
			{
			{
			{
			{
			{
			{
			State = 417;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (((((_la - 42)) & ~0x3f) == 0 && ((1L << (_la - 42)) & 34081795L) != 0)) {
				{
				{
				State = 414;
				unaryOp();
				}
				}
				State = 419;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 420;
			postfixExpression();
			State = 431;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & 123145302310912L) != 0)) {
				{
				{
				State = 421;
				_la = TokenStream.LA(1);
				if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & 123145302310912L) != 0)) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 425;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (((((_la - 42)) & ~0x3f) == 0 && ((1L << (_la - 42)) & 34081795L) != 0)) {
					{
					{
					State = 422;
					unaryOp();
					}
					}
					State = 427;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 428;
				postfixExpression();
				}
				}
				State = 433;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
			State = 444;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==PLUS || _la==MINUS) {
				{
				{
				State = 434;
				_la = TokenStream.LA(1);
				if ( !(_la==PLUS || _la==MINUS) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 438;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (((((_la - 42)) & ~0x3f) == 0 && ((1L << (_la - 42)) & 34081795L) != 0)) {
					{
					{
					State = 435;
					unaryOp();
					}
					}
					State = 440;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 441;
				postfixExpression();
				}
				}
				State = 446;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
			State = 457;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==SHL || _la==SHR) {
				{
				{
				State = 447;
				_la = TokenStream.LA(1);
				if ( !(_la==SHL || _la==SHR) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 451;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (((((_la - 42)) & ~0x3f) == 0 && ((1L << (_la - 42)) & 34081795L) != 0)) {
					{
					{
					State = 448;
					unaryOp();
					}
					}
					State = 453;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 454;
				postfixExpression();
				}
				}
				State = 459;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
			State = 470;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & 2161727821137838080L) != 0)) {
				{
				{
				State = 460;
				_la = TokenStream.LA(1);
				if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & 2161727821137838080L) != 0)) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 464;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (((((_la - 42)) & ~0x3f) == 0 && ((1L << (_la - 42)) & 34081795L) != 0)) {
					{
					{
					State = 461;
					unaryOp();
					}
					}
					State = 466;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 467;
				postfixExpression();
				}
				}
				State = 472;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
			State = 483;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==EQ || _la==NEQ) {
				{
				{
				State = 473;
				_la = TokenStream.LA(1);
				if ( !(_la==EQ || _la==NEQ) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 477;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (((((_la - 42)) & ~0x3f) == 0 && ((1L << (_la - 42)) & 34081795L) != 0)) {
					{
					{
					State = 474;
					unaryOp();
					}
					}
					State = 479;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 480;
				postfixExpression();
				}
				}
				State = 485;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
			State = 496;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==BITWISE_AND) {
				{
				{
				State = 486;
				Match(BITWISE_AND);
				State = 490;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (((((_la - 42)) & ~0x3f) == 0 && ((1L << (_la - 42)) & 34081795L) != 0)) {
					{
					{
					State = 487;
					unaryOp();
					}
					}
					State = 492;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 493;
				postfixExpression();
				}
				}
				State = 498;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
			State = 509;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==BITWISE_XOR) {
				{
				{
				State = 499;
				Match(BITWISE_XOR);
				State = 503;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (((((_la - 42)) & ~0x3f) == 0 && ((1L << (_la - 42)) & 34081795L) != 0)) {
					{
					{
					State = 500;
					unaryOp();
					}
					}
					State = 505;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 506;
				postfixExpression();
				}
				}
				State = 511;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
			State = 522;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==BITWISE_OR) {
				{
				{
				State = 512;
				Match(BITWISE_OR);
				State = 516;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (((((_la - 42)) & ~0x3f) == 0 && ((1L << (_la - 42)) & 34081795L) != 0)) {
					{
					{
					State = 513;
					unaryOp();
					}
					}
					State = 518;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 519;
				postfixExpression();
				}
				}
				State = 524;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
			State = 535;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==AND) {
				{
				{
				State = 525;
				Match(AND);
				State = 529;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (((((_la - 42)) & ~0x3f) == 0 && ((1L << (_la - 42)) & 34081795L) != 0)) {
					{
					{
					State = 526;
					unaryOp();
					}
					}
					State = 531;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 532;
				postfixExpression();
				}
				}
				State = 537;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
			State = 548;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==OR) {
				{
				{
				State = 538;
				Match(OR);
				State = 542;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (((((_la - 42)) & ~0x3f) == 0 && ((1L << (_la - 42)) & 34081795L) != 0)) {
					{
					{
					State = 539;
					unaryOp();
					}
					}
					State = 544;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 545;
				postfixExpression();
				}
				}
				State = 550;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class UnaryOpContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PLUS() { return GetToken(CobraParser.PLUS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MINUS() { return GetToken(CobraParser.MINUS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NOT() { return GetToken(CobraParser.NOT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BITWISE_NOT() { return GetToken(CobraParser.BITWISE_NOT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INC() { return GetToken(CobraParser.INC, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DEC() { return GetToken(CobraParser.DEC, 0); }
		public UnaryOpContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_unaryOp; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ICobraListener typedListener = listener as ICobraListener;
			if (typedListener != null) typedListener.EnterUnaryOp(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ICobraListener typedListener = listener as ICobraListener;
			if (typedListener != null) typedListener.ExitUnaryOp(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICobraVisitor<TResult> typedVisitor = visitor as ICobraVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitUnaryOp(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public UnaryOpContext unaryOp() {
		UnaryOpContext _localctx = new UnaryOpContext(Context, State);
		EnterRule(_localctx, 76, RULE_unaryOp);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 551;
			_la = TokenStream.LA(1);
			if ( !(((((_la - 42)) & ~0x3f) == 0 && ((1L << (_la - 42)) & 34081795L) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PostfixExpressionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public PrimaryContext primary() {
			return GetRuleContext<PrimaryContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] LPAREN() { return GetTokens(CobraParser.LPAREN); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPAREN(int i) {
			return GetToken(CobraParser.LPAREN, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] RPAREN() { return GetTokens(CobraParser.RPAREN); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPAREN(int i) {
			return GetToken(CobraParser.RPAREN, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] LBRACKET() { return GetTokens(CobraParser.LBRACKET); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LBRACKET(int i) {
			return GetToken(CobraParser.LBRACKET, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public AssignmentExpressionContext[] assignmentExpression() {
			return GetRuleContexts<AssignmentExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public AssignmentExpressionContext assignmentExpression(int i) {
			return GetRuleContext<AssignmentExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] RBRACKET() { return GetTokens(CobraParser.RBRACKET); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RBRACKET(int i) {
			return GetToken(CobraParser.RBRACKET, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] DOT() { return GetTokens(CobraParser.DOT); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DOT(int i) {
			return GetToken(CobraParser.DOT, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] ID() { return GetTokens(CobraParser.ID); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ID(int i) {
			return GetToken(CobraParser.ID, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] INC() { return GetTokens(CobraParser.INC); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INC(int i) {
			return GetToken(CobraParser.INC, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] DEC() { return GetTokens(CobraParser.DEC); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DEC(int i) {
			return GetToken(CobraParser.DEC, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ArgumentListContext[] argumentList() {
			return GetRuleContexts<ArgumentListContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ArgumentListContext argumentList(int i) {
			return GetRuleContext<ArgumentListContext>(i);
		}
		public PostfixExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_postfixExpression; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ICobraListener typedListener = listener as ICobraListener;
			if (typedListener != null) typedListener.EnterPostfixExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ICobraListener typedListener = listener as ICobraListener;
			if (typedListener != null) typedListener.ExitPostfixExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICobraVisitor<TResult> typedVisitor = visitor as ICobraVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPostfixExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PostfixExpressionContext postfixExpression() {
		PostfixExpressionContext _localctx = new PostfixExpressionContext(Context, State);
		EnterRule(_localctx, 78, RULE_postfixExpression);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 553;
			primary();
			State = 569;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (((((_la - 52)) & ~0x3f) == 0 && ((1L << (_la - 52)) & 277348355L) != 0)) {
				{
				State = 567;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case LPAREN:
					{
					State = 554;
					Match(LPAREN);
					State = 556;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					if (((((_la - 22)) & ~0x3f) == 0 && ((1L << (_la - 22)) & -564603065928777853L) != 0)) {
						{
						State = 555;
						argumentList();
						}
					}

					State = 558;
					Match(RPAREN);
					}
					break;
				case LBRACKET:
					{
					State = 559;
					Match(LBRACKET);
					State = 560;
					assignmentExpression();
					State = 561;
					Match(RBRACKET);
					}
					break;
				case DOT:
					{
					State = 563;
					Match(DOT);
					State = 564;
					Match(ID);
					}
					break;
				case INC:
					{
					State = 565;
					Match(INC);
					}
					break;
				case DEC:
					{
					State = 566;
					Match(DEC);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				State = 571;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LeftHandSideContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public PrimaryContext primary() {
			return GetRuleContext<PrimaryContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] LBRACKET() { return GetTokens(CobraParser.LBRACKET); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LBRACKET(int i) {
			return GetToken(CobraParser.LBRACKET, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public AssignmentExpressionContext[] assignmentExpression() {
			return GetRuleContexts<AssignmentExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public AssignmentExpressionContext assignmentExpression(int i) {
			return GetRuleContext<AssignmentExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] RBRACKET() { return GetTokens(CobraParser.RBRACKET); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RBRACKET(int i) {
			return GetToken(CobraParser.RBRACKET, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] DOT() { return GetTokens(CobraParser.DOT); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DOT(int i) {
			return GetToken(CobraParser.DOT, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] ID() { return GetTokens(CobraParser.ID); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ID(int i) {
			return GetToken(CobraParser.ID, i);
		}
		public LeftHandSideContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_leftHandSide; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ICobraListener typedListener = listener as ICobraListener;
			if (typedListener != null) typedListener.EnterLeftHandSide(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ICobraListener typedListener = listener as ICobraListener;
			if (typedListener != null) typedListener.ExitLeftHandSide(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICobraVisitor<TResult> typedVisitor = visitor as ICobraVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLeftHandSide(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LeftHandSideContext leftHandSide() {
		LeftHandSideContext _localctx = new LeftHandSideContext(Context, State);
		EnterRule(_localctx, 80, RULE_leftHandSide);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 572;
			primary();
			State = 581;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==LBRACKET || _la==DOT) {
				{
				State = 579;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case LBRACKET:
					{
					State = 573;
					Match(LBRACKET);
					State = 574;
					assignmentExpression();
					State = 575;
					Match(RBRACKET);
					}
					break;
				case DOT:
					{
					State = 577;
					Match(DOT);
					State = 578;
					Match(ID);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				State = 583;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PrimaryContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPAREN() { return GetToken(CobraParser.LPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public AssignmentExpressionContext assignmentExpression() {
			return GetRuleContext<AssignmentExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPAREN() { return GetToken(CobraParser.RPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public LiteralContext literal() {
			return GetRuleContext<LiteralContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ID() { return GetToken(CobraParser.ID, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode THIS() { return GetToken(CobraParser.THIS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public NewExpressionContext newExpression() {
			return GetRuleContext<NewExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public FunctionExpressionContext functionExpression() {
			return GetRuleContext<FunctionExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ArrayLiteralContext arrayLiteral() {
			return GetRuleContext<ArrayLiteralContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public DictLiteralContext dictLiteral() {
			return GetRuleContext<DictLiteralContext>(0);
		}
		public PrimaryContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_primary; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ICobraListener typedListener = listener as ICobraListener;
			if (typedListener != null) typedListener.EnterPrimary(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ICobraListener typedListener = listener as ICobraListener;
			if (typedListener != null) typedListener.ExitPrimary(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICobraVisitor<TResult> typedVisitor = visitor as ICobraVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPrimary(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PrimaryContext primary() {
		PrimaryContext _localctx = new PrimaryContext(Context, State);
		EnterRule(_localctx, 82, RULE_primary);
		try {
			State = 595;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,64,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 584;
				Match(LPAREN);
				State = 585;
				assignmentExpression();
				State = 586;
				Match(RPAREN);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 588;
				literal();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 589;
				Match(ID);
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 590;
				Match(THIS);
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 591;
				newExpression();
				}
				break;
			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 592;
				functionExpression();
				}
				break;
			case 7:
				EnterOuterAlt(_localctx, 7);
				{
				State = 593;
				arrayLiteral();
				}
				break;
			case 8:
				EnterOuterAlt(_localctx, 8);
				{
				State = 594;
				dictLiteral();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NewExpressionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NEW() { return GetToken(CobraParser.NEW, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ID() { return GetToken(CobraParser.ID, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPAREN() { return GetToken(CobraParser.LPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPAREN() { return GetToken(CobraParser.RPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ArgumentListContext argumentList() {
			return GetRuleContext<ArgumentListContext>(0);
		}
		public NewExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_newExpression; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ICobraListener typedListener = listener as ICobraListener;
			if (typedListener != null) typedListener.EnterNewExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ICobraListener typedListener = listener as ICobraListener;
			if (typedListener != null) typedListener.ExitNewExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICobraVisitor<TResult> typedVisitor = visitor as ICobraVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNewExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public NewExpressionContext newExpression() {
		NewExpressionContext _localctx = new NewExpressionContext(Context, State);
		EnterRule(_localctx, 84, RULE_newExpression);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 597;
			Match(NEW);
			State = 598;
			Match(ID);
			State = 599;
			Match(LPAREN);
			State = 601;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (((((_la - 22)) & ~0x3f) == 0 && ((1L << (_la - 22)) & -564603065928777853L) != 0)) {
				{
				State = 600;
				argumentList();
				}
			}

			State = 603;
			Match(RPAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ArgumentListContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public AssignmentExpressionContext[] assignmentExpression() {
			return GetRuleContexts<AssignmentExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public AssignmentExpressionContext assignmentExpression(int i) {
			return GetRuleContext<AssignmentExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(CobraParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(CobraParser.COMMA, i);
		}
		public ArgumentListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_argumentList; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ICobraListener typedListener = listener as ICobraListener;
			if (typedListener != null) typedListener.EnterArgumentList(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ICobraListener typedListener = listener as ICobraListener;
			if (typedListener != null) typedListener.ExitArgumentList(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICobraVisitor<TResult> typedVisitor = visitor as ICobraVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitArgumentList(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ArgumentListContext argumentList() {
		ArgumentListContext _localctx = new ArgumentListContext(Context, State);
		EnterRule(_localctx, 86, RULE_argumentList);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 605;
			assignmentExpression();
			State = 610;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 606;
				Match(COMMA);
				State = 607;
				assignmentExpression();
				}
				}
				State = 612;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FunctionExpressionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public TypeContext type() {
			return GetRuleContext<TypeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPAREN() { return GetToken(CobraParser.LPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPAREN() { return GetToken(CobraParser.RPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public BlockContext block() {
			return GetRuleContext<BlockContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ParameterListContext parameterList() {
			return GetRuleContext<ParameterListContext>(0);
		}
		public FunctionExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_functionExpression; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ICobraListener typedListener = listener as ICobraListener;
			if (typedListener != null) typedListener.EnterFunctionExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ICobraListener typedListener = listener as ICobraListener;
			if (typedListener != null) typedListener.ExitFunctionExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICobraVisitor<TResult> typedVisitor = visitor as ICobraVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFunctionExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FunctionExpressionContext functionExpression() {
		FunctionExpressionContext _localctx = new FunctionExpressionContext(Context, State);
		EnterRule(_localctx, 88, RULE_functionExpression);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 613;
			type();
			State = 614;
			Match(LPAREN);
			State = 616;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (((((_la - 29)) & ~0x3f) == 0 && ((1L << (_la - 29)) & 4503599627371487L) != 0)) {
				{
				State = 615;
				parameterList();
				}
			}

			State = 618;
			Match(RPAREN);
			State = 619;
			block();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ArrayLiteralContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LBRACKET() { return GetToken(CobraParser.LBRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RBRACKET() { return GetToken(CobraParser.RBRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public AssignmentExpressionContext[] assignmentExpression() {
			return GetRuleContexts<AssignmentExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public AssignmentExpressionContext assignmentExpression(int i) {
			return GetRuleContext<AssignmentExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(CobraParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(CobraParser.COMMA, i);
		}
		public ArrayLiteralContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_arrayLiteral; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ICobraListener typedListener = listener as ICobraListener;
			if (typedListener != null) typedListener.EnterArrayLiteral(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ICobraListener typedListener = listener as ICobraListener;
			if (typedListener != null) typedListener.ExitArrayLiteral(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICobraVisitor<TResult> typedVisitor = visitor as ICobraVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitArrayLiteral(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ArrayLiteralContext arrayLiteral() {
		ArrayLiteralContext _localctx = new ArrayLiteralContext(Context, State);
		EnterRule(_localctx, 90, RULE_arrayLiteral);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 621;
			Match(LBRACKET);
			State = 630;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (((((_la - 22)) & ~0x3f) == 0 && ((1L << (_la - 22)) & -564603065928777853L) != 0)) {
				{
				State = 622;
				assignmentExpression();
				State = 627;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==COMMA) {
					{
					{
					State = 623;
					Match(COMMA);
					State = 624;
					assignmentExpression();
					}
					}
					State = 629;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				}
			}

			State = 632;
			Match(RBRACKET);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DictLiteralContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LBRACE() { return GetToken(CobraParser.LBRACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RBRACE() { return GetToken(CobraParser.RBRACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public DictEntryContext[] dictEntry() {
			return GetRuleContexts<DictEntryContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public DictEntryContext dictEntry(int i) {
			return GetRuleContext<DictEntryContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(CobraParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(CobraParser.COMMA, i);
		}
		public DictLiteralContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_dictLiteral; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ICobraListener typedListener = listener as ICobraListener;
			if (typedListener != null) typedListener.EnterDictLiteral(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ICobraListener typedListener = listener as ICobraListener;
			if (typedListener != null) typedListener.ExitDictLiteral(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICobraVisitor<TResult> typedVisitor = visitor as ICobraVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDictLiteral(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DictLiteralContext dictLiteral() {
		DictLiteralContext _localctx = new DictLiteralContext(Context, State);
		EnterRule(_localctx, 92, RULE_dictLiteral);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 634;
			Match(LBRACE);
			State = 644;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==ID || _la==STRING_LITERAL) {
				{
				State = 635;
				dictEntry();
				State = 641;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==COMMA) {
					{
					State = 639;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,70,Context) ) {
					case 1:
						{
						State = 636;
						Match(COMMA);
						State = 637;
						dictEntry();
						}
						break;
					case 2:
						{
						State = 638;
						Match(COMMA);
						}
						break;
					}
					}
					State = 643;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				}
			}

			State = 646;
			Match(RBRACE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DictEntryContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COLON() { return GetToken(CobraParser.COLON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public AssignmentExpressionContext assignmentExpression() {
			return GetRuleContext<AssignmentExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRING_LITERAL() { return GetToken(CobraParser.STRING_LITERAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ID() { return GetToken(CobraParser.ID, 0); }
		public DictEntryContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_dictEntry; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ICobraListener typedListener = listener as ICobraListener;
			if (typedListener != null) typedListener.EnterDictEntry(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ICobraListener typedListener = listener as ICobraListener;
			if (typedListener != null) typedListener.ExitDictEntry(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICobraVisitor<TResult> typedVisitor = visitor as ICobraVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDictEntry(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DictEntryContext dictEntry() {
		DictEntryContext _localctx = new DictEntryContext(Context, State);
		EnterRule(_localctx, 94, RULE_dictEntry);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 648;
			_la = TokenStream.LA(1);
			if ( !(_la==ID || _la==STRING_LITERAL) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			State = 649;
			Match(COLON);
			State = 650;
			assignmentExpression();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LiteralContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INTEGER() { return GetToken(CobraParser.INTEGER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FLOAT_LITERAL() { return GetToken(CobraParser.FLOAT_LITERAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRING_LITERAL() { return GetToken(CobraParser.STRING_LITERAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BACKTICK_STRING() { return GetToken(CobraParser.BACKTICK_STRING, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TRUE() { return GetToken(CobraParser.TRUE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FALSE() { return GetToken(CobraParser.FALSE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NULL() { return GetToken(CobraParser.NULL, 0); }
		public LiteralContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_literal; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ICobraListener typedListener = listener as ICobraListener;
			if (typedListener != null) typedListener.EnterLiteral(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ICobraListener typedListener = listener as ICobraListener;
			if (typedListener != null) typedListener.ExitLiteral(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICobraVisitor<TResult> typedVisitor = visitor as ICobraVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLiteral(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LiteralContext literal() {
		LiteralContext _localctx = new LiteralContext(Context, State);
		EnterRule(_localctx, 96, RULE_literal);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 652;
			_la = TokenStream.LA(1);
			if ( !(((((_la - 34)) & ~0x3f) == 0 && ((1L << (_la - 34)) & 4222124650659937L) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AssignmentOperatorContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ASSIGN() { return GetToken(CobraParser.ASSIGN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PLUS_ASSIGN() { return GetToken(CobraParser.PLUS_ASSIGN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MINUS_ASSIGN() { return GetToken(CobraParser.MINUS_ASSIGN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MUL_ASSIGN() { return GetToken(CobraParser.MUL_ASSIGN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DIV_ASSIGN() { return GetToken(CobraParser.DIV_ASSIGN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MOD_ASSIGN() { return GetToken(CobraParser.MOD_ASSIGN, 0); }
		public AssignmentOperatorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_assignmentOperator; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ICobraListener typedListener = listener as ICobraListener;
			if (typedListener != null) typedListener.EnterAssignmentOperator(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ICobraListener typedListener = listener as ICobraListener;
			if (typedListener != null) typedListener.ExitAssignmentOperator(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICobraVisitor<TResult> typedVisitor = visitor as ICobraVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAssignmentOperator(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AssignmentOperatorContext assignmentOperator() {
		AssignmentOperatorContext _localctx = new AssignmentOperatorContext(Context, State);
		EnterRule(_localctx, 98, RULE_assignmentOperator);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 654;
			_la = TokenStream.LA(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & 22377260648497152L) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	private static int[] _serializedATN = {
		4,1,88,657,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,2,6,7,6,2,7,
		7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,13,7,13,2,14,7,14,
		2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,19,2,20,7,20,2,21,7,21,
		2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,26,7,26,2,27,7,27,2,28,7,28,
		2,29,7,29,2,30,7,30,2,31,7,31,2,32,7,32,2,33,7,33,2,34,7,34,2,35,7,35,
		2,36,7,36,2,37,7,37,2,38,7,38,2,39,7,39,2,40,7,40,2,41,7,41,2,42,7,42,
		2,43,7,43,2,44,7,44,2,45,7,45,2,46,7,46,2,47,7,47,2,48,7,48,2,49,7,49,
		1,0,1,0,1,0,1,0,1,0,5,0,106,8,0,10,0,12,0,109,9,0,1,0,1,0,1,1,1,1,1,1,
		1,1,1,2,1,2,1,2,1,2,1,3,1,3,1,3,1,3,1,3,1,3,5,3,127,8,3,10,3,12,3,130,
		9,3,1,3,1,3,1,4,1,4,1,4,5,4,137,8,4,10,4,12,4,140,9,4,1,5,1,5,1,5,1,5,
		1,5,3,5,147,8,5,1,6,1,6,1,6,1,6,5,6,153,8,6,10,6,12,6,156,9,6,1,6,1,6,
		1,7,3,7,161,8,7,1,7,3,7,164,8,7,1,7,1,7,3,7,168,8,7,1,7,1,7,3,7,172,8,
		7,1,8,1,8,1,9,1,9,1,10,1,10,1,11,1,11,1,11,3,11,183,8,11,1,11,1,11,1,11,
		1,12,1,12,1,12,1,12,1,12,1,13,1,13,1,13,1,13,1,13,1,13,1,13,1,14,1,14,
		1,14,1,14,3,14,204,8,14,1,14,1,14,1,15,1,15,1,15,1,15,3,15,212,8,15,1,
		15,1,15,1,15,1,16,1,16,1,16,1,16,1,16,3,16,222,8,16,1,16,1,16,1,16,3,16,
		227,8,16,1,16,1,16,1,17,1,17,1,17,5,17,234,8,17,10,17,12,17,237,9,17,1,
		17,1,17,1,17,5,17,242,8,17,10,17,12,17,245,9,17,1,17,3,17,248,8,17,1,18,
		1,18,1,19,1,19,1,20,1,20,1,20,5,20,257,8,20,10,20,12,20,260,9,20,1,21,
		1,21,1,21,1,22,1,22,1,22,1,22,1,22,1,22,1,22,1,22,1,22,1,22,1,22,3,22,
		276,8,22,1,23,1,23,3,23,280,8,23,1,24,1,24,1,24,5,24,285,8,24,10,24,12,
		24,288,9,24,1,24,1,24,1,25,1,25,1,25,1,25,1,25,1,25,1,25,3,25,299,8,25,
		1,26,1,26,1,26,1,26,1,26,1,26,1,27,1,27,1,27,1,27,1,27,1,27,1,27,1,27,
		1,28,1,28,1,28,1,28,1,28,3,28,320,8,28,1,28,3,28,323,8,28,1,28,1,28,3,
		28,327,8,28,1,28,1,28,1,28,1,29,1,29,1,29,1,29,1,29,1,29,1,29,1,29,1,29,
		1,30,1,30,1,30,1,30,1,30,1,30,5,30,347,8,30,10,30,12,30,350,9,30,1,30,
		1,30,1,31,4,31,355,8,31,11,31,12,31,356,1,31,5,31,360,8,31,10,31,12,31,
		363,9,31,1,32,1,32,1,32,1,32,1,32,1,32,3,32,371,8,32,1,33,1,33,1,33,1,
		33,1,33,1,33,1,33,1,33,3,33,381,8,33,1,33,1,33,3,33,385,8,33,1,34,1,34,
		3,34,389,8,34,1,34,1,34,1,34,1,34,1,34,3,34,396,8,34,1,35,1,35,1,35,1,
		36,1,36,1,36,1,36,1,36,1,36,1,36,1,36,1,36,1,36,3,36,411,8,36,3,36,413,
		8,36,1,37,5,37,416,8,37,10,37,12,37,419,9,37,1,37,1,37,1,37,5,37,424,8,
		37,10,37,12,37,427,9,37,1,37,5,37,430,8,37,10,37,12,37,433,9,37,1,37,1,
		37,5,37,437,8,37,10,37,12,37,440,9,37,1,37,5,37,443,8,37,10,37,12,37,446,
		9,37,1,37,1,37,5,37,450,8,37,10,37,12,37,453,9,37,1,37,5,37,456,8,37,10,
		37,12,37,459,9,37,1,37,1,37,5,37,463,8,37,10,37,12,37,466,9,37,1,37,5,
		37,469,8,37,10,37,12,37,472,9,37,1,37,1,37,5,37,476,8,37,10,37,12,37,479,
		9,37,1,37,5,37,482,8,37,10,37,12,37,485,9,37,1,37,1,37,5,37,489,8,37,10,
		37,12,37,492,9,37,1,37,5,37,495,8,37,10,37,12,37,498,9,37,1,37,1,37,5,
		37,502,8,37,10,37,12,37,505,9,37,1,37,5,37,508,8,37,10,37,12,37,511,9,
		37,1,37,1,37,5,37,515,8,37,10,37,12,37,518,9,37,1,37,5,37,521,8,37,10,
		37,12,37,524,9,37,1,37,1,37,5,37,528,8,37,10,37,12,37,531,9,37,1,37,5,
		37,534,8,37,10,37,12,37,537,9,37,1,37,1,37,5,37,541,8,37,10,37,12,37,544,
		9,37,1,37,5,37,547,8,37,10,37,12,37,550,9,37,1,38,1,38,1,39,1,39,1,39,
		3,39,557,8,39,1,39,1,39,1,39,1,39,1,39,1,39,1,39,1,39,1,39,5,39,568,8,
		39,10,39,12,39,571,9,39,1,40,1,40,1,40,1,40,1,40,1,40,1,40,5,40,580,8,
		40,10,40,12,40,583,9,40,1,41,1,41,1,41,1,41,1,41,1,41,1,41,1,41,1,41,1,
		41,1,41,3,41,596,8,41,1,42,1,42,1,42,1,42,3,42,602,8,42,1,42,1,42,1,43,
		1,43,1,43,5,43,609,8,43,10,43,12,43,612,9,43,1,44,1,44,1,44,3,44,617,8,
		44,1,44,1,44,1,44,1,45,1,45,1,45,1,45,5,45,626,8,45,10,45,12,45,629,9,
		45,3,45,631,8,45,1,45,1,45,1,46,1,46,1,46,1,46,1,46,5,46,640,8,46,10,46,
		12,46,643,9,46,3,46,645,8,46,1,46,1,46,1,47,1,47,1,47,1,47,1,48,1,48,1,
		49,1,49,1,49,0,0,50,0,2,4,6,8,10,12,14,16,18,20,22,24,26,28,30,32,34,36,
		38,40,42,44,46,48,50,52,54,56,58,60,62,64,66,68,70,72,74,76,78,80,82,84,
		86,88,90,92,94,96,98,0,12,1,0,25,26,1,0,36,38,2,0,29,33,35,35,1,0,44,46,
		1,0,42,43,1,0,68,69,1,0,57,60,1,0,55,56,4,0,42,43,52,53,61,61,67,67,1,
		0,81,82,3,0,34,34,39,40,82,85,2,0,47,51,54,54,709,0,107,1,0,0,0,2,112,
		1,0,0,0,4,116,1,0,0,0,6,120,1,0,0,0,8,133,1,0,0,0,10,146,1,0,0,0,12,148,
		1,0,0,0,14,171,1,0,0,0,16,173,1,0,0,0,18,175,1,0,0,0,20,177,1,0,0,0,22,
		179,1,0,0,0,24,187,1,0,0,0,26,192,1,0,0,0,28,199,1,0,0,0,30,207,1,0,0,
		0,32,216,1,0,0,0,34,247,1,0,0,0,36,249,1,0,0,0,38,251,1,0,0,0,40,253,1,
		0,0,0,42,261,1,0,0,0,44,275,1,0,0,0,46,279,1,0,0,0,48,281,1,0,0,0,50,291,
		1,0,0,0,52,300,1,0,0,0,54,306,1,0,0,0,56,314,1,0,0,0,58,331,1,0,0,0,60,
		340,1,0,0,0,62,354,1,0,0,0,64,370,1,0,0,0,66,372,1,0,0,0,68,395,1,0,0,
		0,70,397,1,0,0,0,72,412,1,0,0,0,74,417,1,0,0,0,76,551,1,0,0,0,78,553,1,
		0,0,0,80,572,1,0,0,0,82,595,1,0,0,0,84,597,1,0,0,0,86,605,1,0,0,0,88,613,
		1,0,0,0,90,621,1,0,0,0,92,634,1,0,0,0,94,648,1,0,0,0,96,652,1,0,0,0,98,
		654,1,0,0,0,100,106,3,2,1,0,101,106,3,4,2,0,102,106,3,6,3,0,103,106,3,
		10,5,0,104,106,3,44,22,0,105,100,1,0,0,0,105,101,1,0,0,0,105,102,1,0,0,
		0,105,103,1,0,0,0,105,104,1,0,0,0,106,109,1,0,0,0,107,105,1,0,0,0,107,
		108,1,0,0,0,108,110,1,0,0,0,109,107,1,0,0,0,110,111,5,0,0,1,111,1,1,0,
		0,0,112,113,5,1,0,0,113,114,5,82,0,0,114,115,5,77,0,0,115,3,1,0,0,0,116,
		117,5,2,0,0,117,118,5,82,0,0,118,119,5,77,0,0,119,5,1,0,0,0,120,121,5,
		3,0,0,121,122,3,8,4,0,122,128,5,73,0,0,123,127,3,10,5,0,124,127,3,44,22,
		0,125,127,3,32,16,0,126,123,1,0,0,0,126,124,1,0,0,0,126,125,1,0,0,0,127,
		130,1,0,0,0,128,126,1,0,0,0,128,129,1,0,0,0,129,131,1,0,0,0,130,128,1,
		0,0,0,131,132,5,74,0,0,132,7,1,0,0,0,133,138,5,81,0,0,134,135,5,80,0,0,
		135,137,5,81,0,0,136,134,1,0,0,0,137,140,1,0,0,0,138,136,1,0,0,0,138,139,
		1,0,0,0,139,9,1,0,0,0,140,138,1,0,0,0,141,147,3,26,13,0,142,147,3,28,14,
		0,143,147,3,30,15,0,144,147,3,32,16,0,145,147,3,12,6,0,146,141,1,0,0,0,
		146,142,1,0,0,0,146,143,1,0,0,0,146,144,1,0,0,0,146,145,1,0,0,0,147,11,
		1,0,0,0,148,149,5,21,0,0,149,150,5,81,0,0,150,154,5,73,0,0,151,153,3,14,
		7,0,152,151,1,0,0,0,153,156,1,0,0,0,154,152,1,0,0,0,154,155,1,0,0,0,155,
		157,1,0,0,0,156,154,1,0,0,0,157,158,5,74,0,0,158,13,1,0,0,0,159,161,3,
		16,8,0,160,159,1,0,0,0,160,161,1,0,0,0,161,163,1,0,0,0,162,164,5,24,0,
		0,163,162,1,0,0,0,163,164,1,0,0,0,164,167,1,0,0,0,165,168,3,18,9,0,166,
		168,3,20,10,0,167,165,1,0,0,0,167,166,1,0,0,0,168,172,1,0,0,0,169,172,
		3,22,11,0,170,172,3,24,12,0,171,160,1,0,0,0,171,169,1,0,0,0,171,170,1,
		0,0,0,172,15,1,0,0,0,173,174,7,0,0,0,174,17,1,0,0,0,175,176,3,28,14,0,
		176,19,1,0,0,0,177,178,3,30,15,0,178,21,1,0,0,0,179,180,5,27,0,0,180,182,
		5,71,0,0,181,183,3,40,20,0,182,181,1,0,0,0,182,183,1,0,0,0,183,184,1,0,
		0,0,184,185,5,72,0,0,185,186,3,48,24,0,186,23,1,0,0,0,187,188,5,28,0,0,
		188,189,5,71,0,0,189,190,5,72,0,0,190,191,3,48,24,0,191,25,1,0,0,0,192,
		193,5,5,0,0,193,194,3,34,17,0,194,195,5,81,0,0,195,196,5,54,0,0,196,197,
		3,72,36,0,197,198,5,77,0,0,198,27,1,0,0,0,199,200,3,34,17,0,200,203,5,
		81,0,0,201,202,5,54,0,0,202,204,3,72,36,0,203,201,1,0,0,0,203,204,1,0,
		0,0,204,205,1,0,0,0,205,206,5,77,0,0,206,29,1,0,0,0,207,208,3,34,17,0,
		208,209,5,81,0,0,209,211,5,71,0,0,210,212,3,40,20,0,211,210,1,0,0,0,211,
		212,1,0,0,0,212,213,1,0,0,0,213,214,5,72,0,0,214,215,3,48,24,0,215,31,
		1,0,0,0,216,217,5,4,0,0,217,218,3,34,17,0,218,219,5,81,0,0,219,221,5,71,
		0,0,220,222,3,40,20,0,221,220,1,0,0,0,221,222,1,0,0,0,222,223,1,0,0,0,
		223,226,5,72,0,0,224,225,5,41,0,0,225,227,5,82,0,0,226,224,1,0,0,0,226,
		227,1,0,0,0,227,228,1,0,0,0,228,229,5,77,0,0,229,33,1,0,0,0,230,235,3,
		38,19,0,231,232,5,75,0,0,232,234,5,76,0,0,233,231,1,0,0,0,234,237,1,0,
		0,0,235,233,1,0,0,0,235,236,1,0,0,0,236,248,1,0,0,0,237,235,1,0,0,0,238,
		243,3,36,18,0,239,240,5,75,0,0,240,242,5,76,0,0,241,239,1,0,0,0,242,245,
		1,0,0,0,243,241,1,0,0,0,243,244,1,0,0,0,244,248,1,0,0,0,245,243,1,0,0,
		0,246,248,5,81,0,0,247,230,1,0,0,0,247,238,1,0,0,0,247,246,1,0,0,0,248,
		35,1,0,0,0,249,250,7,1,0,0,250,37,1,0,0,0,251,252,7,2,0,0,252,39,1,0,0,
		0,253,258,3,42,21,0,254,255,5,78,0,0,255,257,3,42,21,0,256,254,1,0,0,0,
		257,260,1,0,0,0,258,256,1,0,0,0,258,259,1,0,0,0,259,41,1,0,0,0,260,258,
		1,0,0,0,261,262,3,34,17,0,262,263,5,81,0,0,263,43,1,0,0,0,264,276,3,48,
		24,0,265,276,3,46,23,0,266,276,3,50,25,0,267,276,3,52,26,0,268,276,3,54,
		27,0,269,276,3,56,28,0,270,276,3,58,29,0,271,276,3,60,30,0,272,276,3,66,
		33,0,273,276,3,68,34,0,274,276,3,70,35,0,275,264,1,0,0,0,275,265,1,0,0,
		0,275,266,1,0,0,0,275,267,1,0,0,0,275,268,1,0,0,0,275,269,1,0,0,0,275,
		270,1,0,0,0,275,271,1,0,0,0,275,272,1,0,0,0,275,273,1,0,0,0,275,274,1,
		0,0,0,276,45,1,0,0,0,277,280,3,26,13,0,278,280,3,28,14,0,279,277,1,0,0,
		0,279,278,1,0,0,0,280,47,1,0,0,0,281,286,5,73,0,0,282,285,3,46,23,0,283,
		285,3,44,22,0,284,282,1,0,0,0,284,283,1,0,0,0,285,288,1,0,0,0,286,284,
		1,0,0,0,286,287,1,0,0,0,287,289,1,0,0,0,288,286,1,0,0,0,289,290,5,74,0,
		0,290,49,1,0,0,0,291,292,5,6,0,0,292,293,5,71,0,0,293,294,3,72,36,0,294,
		295,5,72,0,0,295,298,3,44,22,0,296,297,5,7,0,0,297,299,3,44,22,0,298,296,
		1,0,0,0,298,299,1,0,0,0,299,51,1,0,0,0,300,301,5,8,0,0,301,302,5,71,0,
		0,302,303,3,72,36,0,303,304,5,72,0,0,304,305,3,44,22,0,305,53,1,0,0,0,
		306,307,5,9,0,0,307,308,3,44,22,0,308,309,5,8,0,0,309,310,5,71,0,0,310,
		311,3,72,36,0,311,312,5,72,0,0,312,313,5,77,0,0,313,55,1,0,0,0,314,315,
		5,10,0,0,315,319,5,71,0,0,316,320,3,28,14,0,317,320,3,70,35,0,318,320,
		5,77,0,0,319,316,1,0,0,0,319,317,1,0,0,0,319,318,1,0,0,0,319,320,1,0,0,
		0,320,322,1,0,0,0,321,323,3,72,36,0,322,321,1,0,0,0,322,323,1,0,0,0,323,
		324,1,0,0,0,324,326,5,77,0,0,325,327,3,72,36,0,326,325,1,0,0,0,326,327,
		1,0,0,0,327,328,1,0,0,0,328,329,5,72,0,0,329,330,3,44,22,0,330,57,1,0,
		0,0,331,332,5,10,0,0,332,333,5,71,0,0,333,334,3,34,17,0,334,335,5,81,0,
		0,335,336,5,11,0,0,336,337,3,72,36,0,337,338,5,72,0,0,338,339,3,44,22,
		0,339,59,1,0,0,0,340,341,5,12,0,0,341,342,5,71,0,0,342,343,3,72,36,0,343,
		344,5,72,0,0,344,348,5,73,0,0,345,347,3,62,31,0,346,345,1,0,0,0,347,350,
		1,0,0,0,348,346,1,0,0,0,348,349,1,0,0,0,349,351,1,0,0,0,350,348,1,0,0,
		0,351,352,5,74,0,0,352,61,1,0,0,0,353,355,3,64,32,0,354,353,1,0,0,0,355,
		356,1,0,0,0,356,354,1,0,0,0,356,357,1,0,0,0,357,361,1,0,0,0,358,360,3,
		44,22,0,359,358,1,0,0,0,360,363,1,0,0,0,361,359,1,0,0,0,361,362,1,0,0,
		0,362,63,1,0,0,0,363,361,1,0,0,0,364,365,5,13,0,0,365,366,3,72,36,0,366,
		367,5,79,0,0,367,371,1,0,0,0,368,369,5,14,0,0,369,371,5,79,0,0,370,364,
		1,0,0,0,370,368,1,0,0,0,371,65,1,0,0,0,372,373,5,15,0,0,373,380,3,48,24,
		0,374,375,5,16,0,0,375,376,5,71,0,0,376,377,3,42,21,0,377,378,5,72,0,0,
		378,379,3,48,24,0,379,381,1,0,0,0,380,374,1,0,0,0,380,381,1,0,0,0,381,
		384,1,0,0,0,382,383,5,17,0,0,383,385,3,48,24,0,384,382,1,0,0,0,384,385,
		1,0,0,0,385,67,1,0,0,0,386,388,5,18,0,0,387,389,3,72,36,0,388,387,1,0,
		0,0,388,389,1,0,0,0,389,390,1,0,0,0,390,396,5,77,0,0,391,392,5,19,0,0,
		392,396,5,77,0,0,393,394,5,20,0,0,394,396,5,77,0,0,395,386,1,0,0,0,395,
		391,1,0,0,0,395,393,1,0,0,0,396,69,1,0,0,0,397,398,3,72,36,0,398,399,5,
		77,0,0,399,71,1,0,0,0,400,401,3,80,40,0,401,402,3,98,49,0,402,403,3,72,
		36,0,403,413,1,0,0,0,404,410,3,74,37,0,405,406,5,70,0,0,406,407,3,72,36,
		0,407,408,5,79,0,0,408,409,3,72,36,0,409,411,1,0,0,0,410,405,1,0,0,0,410,
		411,1,0,0,0,411,413,1,0,0,0,412,400,1,0,0,0,412,404,1,0,0,0,413,73,1,0,
		0,0,414,416,3,76,38,0,415,414,1,0,0,0,416,419,1,0,0,0,417,415,1,0,0,0,
		417,418,1,0,0,0,418,420,1,0,0,0,419,417,1,0,0,0,420,431,3,78,39,0,421,
		425,7,3,0,0,422,424,3,76,38,0,423,422,1,0,0,0,424,427,1,0,0,0,425,423,
		1,0,0,0,425,426,1,0,0,0,426,428,1,0,0,0,427,425,1,0,0,0,428,430,3,78,39,
		0,429,421,1,0,0,0,430,433,1,0,0,0,431,429,1,0,0,0,431,432,1,0,0,0,432,
		444,1,0,0,0,433,431,1,0,0,0,434,438,7,4,0,0,435,437,3,76,38,0,436,435,
		1,0,0,0,437,440,1,0,0,0,438,436,1,0,0,0,438,439,1,0,0,0,439,441,1,0,0,
		0,440,438,1,0,0,0,441,443,3,78,39,0,442,434,1,0,0,0,443,446,1,0,0,0,444,
		442,1,0,0,0,444,445,1,0,0,0,445,457,1,0,0,0,446,444,1,0,0,0,447,451,7,
		5,0,0,448,450,3,76,38,0,449,448,1,0,0,0,450,453,1,0,0,0,451,449,1,0,0,
		0,451,452,1,0,0,0,452,454,1,0,0,0,453,451,1,0,0,0,454,456,3,78,39,0,455,
		447,1,0,0,0,456,459,1,0,0,0,457,455,1,0,0,0,457,458,1,0,0,0,458,470,1,
		0,0,0,459,457,1,0,0,0,460,464,7,6,0,0,461,463,3,76,38,0,462,461,1,0,0,
		0,463,466,1,0,0,0,464,462,1,0,0,0,464,465,1,0,0,0,465,467,1,0,0,0,466,
		464,1,0,0,0,467,469,3,78,39,0,468,460,1,0,0,0,469,472,1,0,0,0,470,468,
		1,0,0,0,470,471,1,0,0,0,471,483,1,0,0,0,472,470,1,0,0,0,473,477,7,7,0,
		0,474,476,3,76,38,0,475,474,1,0,0,0,476,479,1,0,0,0,477,475,1,0,0,0,477,
		478,1,0,0,0,478,480,1,0,0,0,479,477,1,0,0,0,480,482,3,78,39,0,481,473,
		1,0,0,0,482,485,1,0,0,0,483,481,1,0,0,0,483,484,1,0,0,0,484,496,1,0,0,
		0,485,483,1,0,0,0,486,490,5,64,0,0,487,489,3,76,38,0,488,487,1,0,0,0,489,
		492,1,0,0,0,490,488,1,0,0,0,490,491,1,0,0,0,491,493,1,0,0,0,492,490,1,
		0,0,0,493,495,3,78,39,0,494,486,1,0,0,0,495,498,1,0,0,0,496,494,1,0,0,
		0,496,497,1,0,0,0,497,509,1,0,0,0,498,496,1,0,0,0,499,503,5,66,0,0,500,
		502,3,76,38,0,501,500,1,0,0,0,502,505,1,0,0,0,503,501,1,0,0,0,503,504,
		1,0,0,0,504,506,1,0,0,0,505,503,1,0,0,0,506,508,3,78,39,0,507,499,1,0,
		0,0,508,511,1,0,0,0,509,507,1,0,0,0,509,510,1,0,0,0,510,522,1,0,0,0,511,
		509,1,0,0,0,512,516,5,65,0,0,513,515,3,76,38,0,514,513,1,0,0,0,515,518,
		1,0,0,0,516,514,1,0,0,0,516,517,1,0,0,0,517,519,1,0,0,0,518,516,1,0,0,
		0,519,521,3,78,39,0,520,512,1,0,0,0,521,524,1,0,0,0,522,520,1,0,0,0,522,
		523,1,0,0,0,523,535,1,0,0,0,524,522,1,0,0,0,525,529,5,62,0,0,526,528,3,
		76,38,0,527,526,1,0,0,0,528,531,1,0,0,0,529,527,1,0,0,0,529,530,1,0,0,
		0,530,532,1,0,0,0,531,529,1,0,0,0,532,534,3,78,39,0,533,525,1,0,0,0,534,
		537,1,0,0,0,535,533,1,0,0,0,535,536,1,0,0,0,536,548,1,0,0,0,537,535,1,
		0,0,0,538,542,5,63,0,0,539,541,3,76,38,0,540,539,1,0,0,0,541,544,1,0,0,
		0,542,540,1,0,0,0,542,543,1,0,0,0,543,545,1,0,0,0,544,542,1,0,0,0,545,
		547,3,78,39,0,546,538,1,0,0,0,547,550,1,0,0,0,548,546,1,0,0,0,548,549,
		1,0,0,0,549,75,1,0,0,0,550,548,1,0,0,0,551,552,7,8,0,0,552,77,1,0,0,0,
		553,569,3,82,41,0,554,556,5,71,0,0,555,557,3,86,43,0,556,555,1,0,0,0,556,
		557,1,0,0,0,557,558,1,0,0,0,558,568,5,72,0,0,559,560,5,75,0,0,560,561,
		3,72,36,0,561,562,5,76,0,0,562,568,1,0,0,0,563,564,5,80,0,0,564,568,5,
		81,0,0,565,568,5,52,0,0,566,568,5,53,0,0,567,554,1,0,0,0,567,559,1,0,0,
		0,567,563,1,0,0,0,567,565,1,0,0,0,567,566,1,0,0,0,568,571,1,0,0,0,569,
		567,1,0,0,0,569,570,1,0,0,0,570,79,1,0,0,0,571,569,1,0,0,0,572,581,3,82,
		41,0,573,574,5,75,0,0,574,575,3,72,36,0,575,576,5,76,0,0,576,580,1,0,0,
		0,577,578,5,80,0,0,578,580,5,81,0,0,579,573,1,0,0,0,579,577,1,0,0,0,580,
		583,1,0,0,0,581,579,1,0,0,0,581,582,1,0,0,0,582,81,1,0,0,0,583,581,1,0,
		0,0,584,585,5,71,0,0,585,586,3,72,36,0,586,587,5,72,0,0,587,596,1,0,0,
		0,588,596,3,96,48,0,589,596,5,81,0,0,590,596,5,23,0,0,591,596,3,84,42,
		0,592,596,3,88,44,0,593,596,3,90,45,0,594,596,3,92,46,0,595,584,1,0,0,
		0,595,588,1,0,0,0,595,589,1,0,0,0,595,590,1,0,0,0,595,591,1,0,0,0,595,
		592,1,0,0,0,595,593,1,0,0,0,595,594,1,0,0,0,596,83,1,0,0,0,597,598,5,22,
		0,0,598,599,5,81,0,0,599,601,5,71,0,0,600,602,3,86,43,0,601,600,1,0,0,
		0,601,602,1,0,0,0,602,603,1,0,0,0,603,604,5,72,0,0,604,85,1,0,0,0,605,
		610,3,72,36,0,606,607,5,78,0,0,607,609,3,72,36,0,608,606,1,0,0,0,609,612,
		1,0,0,0,610,608,1,0,0,0,610,611,1,0,0,0,611,87,1,0,0,0,612,610,1,0,0,0,
		613,614,3,34,17,0,614,616,5,71,0,0,615,617,3,40,20,0,616,615,1,0,0,0,616,
		617,1,0,0,0,617,618,1,0,0,0,618,619,5,72,0,0,619,620,3,48,24,0,620,89,
		1,0,0,0,621,630,5,75,0,0,622,627,3,72,36,0,623,624,5,78,0,0,624,626,3,
		72,36,0,625,623,1,0,0,0,626,629,1,0,0,0,627,625,1,0,0,0,627,628,1,0,0,
		0,628,631,1,0,0,0,629,627,1,0,0,0,630,622,1,0,0,0,630,631,1,0,0,0,631,
		632,1,0,0,0,632,633,5,76,0,0,633,91,1,0,0,0,634,644,5,73,0,0,635,641,3,
		94,47,0,636,637,5,78,0,0,637,640,3,94,47,0,638,640,5,78,0,0,639,636,1,
		0,0,0,639,638,1,0,0,0,640,643,1,0,0,0,641,639,1,0,0,0,641,642,1,0,0,0,
		642,645,1,0,0,0,643,641,1,0,0,0,644,635,1,0,0,0,644,645,1,0,0,0,645,646,
		1,0,0,0,646,647,5,74,0,0,647,93,1,0,0,0,648,649,7,9,0,0,649,650,5,79,0,
		0,650,651,3,72,36,0,651,95,1,0,0,0,652,653,7,10,0,0,653,97,1,0,0,0,654,
		655,7,11,0,0,655,99,1,0,0,0,73,105,107,126,128,138,146,154,160,163,167,
		171,182,203,211,221,226,235,243,247,258,275,279,284,286,298,319,322,326,
		348,356,361,370,380,384,388,395,410,412,417,425,431,438,444,451,457,464,
		470,477,483,490,496,503,509,516,522,529,535,542,548,556,567,569,579,581,
		595,601,610,616,627,630,639,641,644
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
