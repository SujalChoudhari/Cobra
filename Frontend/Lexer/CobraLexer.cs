//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.13.2
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from /home/sujal/Code/Cobra/Grammar/CobraLexer.g4 by ANTLR 4.13.2

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

using System;
using System.IO;
using System.Text;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.13.2")]
[System.CLSCompliant(false)]
public partial class CobraLexer : Lexer {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		INT=1, FLOAT=2, STRING=3, BOOL=4, VOID=5, IMPORT=6, IF=7, ELSE=8, WHILE=9, 
		FOR=10, IN=11, RETURN=12, PRINT=13, PLUS=14, MINUS=15, MUL=16, DIV=17, 
		MOD=18, AND=19, OR=20, NOT=21, EQ=22, NEQ=23, GT=24, LT=25, GTE=26, LTE=27, 
		ASSIGN=28, LPAREN=29, RPAREN=30, LBRACE=31, RBRACE=32, LBRACKET=33, RBRACKET=34, 
		SEMICOLON=35, COMMA=36, COLON=37, QUOTE=38, INTEGER=39, FLOAT_LITERAL=40, 
		STRING_LITERAL=41, BOOLEAN_LITERAL=42, ID=43, WHITESPACE=44, COMMENT=45, 
		BLOCK_COMMENT=46;
	public static string[] channelNames = {
		"DEFAULT_TOKEN_CHANNEL", "HIDDEN"
	};

	public static string[] modeNames = {
		"DEFAULT_MODE"
	};

	public static readonly string[] ruleNames = {
		"INT", "FLOAT", "STRING", "BOOL", "VOID", "IMPORT", "IF", "ELSE", "WHILE", 
		"FOR", "IN", "RETURN", "PRINT", "PLUS", "MINUS", "MUL", "DIV", "MOD", 
		"AND", "OR", "NOT", "EQ", "NEQ", "GT", "LT", "GTE", "LTE", "ASSIGN", "LPAREN", 
		"RPAREN", "LBRACE", "RBRACE", "LBRACKET", "RBRACKET", "SEMICOLON", "COMMA", 
		"COLON", "QUOTE", "INTEGER", "FLOAT_LITERAL", "STRING_LITERAL", "BOOLEAN_LITERAL", 
		"ID", "WHITESPACE", "COMMENT", "BLOCK_COMMENT"
	};


	public CobraLexer(ICharStream input)
	: this(input, Console.Out, Console.Error) { }

	public CobraLexer(ICharStream input, TextWriter output, TextWriter errorOutput)
	: base(input, output, errorOutput)
	{
		Interpreter = new LexerATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	private static readonly string[] _LiteralNames = {
		null, "'int'", "'float'", "'string'", "'bool'", "'void'", "'import'", 
		"'if'", "'else'", "'while'", "'for'", "'in'", "'return'", "'print'", "'+'", 
		"'-'", "'*'", "'/'", "'%'", "'&&'", "'||'", "'!'", "'=='", "'!='", "'>'", 
		"'<'", "'>='", "'<='", "'='", "'('", "')'", "'{'", "'}'", "'['", "']'", 
		"';'", "','", "':'", "'\"'"
	};
	private static readonly string[] _SymbolicNames = {
		null, "INT", "FLOAT", "STRING", "BOOL", "VOID", "IMPORT", "IF", "ELSE", 
		"WHILE", "FOR", "IN", "RETURN", "PRINT", "PLUS", "MINUS", "MUL", "DIV", 
		"MOD", "AND", "OR", "NOT", "EQ", "NEQ", "GT", "LT", "GTE", "LTE", "ASSIGN", 
		"LPAREN", "RPAREN", "LBRACE", "RBRACE", "LBRACKET", "RBRACKET", "SEMICOLON", 
		"COMMA", "COLON", "QUOTE", "INTEGER", "FLOAT_LITERAL", "STRING_LITERAL", 
		"BOOLEAN_LITERAL", "ID", "WHITESPACE", "COMMENT", "BLOCK_COMMENT"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "CobraLexer.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string[] ChannelNames { get { return channelNames; } }

	public override string[] ModeNames { get { return modeNames; } }

	public override int[] SerializedAtn { get { return _serializedATN; } }

	static CobraLexer() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}
	private static int[] _serializedATN = {
		4,0,46,294,6,-1,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,2,6,7,
		6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,13,7,13,2,14,
		7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,19,2,20,7,20,2,21,
		7,21,2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,26,7,26,2,27,7,27,2,28,
		7,28,2,29,7,29,2,30,7,30,2,31,7,31,2,32,7,32,2,33,7,33,2,34,7,34,2,35,
		7,35,2,36,7,36,2,37,7,37,2,38,7,38,2,39,7,39,2,40,7,40,2,41,7,41,2,42,
		7,42,2,43,7,43,2,44,7,44,2,45,7,45,1,0,1,0,1,0,1,0,1,1,1,1,1,1,1,1,1,1,
		1,1,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,3,1,3,1,3,1,3,1,3,1,4,1,4,1,4,1,4,1,
		4,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,6,1,6,1,6,1,7,1,7,1,7,1,7,1,7,1,8,1,8,
		1,8,1,8,1,8,1,8,1,9,1,9,1,9,1,9,1,10,1,10,1,10,1,11,1,11,1,11,1,11,1,11,
		1,11,1,11,1,12,1,12,1,12,1,12,1,12,1,12,1,13,1,13,1,14,1,14,1,15,1,15,
		1,16,1,16,1,17,1,17,1,18,1,18,1,18,1,19,1,19,1,19,1,20,1,20,1,21,1,21,
		1,21,1,22,1,22,1,22,1,23,1,23,1,24,1,24,1,25,1,25,1,25,1,26,1,26,1,26,
		1,27,1,27,1,28,1,28,1,29,1,29,1,30,1,30,1,31,1,31,1,32,1,32,1,33,1,33,
		1,34,1,34,1,35,1,35,1,36,1,36,1,37,1,37,1,38,4,38,219,8,38,11,38,12,38,
		220,1,39,4,39,224,8,39,11,39,12,39,225,1,39,1,39,4,39,230,8,39,11,39,12,
		39,231,1,40,1,40,5,40,236,8,40,10,40,12,40,239,9,40,1,40,1,40,1,41,1,41,
		1,41,1,41,1,41,1,41,1,41,1,41,1,41,3,41,252,8,41,1,42,1,42,5,42,256,8,
		42,10,42,12,42,259,9,42,1,43,4,43,262,8,43,11,43,12,43,263,1,43,1,43,1,
		44,1,44,1,44,1,44,5,44,272,8,44,10,44,12,44,275,9,44,1,44,1,44,1,44,1,
		44,1,45,1,45,1,45,1,45,5,45,285,8,45,10,45,12,45,288,9,45,1,45,1,45,1,
		45,1,45,1,45,3,237,273,286,0,46,1,1,3,2,5,3,7,4,9,5,11,6,13,7,15,8,17,
		9,19,10,21,11,23,12,25,13,27,14,29,15,31,16,33,17,35,18,37,19,39,20,41,
		21,43,22,45,23,47,24,49,25,51,26,53,27,55,28,57,29,59,30,61,31,63,32,65,
		33,67,34,69,35,71,36,73,37,75,38,77,39,79,40,81,41,83,42,85,43,87,44,89,
		45,91,46,1,0,4,1,0,48,57,3,0,65,90,95,95,97,122,4,0,48,57,65,90,95,95,
		97,122,3,0,9,10,13,13,32,32,302,0,1,1,0,0,0,0,3,1,0,0,0,0,5,1,0,0,0,0,
		7,1,0,0,0,0,9,1,0,0,0,0,11,1,0,0,0,0,13,1,0,0,0,0,15,1,0,0,0,0,17,1,0,
		0,0,0,19,1,0,0,0,0,21,1,0,0,0,0,23,1,0,0,0,0,25,1,0,0,0,0,27,1,0,0,0,0,
		29,1,0,0,0,0,31,1,0,0,0,0,33,1,0,0,0,0,35,1,0,0,0,0,37,1,0,0,0,0,39,1,
		0,0,0,0,41,1,0,0,0,0,43,1,0,0,0,0,45,1,0,0,0,0,47,1,0,0,0,0,49,1,0,0,0,
		0,51,1,0,0,0,0,53,1,0,0,0,0,55,1,0,0,0,0,57,1,0,0,0,0,59,1,0,0,0,0,61,
		1,0,0,0,0,63,1,0,0,0,0,65,1,0,0,0,0,67,1,0,0,0,0,69,1,0,0,0,0,71,1,0,0,
		0,0,73,1,0,0,0,0,75,1,0,0,0,0,77,1,0,0,0,0,79,1,0,0,0,0,81,1,0,0,0,0,83,
		1,0,0,0,0,85,1,0,0,0,0,87,1,0,0,0,0,89,1,0,0,0,0,91,1,0,0,0,1,93,1,0,0,
		0,3,97,1,0,0,0,5,103,1,0,0,0,7,110,1,0,0,0,9,115,1,0,0,0,11,120,1,0,0,
		0,13,127,1,0,0,0,15,130,1,0,0,0,17,135,1,0,0,0,19,141,1,0,0,0,21,145,1,
		0,0,0,23,148,1,0,0,0,25,155,1,0,0,0,27,161,1,0,0,0,29,163,1,0,0,0,31,165,
		1,0,0,0,33,167,1,0,0,0,35,169,1,0,0,0,37,171,1,0,0,0,39,174,1,0,0,0,41,
		177,1,0,0,0,43,179,1,0,0,0,45,182,1,0,0,0,47,185,1,0,0,0,49,187,1,0,0,
		0,51,189,1,0,0,0,53,192,1,0,0,0,55,195,1,0,0,0,57,197,1,0,0,0,59,199,1,
		0,0,0,61,201,1,0,0,0,63,203,1,0,0,0,65,205,1,0,0,0,67,207,1,0,0,0,69,209,
		1,0,0,0,71,211,1,0,0,0,73,213,1,0,0,0,75,215,1,0,0,0,77,218,1,0,0,0,79,
		223,1,0,0,0,81,233,1,0,0,0,83,251,1,0,0,0,85,253,1,0,0,0,87,261,1,0,0,
		0,89,267,1,0,0,0,91,280,1,0,0,0,93,94,5,105,0,0,94,95,5,110,0,0,95,96,
		5,116,0,0,96,2,1,0,0,0,97,98,5,102,0,0,98,99,5,108,0,0,99,100,5,111,0,
		0,100,101,5,97,0,0,101,102,5,116,0,0,102,4,1,0,0,0,103,104,5,115,0,0,104,
		105,5,116,0,0,105,106,5,114,0,0,106,107,5,105,0,0,107,108,5,110,0,0,108,
		109,5,103,0,0,109,6,1,0,0,0,110,111,5,98,0,0,111,112,5,111,0,0,112,113,
		5,111,0,0,113,114,5,108,0,0,114,8,1,0,0,0,115,116,5,118,0,0,116,117,5,
		111,0,0,117,118,5,105,0,0,118,119,5,100,0,0,119,10,1,0,0,0,120,121,5,105,
		0,0,121,122,5,109,0,0,122,123,5,112,0,0,123,124,5,111,0,0,124,125,5,114,
		0,0,125,126,5,116,0,0,126,12,1,0,0,0,127,128,5,105,0,0,128,129,5,102,0,
		0,129,14,1,0,0,0,130,131,5,101,0,0,131,132,5,108,0,0,132,133,5,115,0,0,
		133,134,5,101,0,0,134,16,1,0,0,0,135,136,5,119,0,0,136,137,5,104,0,0,137,
		138,5,105,0,0,138,139,5,108,0,0,139,140,5,101,0,0,140,18,1,0,0,0,141,142,
		5,102,0,0,142,143,5,111,0,0,143,144,5,114,0,0,144,20,1,0,0,0,145,146,5,
		105,0,0,146,147,5,110,0,0,147,22,1,0,0,0,148,149,5,114,0,0,149,150,5,101,
		0,0,150,151,5,116,0,0,151,152,5,117,0,0,152,153,5,114,0,0,153,154,5,110,
		0,0,154,24,1,0,0,0,155,156,5,112,0,0,156,157,5,114,0,0,157,158,5,105,0,
		0,158,159,5,110,0,0,159,160,5,116,0,0,160,26,1,0,0,0,161,162,5,43,0,0,
		162,28,1,0,0,0,163,164,5,45,0,0,164,30,1,0,0,0,165,166,5,42,0,0,166,32,
		1,0,0,0,167,168,5,47,0,0,168,34,1,0,0,0,169,170,5,37,0,0,170,36,1,0,0,
		0,171,172,5,38,0,0,172,173,5,38,0,0,173,38,1,0,0,0,174,175,5,124,0,0,175,
		176,5,124,0,0,176,40,1,0,0,0,177,178,5,33,0,0,178,42,1,0,0,0,179,180,5,
		61,0,0,180,181,5,61,0,0,181,44,1,0,0,0,182,183,5,33,0,0,183,184,5,61,0,
		0,184,46,1,0,0,0,185,186,5,62,0,0,186,48,1,0,0,0,187,188,5,60,0,0,188,
		50,1,0,0,0,189,190,5,62,0,0,190,191,5,61,0,0,191,52,1,0,0,0,192,193,5,
		60,0,0,193,194,5,61,0,0,194,54,1,0,0,0,195,196,5,61,0,0,196,56,1,0,0,0,
		197,198,5,40,0,0,198,58,1,0,0,0,199,200,5,41,0,0,200,60,1,0,0,0,201,202,
		5,123,0,0,202,62,1,0,0,0,203,204,5,125,0,0,204,64,1,0,0,0,205,206,5,91,
		0,0,206,66,1,0,0,0,207,208,5,93,0,0,208,68,1,0,0,0,209,210,5,59,0,0,210,
		70,1,0,0,0,211,212,5,44,0,0,212,72,1,0,0,0,213,214,5,58,0,0,214,74,1,0,
		0,0,215,216,5,34,0,0,216,76,1,0,0,0,217,219,7,0,0,0,218,217,1,0,0,0,219,
		220,1,0,0,0,220,218,1,0,0,0,220,221,1,0,0,0,221,78,1,0,0,0,222,224,7,0,
		0,0,223,222,1,0,0,0,224,225,1,0,0,0,225,223,1,0,0,0,225,226,1,0,0,0,226,
		227,1,0,0,0,227,229,5,46,0,0,228,230,7,0,0,0,229,228,1,0,0,0,230,231,1,
		0,0,0,231,229,1,0,0,0,231,232,1,0,0,0,232,80,1,0,0,0,233,237,5,34,0,0,
		234,236,9,0,0,0,235,234,1,0,0,0,236,239,1,0,0,0,237,238,1,0,0,0,237,235,
		1,0,0,0,238,240,1,0,0,0,239,237,1,0,0,0,240,241,5,34,0,0,241,82,1,0,0,
		0,242,243,5,116,0,0,243,244,5,114,0,0,244,245,5,117,0,0,245,252,5,101,
		0,0,246,247,5,102,0,0,247,248,5,97,0,0,248,249,5,108,0,0,249,250,5,115,
		0,0,250,252,5,101,0,0,251,242,1,0,0,0,251,246,1,0,0,0,252,84,1,0,0,0,253,
		257,7,1,0,0,254,256,7,2,0,0,255,254,1,0,0,0,256,259,1,0,0,0,257,255,1,
		0,0,0,257,258,1,0,0,0,258,86,1,0,0,0,259,257,1,0,0,0,260,262,7,3,0,0,261,
		260,1,0,0,0,262,263,1,0,0,0,263,261,1,0,0,0,263,264,1,0,0,0,264,265,1,
		0,0,0,265,266,6,43,0,0,266,88,1,0,0,0,267,268,5,47,0,0,268,269,5,47,0,
		0,269,273,1,0,0,0,270,272,9,0,0,0,271,270,1,0,0,0,272,275,1,0,0,0,273,
		274,1,0,0,0,273,271,1,0,0,0,274,276,1,0,0,0,275,273,1,0,0,0,276,277,5,
		10,0,0,277,278,1,0,0,0,278,279,6,44,0,0,279,90,1,0,0,0,280,281,5,47,0,
		0,281,282,5,42,0,0,282,286,1,0,0,0,283,285,9,0,0,0,284,283,1,0,0,0,285,
		288,1,0,0,0,286,287,1,0,0,0,286,284,1,0,0,0,287,289,1,0,0,0,288,286,1,
		0,0,0,289,290,5,42,0,0,290,291,5,47,0,0,291,292,1,0,0,0,292,293,6,45,0,
		0,293,92,1,0,0,0,10,0,220,225,231,237,251,257,263,273,286,1,6,0,0
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
