{
  "api/Cobra.Cobra.html": {
    "href": "api/Cobra.Cobra.html",
    "title": "Class Cobra | cobra",
    "summary": "Class Cobra Namespace Cobra Assembly Cobra.dll Main Class that initiates the interpreter toolchain public abstract class Cobra Inheritance object Cobra Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods Main(string[]) public static int Main(string[] args) Parameters args string[] Returns int"
  },
  "api/Cobra.Environment.CobraBuiltinFunction.html": {
    "href": "api/Cobra.Environment.CobraBuiltinFunction.html",
    "title": "Class CobraBuiltinFunction | cobra",
    "summary": "Class CobraBuiltinFunction Namespace Cobra.Environment Assembly Cobra.dll public class CobraBuiltinFunction : CobraFunctionDefinition Inheritance object CobraFunctionDefinition CobraBuiltinFunction Inherited Members CobraFunctionDefinition.Name CobraFunctionDefinition.ReturnType CobraFunctionDefinition.Parameters CobraFunctionDefinition.Body CobraFunctionDefinition.Closure object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors CobraBuiltinFunction(string, Func<List<object?>, object?>) public CobraBuiltinFunction(string name, Func<List<object?>, object?> action) Parameters name string action Func<List<object>, object> Fields Action public readonly Func<List<object?>, object?> Action Field Value Func<List<object>, object>"
  },
  "api/Cobra.Environment.CobraClass.html": {
    "href": "api/Cobra.Environment.CobraClass.html",
    "title": "Class CobraClass | cobra",
    "summary": "Class CobraClass Namespace Cobra.Environment Assembly Cobra.dll public class CobraClass Inheritance object CobraClass Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Constructors CobraClass(string, CobraUserDefinedFunction?, CobraUserDefinedFunction?, Dictionary<string, CobraFunctionDefinition>, Dictionary<string, (object?, bool)>, CobraEnvironment) public CobraClass(string name, CobraUserDefinedFunction? constructor, CobraUserDefinedFunction? destructor, Dictionary<string, CobraFunctionDefinition> methods, Dictionary<string, (object?, bool)> fields, CobraEnvironment staticEnvironment) Parameters name string constructor CobraUserDefinedFunction destructor CobraUserDefinedFunction methods Dictionary<string, CobraFunctionDefinition> fields Dictionary<string, (object, bool)> staticEnvironment CobraEnvironment Properties Constructor public CobraUserDefinedFunction? Constructor { get; } Property Value CobraUserDefinedFunction Destructor public CobraUserDefinedFunction? Destructor { get; } Property Value CobraUserDefinedFunction Fields public Dictionary<string, (object? InitialValue, bool IsPublic)> Fields { get; } Property Value Dictionary<string, (object, bool)> Methods public Dictionary<string, CobraFunctionDefinition> Methods { get; } Property Value Dictionary<string, CobraFunctionDefinition> Name public string Name { get; } Property Value string StaticEnvironment public CobraEnvironment StaticEnvironment { get; } Property Value CobraEnvironment Methods ToString() Returns a string that represents the current object. public override string ToString() Returns string A string that represents the current object."
  },
  "api/Cobra.Environment.CobraEnum.html": {
    "href": "api/Cobra.Environment.CobraEnum.html",
    "title": "Class CobraEnum | cobra",
    "summary": "Class CobraEnum Namespace Cobra.Environment Assembly Cobra.dll public class CobraEnum Inheritance object CobraEnum Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Constructors CobraEnum(string, Dictionary<string, CobraEnumMember>) public CobraEnum(string name, Dictionary<string, CobraEnumMember> members) Parameters name string members Dictionary<string, CobraEnumMember> Properties Members public Dictionary<string, CobraEnumMember> Members { get; } Property Value Dictionary<string, CobraEnumMember> Name public string Name { get; } Property Value string Methods ToString() Returns a string that represents the current object. public override string ToString() Returns string A string that represents the current object."
  },
  "api/Cobra.Environment.CobraEnumMember.html": {
    "href": "api/Cobra.Environment.CobraEnumMember.html",
    "title": "Class CobraEnumMember | cobra",
    "summary": "Class CobraEnumMember Namespace Cobra.Environment Assembly Cobra.dll public class CobraEnumMember Inheritance object CobraEnumMember Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Constructors CobraEnumMember(string, long, CobraEnum) public CobraEnumMember(string name, long value, CobraEnum enumType) Parameters name string value long enumType CobraEnum Properties EnumType public CobraEnum EnumType { get; } Property Value CobraEnum Name public string Name { get; } Property Value string Value public long Value { get; } Property Value long Methods ToString() Returns a string that represents the current object. public override string ToString() Returns string A string that represents the current object."
  },
  "api/Cobra.Environment.CobraEnvironment.html": {
    "href": "api/Cobra.Environment.CobraEnvironment.html",
    "title": "Class CobraEnvironment | cobra",
    "summary": "Class CobraEnvironment Namespace Cobra.Environment Assembly Cobra.dll public class CobraEnvironment Inheritance object CobraEnvironment Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors CobraEnvironment(CobraEnvironment?) public CobraEnvironment(CobraEnvironment? parent = null) Parameters parent CobraEnvironment Methods AssignVariable(string, object?) public void AssignVariable(string name, object? value) Parameters name string value object CreateChild() public CobraEnvironment CreateChild() Returns CobraEnvironment CreateGlobalEnvironment(string[]) public static CobraEnvironment CreateGlobalEnvironment(string[] scriptArgs) Parameters scriptArgs string[] Returns CobraEnvironment DefineVariable(string, object?, bool, bool) public void DefineVariable(string name, object? value, bool isConst = false, bool isArray = false) Parameters name string value object isConst bool isArray bool GetVariable(string) public object? GetVariable(string name) Parameters name string Returns object GetVariableDefinition(string) public CobraVariableDefinition GetVariableDefinition(string name) Parameters name string Returns CobraVariableDefinition IsFunction(string) public bool IsFunction(string name) Parameters name string Returns bool"
  },
  "api/Cobra.Environment.CobraExternalFunction.html": {
    "href": "api/Cobra.Environment.CobraExternalFunction.html",
    "title": "Class CobraExternalFunction | cobra",
    "summary": "Class CobraExternalFunction Namespace Cobra.Environment Assembly Cobra.dll public class CobraExternalFunction : CobraFunctionDefinition Inheritance object CobraFunctionDefinition CobraExternalFunction Inherited Members CobraFunctionDefinition.Name CobraFunctionDefinition.ReturnType CobraFunctionDefinition.Parameters CobraFunctionDefinition.Body CobraFunctionDefinition.Closure object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors CobraExternalFunction(string, CobraRuntimeTypes, List<(CobraRuntimeTypes Type, string Name)>, string) public CobraExternalFunction(string name, CobraRuntimeTypes returnType, List<(CobraRuntimeTypes Type, string Name)> parameters, string libraryPath) Parameters name string returnType CobraRuntimeTypes parameters List<(CobraRuntimeTypes Type, string Name)> libraryPath string Properties LibraryPath public string LibraryPath { get; } Property Value string"
  },
  "api/Cobra.Environment.CobraFunctionDefinition.html": {
    "href": "api/Cobra.Environment.CobraFunctionDefinition.html",
    "title": "Class CobraFunctionDefinition | cobra",
    "summary": "Class CobraFunctionDefinition Namespace Cobra.Environment Assembly Cobra.dll public abstract class CobraFunctionDefinition Inheritance object CobraFunctionDefinition Derived CobraBuiltinFunction CobraExternalFunction CobraUserDefinedFunction Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors CobraFunctionDefinition(string, CobraRuntimeTypes, List<(CobraRuntimeTypes Type, string Name)>, BlockContext, CobraEnvironment) protected CobraFunctionDefinition(string name, CobraRuntimeTypes returnType, List<(CobraRuntimeTypes Type, string Name)> parameters, CobraParser.BlockContext body, CobraEnvironment closure) Parameters name string returnType CobraRuntimeTypes parameters List<(CobraRuntimeTypes Type, string Name)> body CobraParser.BlockContext closure CobraEnvironment Properties Body public CobraParser.BlockContext Body { get; } Property Value CobraParser.BlockContext Closure public CobraEnvironment Closure { get; } Property Value CobraEnvironment Name public string Name { get; } Property Value string Parameters public List<(CobraRuntimeTypes Type, string Name)> Parameters { get; } Property Value List<(CobraRuntimeTypes Type, string Name)> ReturnType public CobraRuntimeTypes ReturnType { get; } Property Value CobraRuntimeTypes"
  },
  "api/Cobra.Environment.CobraHandle.html": {
    "href": "api/Cobra.Environment.CobraHandle.html",
    "title": "Class CobraHandle | cobra",
    "summary": "Class CobraHandle Namespace Cobra.Environment Assembly Cobra.dll public class CobraHandle Inheritance object CobraHandle Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Constructors CobraHandle(nint) public CobraHandle(nint pointer) Parameters pointer nint Properties Pointer public nint Pointer { get; } Property Value nint Methods ToString() Returns a string that represents the current object. public override string ToString() Returns string A string that represents the current object."
  },
  "api/Cobra.Environment.CobraInstance.html": {
    "href": "api/Cobra.Environment.CobraInstance.html",
    "title": "Class CobraInstance | cobra",
    "summary": "Class CobraInstance Namespace Cobra.Environment Assembly Cobra.dll public class CobraInstance Inheritance object CobraInstance Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Constructors CobraInstance(CobraClass) public CobraInstance(CobraClass classDefinition) Parameters classDefinition CobraClass Properties ClassDefinition public CobraClass ClassDefinition { get; } Property Value CobraClass Fields public CobraEnvironment Fields { get; } Property Value CobraEnvironment Methods Get(string) public object? Get(string name) Parameters name string Returns object Set(string, object?) public void Set(string name, object? value) Parameters name string value object ToString() Returns a string that represents the current object. public override string ToString() Returns string A string that represents the current object."
  },
  "api/Cobra.Environment.CobraMarkup.html": {
    "href": "api/Cobra.Environment.CobraMarkup.html",
    "title": "Class CobraMarkup | cobra",
    "summary": "Class CobraMarkup Namespace Cobra.Environment Assembly Cobra.dll public class CobraMarkup Inheritance object CobraMarkup Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Constructors CobraMarkup(string) public CobraMarkup(string content) Parameters content string Properties RawContent public string RawContent { get; } Property Value string Methods ToString() Returns a string that represents the current object. public override string ToString() Returns string A string that represents the current object."
  },
  "api/Cobra.Environment.CobraNamespace.html": {
    "href": "api/Cobra.Environment.CobraNamespace.html",
    "title": "Class CobraNamespace | cobra",
    "summary": "Class CobraNamespace Namespace Cobra.Environment Assembly Cobra.dll public class CobraNamespace Inheritance object CobraNamespace Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Constructors CobraNamespace(string, CobraEnvironment) public CobraNamespace(string name, CobraEnvironment parentScope) Parameters name string parentScope CobraEnvironment Properties Environment public CobraEnvironment Environment { get; } Property Value CobraEnvironment Name public string Name { get; } Property Value string Methods ToString() Returns a string that represents the current object. public override string ToString() Returns string A string that represents the current object."
  },
  "api/Cobra.Environment.CobraRuntimeTypes.html": {
    "href": "api/Cobra.Environment.CobraRuntimeTypes.html",
    "title": "Enum CobraRuntimeTypes | cobra",
    "summary": "Enum CobraRuntimeTypes Namespace Cobra.Environment Assembly Cobra.dll public enum CobraRuntimeTypes Fields Bool = 12 Class = 20 Dict = 14 Enum = 22 EnumMember = 23 Float32 = 10 Float64 = 11 Function = 16 Handle = 18 Instance = 21 Int16 = 3 Int32 = 4 Int64 = 5 Int8 = 2 List = 15 Markup = 17 Namespace = 19 Null = 1 String = 13 UInt16 = 7 UInt32 = 8 UInt64 = 9 UInt8 = 6 Void = 0"
  },
  "api/Cobra.Environment.CobraUserDefinedFunction.html": {
    "href": "api/Cobra.Environment.CobraUserDefinedFunction.html",
    "title": "Class CobraUserDefinedFunction | cobra",
    "summary": "Class CobraUserDefinedFunction Namespace Cobra.Environment Assembly Cobra.dll public class CobraUserDefinedFunction : CobraFunctionDefinition Inheritance object CobraFunctionDefinition CobraUserDefinedFunction Inherited Members CobraFunctionDefinition.Name CobraFunctionDefinition.ReturnType CobraFunctionDefinition.Parameters CobraFunctionDefinition.Body CobraFunctionDefinition.Closure object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors CobraUserDefinedFunction(string, List<(CobraRuntimeTypes Type, string Name)>, BlockContext, CobraEnvironment) public CobraUserDefinedFunction(string name, List<(CobraRuntimeTypes Type, string Name)> parameters, CobraParser.BlockContext body, CobraEnvironment closure) Parameters name string parameters List<(CobraRuntimeTypes Type, string Name)> body CobraParser.BlockContext closure CobraEnvironment"
  },
  "api/Cobra.Environment.CobraVariableDefinition.html": {
    "href": "api/Cobra.Environment.CobraVariableDefinition.html",
    "title": "Class CobraVariableDefinition | cobra",
    "summary": "Class CobraVariableDefinition Namespace Cobra.Environment Assembly Cobra.dll public class CobraVariableDefinition Inheritance object CobraVariableDefinition Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors CobraVariableDefinition(string, CobraRuntimeTypes, object?, bool, bool) public CobraVariableDefinition(string name, CobraRuntimeTypes runtimeType, object? value = null, bool isConst = false, bool isArray = false) Parameters name string runtimeType CobraRuntimeTypes value object isConst bool isArray bool Properties IsArray public bool IsArray { get; } Property Value bool IsConst public bool IsConst { get; } Property Value bool IsFunction public bool IsFunction { get; } Property Value bool IsMarkup public bool IsMarkup { get; } Property Value bool Name public string Name { get; } Property Value string RuntimeType public CobraRuntimeTypes RuntimeType { get; } Property Value CobraRuntimeTypes Value public object? Value { get; set; } Property Value object"
  },
  "api/Cobra.Environment.html": {
    "href": "api/Cobra.Environment.html",
    "title": "Namespace Cobra.Environment | cobra",
    "summary": "Namespace Cobra.Environment Classes CobraBuiltinFunction CobraClass CobraEnum CobraEnumMember CobraEnvironment CobraExternalFunction CobraFunctionDefinition CobraHandle CobraInstance CobraMarkup CobraNamespace CobraUserDefinedFunction CobraVariableDefinition Enums CobraRuntimeTypes"
  },
  "api/Cobra.Interpreter.CallFrame.html": {
    "href": "api/Cobra.Interpreter.CallFrame.html",
    "title": "Class CallFrame | cobra",
    "summary": "Class CallFrame Namespace Cobra.Interpreter Assembly Cobra.dll public class CallFrame Inheritance object CallFrame Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors CallFrame(string, string, IToken) public CallFrame(string functionName, string sourcePath, IToken callSiteToken) Parameters functionName string sourcePath string callSiteToken IToken Properties Column public int Column { get; } Property Value int FunctionName public string FunctionName { get; } Property Value string Line public int Line { get; } Property Value int SourcePath public string SourcePath { get; } Property Value string StartIndex public int StartIndex { get; } Property Value int StopIndex public int StopIndex { get; } Property Value int"
  },
  "api/Cobra.Interpreter.CobraBreakValue.html": {
    "href": "api/Cobra.Interpreter.CobraBreakValue.html",
    "title": "Class CobraBreakValue | cobra",
    "summary": "Class CobraBreakValue Namespace Cobra.Interpreter Assembly Cobra.dll public class CobraBreakValue Inheritance object CobraBreakValue Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Fields Instance public static readonly CobraBreakValue Instance Field Value CobraBreakValue"
  },
  "api/Cobra.Interpreter.CobraContinueValue.html": {
    "href": "api/Cobra.Interpreter.CobraContinueValue.html",
    "title": "Class CobraContinueValue | cobra",
    "summary": "Class CobraContinueValue Namespace Cobra.Interpreter Assembly Cobra.dll public class CobraContinueValue Inheritance object CobraContinueValue Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Fields Instance public static readonly CobraContinueValue Instance Field Value CobraContinueValue"
  },
  "api/Cobra.Interpreter.CobraDelegateFactory.html": {
    "href": "api/Cobra.Interpreter.CobraDelegateFactory.html",
    "title": "Class CobraDelegateFactory | cobra",
    "summary": "Class CobraDelegateFactory Namespace Cobra.Interpreter Assembly Cobra.dll public static class CobraDelegateFactory Inheritance object CobraDelegateFactory Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods Create(Type, params Type[]) public static Type Create(Type returnType, params Type[] parameterTypes) Parameters returnType Type parameterTypes Type[] Returns Type"
  },
  "api/Cobra.Interpreter.CobraInterpreter.html": {
    "href": "api/Cobra.Interpreter.CobraInterpreter.html",
    "title": "Class CobraInterpreter | cobra",
    "summary": "Class CobraInterpreter Namespace Cobra.Interpreter Assembly Cobra.dll public class CobraInterpreter : CobraBaseVisitor<object?>, ICobraVisitor<object?>, IParseTreeVisitor<object?> Inheritance object AbstractParseTreeVisitor<object> CobraBaseVisitor<object> CobraInterpreter Implements ICobraVisitor<object> IParseTreeVisitor<object> Inherited Members CobraBaseVisitor<object>.VisitQualifiedName(CobraParser.QualifiedNameContext) CobraBaseVisitor<object>.VisitTopLevelDeclaration(CobraParser.TopLevelDeclarationContext) CobraBaseVisitor<object>.VisitEnumMemberList(CobraParser.EnumMemberListContext) CobraBaseVisitor<object>.VisitEnumMember(CobraParser.EnumMemberContext) CobraBaseVisitor<object>.VisitMemberDeclaration(CobraParser.MemberDeclarationContext) CobraBaseVisitor<object>.VisitAccessModifier(CobraParser.AccessModifierContext) CobraBaseVisitor<object>.VisitFieldDeclaration(CobraParser.FieldDeclarationContext) CobraBaseVisitor<object>.VisitMethodDeclaration(CobraParser.MethodDeclarationContext) CobraBaseVisitor<object>.VisitConstructorDeclaration(CobraParser.ConstructorDeclarationContext) CobraBaseVisitor<object>.VisitDestructorDeclaration(CobraParser.DestructorDeclarationContext) CobraBaseVisitor<object>.VisitType(CobraParser.TypeContext) CobraBaseVisitor<object>.VisitSecondaryType(CobraParser.SecondaryTypeContext) CobraBaseVisitor<object>.VisitPrimitiveType(CobraParser.PrimitiveTypeContext) CobraBaseVisitor<object>.VisitParameterList(CobraParser.ParameterListContext) CobraBaseVisitor<object>.VisitParameter(CobraParser.ParameterContext) CobraBaseVisitor<object>.VisitStatement(CobraParser.StatementContext) CobraBaseVisitor<object>.VisitDeclarationStatement(CobraParser.DeclarationStatementContext) CobraBaseVisitor<object>.VisitSwitchBlock(CobraParser.SwitchBlockContext) CobraBaseVisitor<object>.VisitSwitchLabel(CobraParser.SwitchLabelContext) CobraBaseVisitor<object>.VisitThrowStatement(CobraParser.ThrowStatementContext) CobraBaseVisitor<object>.VisitUnaryOp(CobraParser.UnaryOpContext) CobraBaseVisitor<object>.VisitLeftHandSide(CobraParser.LeftHandSideContext) CobraBaseVisitor<object>.VisitArgumentList(CobraParser.ArgumentListContext) CobraBaseVisitor<object>.VisitDictEntry(CobraParser.DictEntryContext) CobraBaseVisitor<object>.VisitAssignmentOperator(CobraParser.AssignmentOperatorContext) AbstractParseTreeVisitor<object>.Visit(IParseTree) AbstractParseTreeVisitor<object>.VisitChildren(IRuleNode) AbstractParseTreeVisitor<object>.VisitTerminal(ITerminalNode) AbstractParseTreeVisitor<object>.VisitErrorNode(IErrorNode) AbstractParseTreeVisitor<object>.AggregateResult(object, object) AbstractParseTreeVisitor<object>.ShouldVisitNextChild(IRuleNode, object) AbstractParseTreeVisitor<object>.DefaultResult object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors CobraInterpreter(CobraEnvironment) Constructor to the Interpreter public CobraInterpreter(CobraEnvironment globalEnvironment) Parameters globalEnvironment CobraEnvironment Methods ExecuteFunctionCall(object?, List<object?>, string, CobraInstance?, IToken?) public object? ExecuteFunctionCall(object? funcObject, List<object?> args, string funcNameForError, CobraInstance? instanceContext = null, IToken? callSiteToken = null) Parameters funcObject object args List<object> funcNameForError string instanceContext CobraInstance callSiteToken IToken Returns object Interpret(IParseTree, string?) public object? Interpret(IParseTree tree, string? sourcePath) Parameters tree IParseTree sourcePath string Returns object VisitArrayLiteral(ArrayLiteralContext) Visit a parse tree produced by arrayLiteral(). The default implementation returns the result of calling Antlr4.Runtime.Tree.AbstractParseTreeVisitor<Result>.VisitChildren(Antlr4.Runtime.Tree.IRuleNode) on context. public override object VisitArrayLiteral(CobraParser.ArrayLiteralContext context) Parameters context CobraParser.ArrayLiteralContext The parse tree. Returns object VisitAssignmentExpression(AssignmentExpressionContext) Visit a parse tree produced by assignmentExpression(). The default implementation returns the result of calling Antlr4.Runtime.Tree.AbstractParseTreeVisitor<Result>.VisitChildren(Antlr4.Runtime.Tree.IRuleNode) on context. public override object? VisitAssignmentExpression(CobraParser.AssignmentExpressionContext context) Parameters context CobraParser.AssignmentExpressionContext The parse tree. Returns object VisitBinaryExpression(BinaryExpressionContext) Visit a parse tree produced by binaryExpression(). The default implementation returns the result of calling Antlr4.Runtime.Tree.AbstractParseTreeVisitor<Result>.VisitChildren(Antlr4.Runtime.Tree.IRuleNode) on context. public override object? VisitBinaryExpression(CobraParser.BinaryExpressionContext context) Parameters context CobraParser.BinaryExpressionContext The parse tree. Returns object VisitBlock(BlockContext) Visit a parse tree produced by block(). The default implementation returns the result of calling Antlr4.Runtime.Tree.AbstractParseTreeVisitor<Result>.VisitChildren(Antlr4.Runtime.Tree.IRuleNode) on context. public override object? VisitBlock(CobraParser.BlockContext context) Parameters context CobraParser.BlockContext The parse tree. Returns object VisitClassDeclaration(ClassDeclarationContext) Visit a parse tree produced by classDeclaration(). The default implementation returns the result of calling Antlr4.Runtime.Tree.AbstractParseTreeVisitor<Result>.VisitChildren(Antlr4.Runtime.Tree.IRuleNode) on context. public override object? VisitClassDeclaration(CobraParser.ClassDeclarationContext context) Parameters context CobraParser.ClassDeclarationContext The parse tree. Returns object VisitConstDeclaration(ConstDeclarationContext) Visit a parse tree produced by constDeclaration(). The default implementation returns the result of calling Antlr4.Runtime.Tree.AbstractParseTreeVisitor<Result>.VisitChildren(Antlr4.Runtime.Tree.IRuleNode) on context. public override object? VisitConstDeclaration(CobraParser.ConstDeclarationContext context) Parameters context CobraParser.ConstDeclarationContext The parse tree. Returns object VisitDictLiteral(DictLiteralContext) Visit a parse tree produced by dictLiteral(). The default implementation returns the result of calling Antlr4.Runtime.Tree.AbstractParseTreeVisitor<Result>.VisitChildren(Antlr4.Runtime.Tree.IRuleNode) on context. public override object VisitDictLiteral(CobraParser.DictLiteralContext context) Parameters context CobraParser.DictLiteralContext The parse tree. Returns object VisitDoWhileStatement(DoWhileStatementContext) Visit a parse tree produced by doWhileStatement(). The default implementation returns the result of calling Antlr4.Runtime.Tree.AbstractParseTreeVisitor<Result>.VisitChildren(Antlr4.Runtime.Tree.IRuleNode) on context. public override object? VisitDoWhileStatement(CobraParser.DoWhileStatementContext context) Parameters context CobraParser.DoWhileStatementContext The parse tree. Returns object VisitEnumDeclaration(EnumDeclarationContext) Visit a parse tree produced by enumDeclaration(). The default implementation returns the result of calling Antlr4.Runtime.Tree.AbstractParseTreeVisitor<Result>.VisitChildren(Antlr4.Runtime.Tree.IRuleNode) on context. public override object? VisitEnumDeclaration(CobraParser.EnumDeclarationContext context) Parameters context CobraParser.EnumDeclarationContext The parse tree. Returns object VisitExpressionStatement(ExpressionStatementContext) Visit a parse tree produced by expressionStatement(). The default implementation returns the result of calling Antlr4.Runtime.Tree.AbstractParseTreeVisitor<Result>.VisitChildren(Antlr4.Runtime.Tree.IRuleNode) on context. public override object? VisitExpressionStatement(CobraParser.ExpressionStatementContext context) Parameters context CobraParser.ExpressionStatementContext The parse tree. Returns object VisitExternDeclaration(ExternDeclarationContext) Visit a parse tree produced by externDeclaration(). The default implementation returns the result of calling Antlr4.Runtime.Tree.AbstractParseTreeVisitor<Result>.VisitChildren(Antlr4.Runtime.Tree.IRuleNode) on context. public override object? VisitExternDeclaration(CobraParser.ExternDeclarationContext context) Parameters context CobraParser.ExternDeclarationContext The parse tree. Returns object VisitForEachStatement(ForEachStatementContext) Visit a parse tree produced by forEachStatement(). The default implementation returns the result of calling Antlr4.Runtime.Tree.AbstractParseTreeVisitor<Result>.VisitChildren(Antlr4.Runtime.Tree.IRuleNode) on context. public override object? VisitForEachStatement(CobraParser.ForEachStatementContext context) Parameters context CobraParser.ForEachStatementContext The parse tree. Returns object VisitForStatement(ForStatementContext) Visit a parse tree produced by forStatement(). The default implementation returns the result of calling Antlr4.Runtime.Tree.AbstractParseTreeVisitor<Result>.VisitChildren(Antlr4.Runtime.Tree.IRuleNode) on context. public override object? VisitForStatement(CobraParser.ForStatementContext context) Parameters context CobraParser.ForStatementContext The parse tree. Returns object VisitFunctionDeclaration(FunctionDeclarationContext) Visit a parse tree produced by functionDeclaration(). The default implementation returns the result of calling Antlr4.Runtime.Tree.AbstractParseTreeVisitor<Result>.VisitChildren(Antlr4.Runtime.Tree.IRuleNode) on context. public override object? VisitFunctionDeclaration(CobraParser.FunctionDeclarationContext context) Parameters context CobraParser.FunctionDeclarationContext The parse tree. Returns object VisitFunctionExpression(FunctionExpressionContext) Visit a parse tree produced by functionExpression(). The default implementation returns the result of calling Antlr4.Runtime.Tree.AbstractParseTreeVisitor<Result>.VisitChildren(Antlr4.Runtime.Tree.IRuleNode) on context. public override object VisitFunctionExpression(CobraParser.FunctionExpressionContext context) Parameters context CobraParser.FunctionExpressionContext The parse tree. Returns object VisitIfStatement(IfStatementContext) Visit a parse tree produced by ifStatement(). The default implementation returns the result of calling Antlr4.Runtime.Tree.AbstractParseTreeVisitor<Result>.VisitChildren(Antlr4.Runtime.Tree.IRuleNode) on context. public override object? VisitIfStatement(CobraParser.IfStatementContext context) Parameters context CobraParser.IfStatementContext The parse tree. Returns object VisitImportStatement(ImportStatementContext) Visit a parse tree produced by importStatement(). The default implementation returns the result of calling Antlr4.Runtime.Tree.AbstractParseTreeVisitor<Result>.VisitChildren(Antlr4.Runtime.Tree.IRuleNode) on context. public override object? VisitImportStatement(CobraParser.ImportStatementContext context) Parameters context CobraParser.ImportStatementContext The parse tree. Returns object VisitJumpStatement(JumpStatementContext) Visit a parse tree produced by jumpStatement(). The default implementation returns the result of calling Antlr4.Runtime.Tree.AbstractParseTreeVisitor<Result>.VisitChildren(Antlr4.Runtime.Tree.IRuleNode) on context. public override object? VisitJumpStatement(CobraParser.JumpStatementContext context) Parameters context CobraParser.JumpStatementContext The parse tree. Returns object VisitLinkStatement(LinkStatementContext) Visit a parse tree produced by linkStatement(). The default implementation returns the result of calling Antlr4.Runtime.Tree.AbstractParseTreeVisitor<Result>.VisitChildren(Antlr4.Runtime.Tree.IRuleNode) on context. public override object? VisitLinkStatement(CobraParser.LinkStatementContext context) Parameters context CobraParser.LinkStatementContext The parse tree. Returns object VisitLiteral(LiteralContext) Visit a parse tree produced by literal(). The default implementation returns the result of calling Antlr4.Runtime.Tree.AbstractParseTreeVisitor<Result>.VisitChildren(Antlr4.Runtime.Tree.IRuleNode) on context. public override object? VisitLiteral(CobraParser.LiteralContext context) Parameters context CobraParser.LiteralContext The parse tree. Returns object VisitNamespaceDeclaration(NamespaceDeclarationContext) Visit a parse tree produced by namespaceDeclaration(). The default implementation returns the result of calling Antlr4.Runtime.Tree.AbstractParseTreeVisitor<Result>.VisitChildren(Antlr4.Runtime.Tree.IRuleNode) on context. public override object? VisitNamespaceDeclaration(CobraParser.NamespaceDeclarationContext context) Parameters context CobraParser.NamespaceDeclarationContext The parse tree. Returns object VisitNewExpression(NewExpressionContext) public object? VisitNewExpression(CobraParser.NewExpressionContext context) Parameters context CobraParser.NewExpressionContext Returns object VisitPostfixExpression(PostfixExpressionContext) Visit a parse tree produced by postfixExpression(). The default implementation returns the result of calling Antlr4.Runtime.Tree.AbstractParseTreeVisitor<Result>.VisitChildren(Antlr4.Runtime.Tree.IRuleNode) on context. public override object? VisitPostfixExpression(CobraParser.PostfixExpressionContext context) Parameters context CobraParser.PostfixExpressionContext The parse tree. Returns object VisitPrimary(PrimaryContext) Visit a parse tree produced by primary(). The default implementation returns the result of calling Antlr4.Runtime.Tree.AbstractParseTreeVisitor<Result>.VisitChildren(Antlr4.Runtime.Tree.IRuleNode) on context. public override object? VisitPrimary(CobraParser.PrimaryContext context) Parameters context CobraParser.PrimaryContext The parse tree. Returns object VisitProgram(ProgramContext) Visit a parse tree produced by program(). The default implementation returns the result of calling Antlr4.Runtime.Tree.AbstractParseTreeVisitor<Result>.VisitChildren(Antlr4.Runtime.Tree.IRuleNode) on context. public override object? VisitProgram(CobraParser.ProgramContext context) Parameters context CobraParser.ProgramContext The parse tree. Returns object VisitSwitchStatement(SwitchStatementContext) Visit a parse tree produced by switchStatement(). The default implementation returns the result of calling Antlr4.Runtime.Tree.AbstractParseTreeVisitor<Result>.VisitChildren(Antlr4.Runtime.Tree.IRuleNode) on context. public override object? VisitSwitchStatement(CobraParser.SwitchStatementContext context) Parameters context CobraParser.SwitchStatementContext The parse tree. Returns object VisitTryStatement(TryStatementContext) Visit a parse tree produced by tryStatement(). The default implementation returns the result of calling Antlr4.Runtime.Tree.AbstractParseTreeVisitor<Result>.VisitChildren(Antlr4.Runtime.Tree.IRuleNode) on context. public override object? VisitTryStatement(CobraParser.TryStatementContext context) Parameters context CobraParser.TryStatementContext The parse tree. Returns object VisitVarDeclaration(VarDeclarationContext) Visit a parse tree produced by varDeclaration(). The default implementation returns the result of calling Antlr4.Runtime.Tree.AbstractParseTreeVisitor<Result>.VisitChildren(Antlr4.Runtime.Tree.IRuleNode) on context. public override object? VisitVarDeclaration(CobraParser.VarDeclarationContext context) Parameters context CobraParser.VarDeclarationContext The parse tree. Returns object VisitWhileStatement(WhileStatementContext) Visit a parse tree produced by whileStatement(). The default implementation returns the result of calling Antlr4.Runtime.Tree.AbstractParseTreeVisitor<Result>.VisitChildren(Antlr4.Runtime.Tree.IRuleNode) on context. public override object? VisitWhileStatement(CobraParser.WhileStatementContext context) Parameters context CobraParser.WhileStatementContext The parse tree. Returns object"
  },
  "api/Cobra.Interpreter.CobraLiteralHelper.html": {
    "href": "api/Cobra.Interpreter.CobraLiteralHelper.html",
    "title": "Class CobraLiteralHelper | cobra",
    "summary": "Class CobraLiteralHelper Namespace Cobra.Interpreter Assembly Cobra.dll public static class CobraLiteralHelper Inheritance object CobraLiteralHelper Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods IsNumeric(object?) public static bool IsNumeric(object? o) Parameters o object Returns bool IsTruthy(object?) public static bool IsTruthy(object? o) Parameters o object Returns bool UnescapeBacktickString(string) public static string UnescapeBacktickString(string token) Parameters token string Returns string UnescapeString(string) public static string UnescapeString(string token) Parameters token string Returns string"
  },
  "api/Cobra.Interpreter.CobraReturnValue.html": {
    "href": "api/Cobra.Interpreter.CobraReturnValue.html",
    "title": "Class CobraReturnValue | cobra",
    "summary": "Class CobraReturnValue Namespace Cobra.Interpreter Assembly Cobra.dll public class CobraReturnValue Inheritance object CobraReturnValue Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors CobraReturnValue(object?) public CobraReturnValue(object? value) Parameters value object Fields Value public readonly object? Value Field Value object"
  },
  "api/Cobra.Interpreter.CobraRuntimeException.html": {
    "href": "api/Cobra.Interpreter.CobraRuntimeException.html",
    "title": "Class CobraRuntimeException | cobra",
    "summary": "Class CobraRuntimeException Namespace Cobra.Interpreter Assembly Cobra.dll public class CobraRuntimeException : Exception, ISerializable Inheritance object Exception CobraRuntimeException Implements ISerializable Inherited Members Exception.GetBaseException() Exception.GetType() Exception.ToString() Exception.Data Exception.HelpLink Exception.HResult Exception.InnerException Exception.Message Exception.Source Exception.StackTrace Exception.TargetSite Exception.SerializeObjectState object.Equals(object) object.Equals(object, object) object.GetHashCode() object.MemberwiseClone() object.ReferenceEquals(object, object) Constructors CobraRuntimeException(string, CobraStackTrace?) public CobraRuntimeException(string message, CobraStackTrace? stackTrace = null) Parameters message string stackTrace CobraStackTrace Properties StackTraceValue public CobraStackTrace? StackTraceValue { get; } Property Value CobraStackTrace"
  },
  "api/Cobra.Interpreter.CobraStackTrace.html": {
    "href": "api/Cobra.Interpreter.CobraStackTrace.html",
    "title": "Class CobraStackTrace | cobra",
    "summary": "Class CobraStackTrace Namespace Cobra.Interpreter Assembly Cobra.dll public class CobraStackTrace : IEnumerable<CallFrame>, IEnumerable Inheritance object CobraStackTrace Implements IEnumerable<CallFrame> IEnumerable Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors CobraStackTrace() public CobraStackTrace() CobraStackTrace(CobraStackTrace) public CobraStackTrace(CobraStackTrace other) Parameters other CobraStackTrace CobraStackTrace(IEnumerable<CallFrame>) public CobraStackTrace(IEnumerable<CallFrame> frames) Parameters frames IEnumerable<CallFrame> Properties Count public int Count { get; } Property Value int Methods GetEnumerator() Returns an enumerator that iterates through the collection. public IEnumerator<CallFrame> GetEnumerator() Returns IEnumerator<CallFrame> An enumerator that can be used to iterate through the collection. Peek() public CallFrame? Peek() Returns CallFrame Pop() public CallFrame Pop() Returns CallFrame Push(CallFrame) public void Push(CallFrame frame) Parameters frame CallFrame"
  },
  "api/Cobra.Interpreter.CobraThrowValue.html": {
    "href": "api/Cobra.Interpreter.CobraThrowValue.html",
    "title": "Class CobraThrowValue | cobra",
    "summary": "Class CobraThrowValue Namespace Cobra.Interpreter Assembly Cobra.dll public class CobraThrowValue Inheritance object CobraThrowValue Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors CobraThrowValue(object, CobraStackTrace?) public CobraThrowValue(object thrownObject, CobraStackTrace? stackTrace) Parameters thrownObject object stackTrace CobraStackTrace Fields StackTrace public readonly CobraStackTrace? StackTrace Field Value CobraStackTrace ThrownObject public readonly object ThrownObject Field Value object"
  },
  "api/Cobra.Interpreter.CobraTypeHelper.html": {
    "href": "api/Cobra.Interpreter.CobraTypeHelper.html",
    "title": "Class CobraTypeHelper | cobra",
    "summary": "Class CobraTypeHelper Namespace Cobra.Interpreter Assembly Cobra.dll public static class CobraTypeHelper Inheritance object CobraTypeHelper Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods Cast(object?, CobraRuntimeTypes) public static object? Cast(object? value, CobraRuntimeTypes targetType) Parameters value object targetType CobraRuntimeTypes Returns object GetRuntimeType(object?) public static CobraRuntimeTypes GetRuntimeType(object? val) Parameters val object Returns CobraRuntimeTypes IsFloatingPoint(object?) public static bool IsFloatingPoint(object? obj) Parameters obj object Returns bool IsInteger(object?) public static bool IsInteger(object? obj) Parameters obj object Returns bool IsNumeric(object?) public static bool IsNumeric(object? obj) Parameters obj object Returns bool PromoteNumericsForBinaryOp(object?, object?) public static (object Left, object Right, CobraRuntimeTypes ResultType) PromoteNumericsForBinaryOp(object? left, object? right) Parameters left object right object Returns (object Left, object Right, CobraRuntimeTypes ResultType)"
  },
  "api/Cobra.Interpreter.CobraTypeMarshaller.html": {
    "href": "api/Cobra.Interpreter.CobraTypeMarshaller.html",
    "title": "Class CobraTypeMarshaller | cobra",
    "summary": "Class CobraTypeMarshaller Namespace Cobra.Interpreter Assembly Cobra.dll public static class CobraTypeMarshaller Inheritance object CobraTypeMarshaller Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods ToDotNetType(CobraRuntimeTypes) public static Type ToDotNetType(CobraRuntimeTypes cobraType) Parameters cobraType CobraRuntimeTypes Returns Type"
  },
  "api/Cobra.Interpreter.html": {
    "href": "api/Cobra.Interpreter.html",
    "title": "Namespace Cobra.Interpreter | cobra",
    "summary": "Namespace Cobra.Interpreter Classes CallFrame CobraBreakValue CobraContinueValue CobraDelegateFactory CobraInterpreter CobraLiteralHelper CobraReturnValue CobraRuntimeException CobraStackTrace CobraThrowValue CobraTypeHelper CobraTypeMarshaller"
  },
  "api/Cobra.Utils.CobraCli.html": {
    "href": "api/Cobra.Utils.CobraCli.html",
    "title": "Class CobraCli | cobra",
    "summary": "Class CobraCli Namespace Cobra.Utils Assembly Cobra.dll public static class CobraCli Inheritance object CobraCli Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods Run(string[]) public static int Run(string[] args) Parameters args string[] Returns int"
  },
  "api/Cobra.Utils.CobraConstants.html": {
    "href": "api/Cobra.Utils.CobraConstants.html",
    "title": "Class CobraConstants | cobra",
    "summary": "Class CobraConstants Namespace Cobra.Utils Assembly Cobra.dll public static class CobraConstants Inheritance object CobraConstants Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Fields Author public const string Author = \"Sujal Choudhari\" Field Value string FileExtension public const string FileExtension = \".cb\" Field Value string Name public const string Name = \"Cobra\" Field Value string StdlibDirectory public const string StdlibDirectory = \"stdlib\" Field Value string Version public const string Version = \"0.1.0\" Field Value string"
  },
  "api/Cobra.Utils.CobraErrorHandler.html": {
    "href": "api/Cobra.Utils.CobraErrorHandler.html",
    "title": "Class CobraErrorHandler | cobra",
    "summary": "Class CobraErrorHandler Namespace Cobra.Utils Assembly Cobra.dll public static class CobraErrorHandler Inheritance object CobraErrorHandler Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods PrintException(CobraThrowValue, string?) public static void PrintException(CobraThrowValue thrown, string? initialSourcePath) Parameters thrown CobraThrowValue initialSourcePath string"
  },
  "api/Cobra.Utils.CobraLogger.html": {
    "href": "api/Cobra.Utils.CobraLogger.html",
    "title": "Class CobraLogger | cobra",
    "summary": "Class CobraLogger Namespace Cobra.Utils Assembly Cobra.dll public class CobraLogger Inheritance object CobraLogger Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods Debug(string, string, int, string) public void Debug(string message, string file = \"\", int line = 0, string member = \"\") Parameters message string file string line int member string Error(string, string, int, string) public void Error(string message, string file = \"\", int line = 0, string member = \"\") Parameters message string file string line int member string GetLogger<T>() public static CobraLogger GetLogger<T>() Returns CobraLogger Type Parameters T Info(string, string, int, string) public void Info(string message, string file = \"\", int line = 0, string member = \"\") Parameters message string file string line int member string Warn(string, string, int, string) public void Warn(string message, string file = \"\", int line = 0, string member = \"\") Parameters message string file string line int member string"
  },
  "api/Cobra.Utils.CobraRunner.html": {
    "href": "api/Cobra.Utils.CobraRunner.html",
    "title": "Class CobraRunner | cobra",
    "summary": "Class CobraRunner Namespace Cobra.Utils Assembly Cobra.dll public class CobraRunner Inheritance object CobraRunner Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods Run(string, string?, string[]?) public void Run(string code, string? sourcePath = null, string[]? scriptArgs = null) Parameters code string sourcePath string scriptArgs string[] StartRepl() public void StartRepl()"
  },
  "api/Cobra.Utils.html": {
    "href": "api/Cobra.Utils.html",
    "title": "Namespace Cobra.Utils | cobra",
    "summary": "Namespace Cobra.Utils Classes CobraCli CobraConstants CobraErrorHandler CobraLogger CobraRunner"
  },
  "api/Cobra.html": {
    "href": "api/Cobra.html",
    "title": "Namespace Cobra | cobra",
    "summary": "Namespace Cobra Classes Cobra Main Class that initiates the interpreter toolchain"
  },
  "docs/getting-started.html": {
    "href": "docs/getting-started.html",
    "title": "Getting Started | cobra",
    "summary": "Getting Started Welcome to Cobra! This guide will walk you through setting up your environment, building the interpreter, and running your first Cobra program. Prerequisites Before you begin, you will need the .NET 9 SDK. You can download it from the official Microsoft website: Download .NET 9 You will also need git to clone the project repository. Step 1: Get the Cobra Source Code Open your terminal or command prompt and clone the Cobra repository from GitHub: git clone https://github.com/SujalChoudhari/Cobra.git cd Cobra This will download the entire project, including the interpreter source code and sample files. Step 2: Build the Interpreter Cobra is a .NET project. To build the interpreter executable, run the following command from the root of the Cobra directory: dotnet build -c Release This command compiles the C# source code and places the final Cobra.exe (on Windows) or Cobra (on Linux/macOS) executable in the bin/Release/net9.0/ directory. Step 3: Write Your First Program Let's start with the classic \"Hello, World!\". Create a new file named hello.cb in the root of the Cobra project directory. Open hello.cb in your favorite text editor and add the following line: // hello.cb print(\"Hello, World from Cobra!\"); The print() function is a built-in that outputs text to the console. All statements in Cobra must end with a semicolon ;. Step 4: Run Your Program To run your script, you execute the Cobra interpreter and pass the path to your file as an argument. On Windows: .\\bin\\Release\\net9.0\\Cobra.exe hello.cb``` **On Linux or macOS:** ```bash ./bin/Release/net9.0/Cobra hello.cb You should see the following output in your terminal: Hello, World from Cobra! A More Detailed Example Let's try something that shows off a few more features, like variables and loops. Create a file named countdown.cb: // countdown.cb // This is a for loop, similar to C or Java. for (int i = 10; i > 0; i--) { print(\"Countdown: \" + i); } print(\"Liftoff!\"); Run it the same way as before: .\\bin\\Release\\net9.0\\Cobra.exe countdown.cb Next Steps Congratulations! You've successfully built the Cobra interpreter and run your first scripts. Now that you have the basics down, it's time to learn more about the language itself. Head over to our Language Basics guide to learn about variables, data types, and control flow."
  },
  "docs/intro.html": {
    "href": "docs/intro.html",
    "title": "Introduction to Cobra | cobra",
    "summary": "Introduction to Cobra Cobra is more than just a programming language; it's a dedicated ecosystem for creative coding. It was born from the idea that creating graphics, simulations, and interactive art should be expressive and accessible, not buried under layers of complex setup and boilerplate. The Vision: Unifying Logic and Visuals In modern graphics development, a programmer often has to juggle multiple languages and APIs: a language like C++ or C# for application logic, a shading language like GLSL or HLSL for the GPU, and a complex API like OpenGL or Vulkan to connect the two. This creates a steep learning curve and a fragmented development process. Cobra's core vision is to eliminate this fragmentation. By integrating a powerful rendering engine directly into the language runtime, Cobra allows you to write your application logic, animations, and visual output in one seamless environment. The ultimate goal is to write everything—from physics simulations to pixel shaders—in pure Cobra. Core Principles The development of Cobra is guided by a few key principles: Simplicity and Readability: The language should be easy to learn for programmers of all levels. The C-style syntax is intentionally familiar, and the built-in graphics commands are designed to be self-explanatory. Low Barrier to Entry: You shouldn't need to be a graphics expert to draw a shape on the screen. Cobra abstracts away the complexities of graphics drivers and APIs, letting you focus on the what, not the how. Performance Where It Counts: While Cobra is an interpreted language for rapid prototyping, it provides a direct FFI (link, external) to its high-performance C++ standard library. This ensures that critical operations like math, string manipulation, and eventually, rendering, run at native speed. Excellent Developer Experience: A language is only as good as its tools. Cobra is being built with a focus on providing clear, actionable error messages with full stack traces and source code context, making debugging an intuitive process. Who is Cobra For? Cobra is designed for: Artists and Designers who want to use code as a creative medium without getting bogged down in technical details. Students and Educators looking for a simple, fun language to teach the fundamentals of programming and computer graphics. Game Developers who need a tool for rapidly prototyping game mechanics and visual ideas. Data Scientists and Engineers who want to create custom, real-time visualizations. Current Status Cobra currently features a fully functional core interpreter. The language supports a rich set of features including variables, all major control flow statements, functions, object-oriented programming with classes, namespaces for code organization, and a native FFI. The next major milestone is the implementation of the \"Cobra Canvas,\" the integrated 2D/3D rendering library that will fulfill the language's core vision."
  },
  "docs/introduction.html": {
    "href": "docs/introduction.html",
    "title": "Cobra: The Expressive Language for Creative Coding | cobra",
    "summary": "Cobra: The Expressive Language for Creative Coding Cobra is a simple, C-style language designed from the ground up for graphics, real-time rendering, and creative expression. It removes the boilerplate of complex graphics APIs, allowing you to focus on your art, simulations, and visual ideas. Cobra unifies high-level logic and low-level rendering in a single, easy-to-learn language. It's a complete ecosystem for bringing your visual projects to life. Key Features Simple & Familiar Syntax: If you know C, C++, C#, or JavaScript, you'll feel right at home with Cobra's clean, C-style syntax. Graphics-First Design: The language is being built with a tightly integrated 2D/3D rendering engine in mind. The goal is to make drawing shapes, handling animations, and creating shaders feel like a natural part of the language. Object-Oriented: Structure your complex projects cleanly with classes, namespaces, and modules. Native Performance: With a C++ standard library and a Foreign Function Interface (FFI), Cobra allows you to call high-performance native code directly, ensuring your creative visions are never limited by speed. Modern Tooling: Built on .NET 9 and ANTLR4, Cobra is engineered for a great developer experience with features like detailed error reporting and stack traces. A Glimpse of the Future While the rendering engine is under development, Cobra is designed for code that feels intuitive and visual. Here’s a conceptual look at what drawing a simple animation will look like: // The future vision for Cobra's rendering API void setup() { // Set up the canvas once at the start Canvas.create(800, 600, \"Bouncing Ball\"); } float x = 400; float y = 300; float x_speed = 2.5; float y_speed = 2.0; void draw() { // This function will be called every frame Canvas.clear(Color.Black); // Update position x += x_speed; y += y_speed; // Handle bouncing off the walls if (x > 800 || x < 0) { x_speed *= -1; } if (y > 600 || y < 0) { y_speed *= -1; } // Draw the circle Canvas.drawCircle(x, y, 20, Color.Red); }"
  },
  "docs/language-basics.html": {
    "href": "docs/language-basics.html",
    "title": "Language Basics | cobra",
    "summary": "Language Basics This guide covers the fundamental syntax and features of the Cobra language. Comments Cobra supports two types of comments, just like C++ and C#: // This is a single-line comment. /* This is a multi-line block comment. */ Variables and Constants Variables are declared with the var keyword and can be reassigned. Constants are declared with const and must be initialized upon declaration. // A variable of type 'int' int score = 0; score = 100; // This is valid. // A constant of type 'float' const float PI = 3.14; // PI = 3.14159; // This would cause a compiler error. Data Types Cobra has a rich set of primitive data types for handling numbers, text, and logic. Integer Types Cobra provides fixed-width integer types for precise control over data. Signed Integers: i8, i16, i32 (or int), i64 (or long) Unsigned Integers: u8, u16, u32 (or uint), u64 (or ulong) i8 temperature = -5; u32 population = 4000000; long stars_in_galaxy = 100000000000; Floating-Point Types For numbers with fractional components. f32 (or float): 32-bit single-precision float. f64 (or double): 64-bit double-precision float. float speed = 9.81; double planck_constant = 6.62607015e-34; Other Primitives bool: Can be true or false. string: A sequence of text characters, enclosed in double quotes. bool is_active = true; string message = \"Welcome to Cobra!\"; Operators Cobra supports standard arithmetic, comparison, and logical operators. Arithmetic: +, -, *, /, % (modulo) Comparison: == (equals), != (not equals), <, >, <=, >= Logical: && (and), || (or), ! (not) int health = 100; health = health - 25; // 75 bool is_alive = health > 0; // true bool can_proceed = is_alive && has_key; Control Flow If / Else Execute code conditionally. if (score > 1000) { print(\"High score!\"); } else if (score > 500) { print(\"Good job!\"); } else { print(\"Keep trying!\"); } Loops Cobra supports for, foreach, while, and do-while loops. // C-style for loop for (int i = 0; i < 5; i++) { print(i); } // while loop int countdown = 3; while (countdown > 0) { print(countdown); countdown--; } // foreach loop (for lists and arrays) int[] numbers =; for (int num in numbers) { print(\"Number: \" + num); } Functions Functions are blocks of reusable code. You must specify the return type and the types of all parameters. // A function that takes two integers and returns an integer. int add(int a, int b) { return a + b; } // A function that does not return a value. void greet(string name) { print(\"Hello, \" + name); } // Calling the functions int sum = add(5, 10); greet(\"Alice\");"
  },
  "index.html": {
    "href": "index.html",
    "title": "Cobra | cobra",
    "summary": "Cobra Cobra is a C-style, object-oriented programming language built for creative coding and real-time graphics. Developed as a C# interpreter using ANTLR4 and the visitor pattern, Cobra aims to unify logic, visualization, and interactivity in one language. Technical Highlights Parser: Implemented using ANTLR4, generating lexer, parser, and visitor classes from the Cobra grammar (Cobra.g4). Architecture: Follows the Visitor pattern for AST traversal and evaluation. Modularized into Frontend, Interpreter, and Environment layers for clear separation of parsing, execution, and runtime context. Interpreter Core: Dynamically evaluates parsed AST nodes, manages symbol tables, scopes, and runtime type information. Runtime Environment: Object-oriented runtime with user-defined classes, enums, and functions. Exception handling, stack traces, and native interop (external, link). Extensibility: Designed for easy addition of new modules, built-in functions, and future Cobra Canvas (2D/3D graphics engine). Goal: Build a self-contained ecosystem for creative coding, similar in philosophy to Processing or p5.js, but with strong typing and class-based OOP. Vision Cobra’s long-term vision is to become a graphics-focused language for developers, artists, and educators — a platform where logic, design, and rendering converge. Core goals: Integrate a native 2D/3D rendering engine Remove external graphics dependencies Support live visual coding Deliver strongly typed scripting for creative work Language Overview Cobra combines familiar syntax with modern features. import \"exception\"; enum State { Idle, Running, Paused = 10, Finished } i8 health = 100; f32 speed = 1.5; void log(string msg) { print(__FILE__ + \":\" + __LINE__ + \" [\" + __FUNC__ + \"]: \" + msg); } try { throw new System.Exception(\"Example error\"); } catch (System.Exception e) { print(\"Caught: \" + e.getMessage()); } Feature Matrix Category Description Status Core Syntax Variables, constants, expressions ✅ Complete Types Rich numeric and string system ✅ Complete Control Flow if, switch, loops ✅ Complete OOP Classes, constructors, access modifiers, static members ✅ Complete Enums Named constants with values ✅ Complete Data Structures Arrays, dictionaries ✅ Complete Modules Namespaces, imports ✅ Complete Native Interop link, external for FFI ✅ Complete Error Handling try-catch-finally, stack traces ✅ Complete Metaprogramming __FILE__, __LINE__, __FUNC__ ✅ Complete Standard Library Math, string, utility \uD83D\uDEA7 In Progress Graphics Engine “Cobra Canvas” visual system \uD83D\uDEA7 Planned Build and Run Requirements: .NET 9 ANTLR4 (for grammar regeneration) Steps: git clone https://github.com/SujalChoudhari/Cobra.git cd Cobra dotnet build dotnet run -- <file.cb> Roadmap [ ] Expand Math and Utility libraries [ ] Add file I/O and runtime modules [ ] Implement Cobra Canvas for 2D/3D rendering [ ] Add time, animation, and concurrency modules [ ] Introduce bytecode or JIT compilation backend Contributing Pull requests are welcome. Good first contributions include: Adding standard library modules Enhancing the parser or visitor logic Extending runtime error diagnostics Prototyping the graphics subsystem Acknowledgment Initial code generation assisted by Gemini, with architecture, structure, and logic authored and verified manually. Cobra continues as an independent, open-source exploration in language design and creative computing."
  }
}